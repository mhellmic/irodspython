# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_irods', [dirname(__file__)])
        except ImportError:
            import _irods
            return _irods
        if fp is not None:
            try:
                _mod = imp.load_module('_irods', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _irods = swig_import_helper()
    del swig_import_helper
else:
    import _irods
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


# Copyright (c) 2013, University of Liverpool
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Author       : Jerome Fuselier
#

PYRODS_VERSION = _irods.PYRODS_VERSION
# Keep the status of the last called API function
lastStatus = 0

def getStatus():
    return lastStatus

def getStatusStr():
    errName, _ = rodsErrorName(lastStatus)
    return errName

class IrodsException(Exception):

    def __init__(self, errCode):
        self.errCode = errCode
        self.errName, self.errSubName = rodsErrorName(errCode)

    def __str__(self):
        if self.errSubName:
            msg = "iRODS failed with error %d %s %s" % (self.errCode,
                                                        self.errName,
                                                        self.errSubName)
            return msg
        else:
            msg = "iRODS failed with error %d %s" % (self.errCode,
                                                     self.errName)
            return msg

class authCheckInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, authCheckInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, authCheckInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["challenge"] = _irods.authCheckInp_t_challenge_set
    __swig_getmethods__["challenge"] = _irods.authCheckInp_t_challenge_get
    if _newclass:challenge = _swig_property(_irods.authCheckInp_t_challenge_get, _irods.authCheckInp_t_challenge_set)
    __swig_setmethods__["response"] = _irods.authCheckInp_t_response_set
    __swig_getmethods__["response"] = _irods.authCheckInp_t_response_get
    if _newclass:response = _swig_property(_irods.authCheckInp_t_response_get, _irods.authCheckInp_t_response_set)
    __swig_setmethods__["username"] = _irods.authCheckInp_t_username_set
    __swig_getmethods__["username"] = _irods.authCheckInp_t_username_get
    if _newclass:username = _swig_property(_irods.authCheckInp_t_username_get, _irods.authCheckInp_t_username_set)
    def __init__(self): 
        this = _irods.new_authCheckInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_authCheckInp_t
    __del__ = lambda self : None;
authCheckInp_t_swigregister = _irods.authCheckInp_t_swigregister
authCheckInp_t_swigregister(authCheckInp_t)

class authCheckOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, authCheckOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, authCheckOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["privLevel"] = _irods.authCheckOut_t_privLevel_set
    __swig_getmethods__["privLevel"] = _irods.authCheckOut_t_privLevel_get
    if _newclass:privLevel = _swig_property(_irods.authCheckOut_t_privLevel_get, _irods.authCheckOut_t_privLevel_set)
    __swig_setmethods__["clientPrivLevel"] = _irods.authCheckOut_t_clientPrivLevel_set
    __swig_getmethods__["clientPrivLevel"] = _irods.authCheckOut_t_clientPrivLevel_get
    if _newclass:clientPrivLevel = _swig_property(_irods.authCheckOut_t_clientPrivLevel_get, _irods.authCheckOut_t_clientPrivLevel_set)
    __swig_setmethods__["serverResponse"] = _irods.authCheckOut_t_serverResponse_set
    __swig_getmethods__["serverResponse"] = _irods.authCheckOut_t_serverResponse_get
    if _newclass:serverResponse = _swig_property(_irods.authCheckOut_t_serverResponse_get, _irods.authCheckOut_t_serverResponse_set)
    def __init__(self): 
        this = _irods.new_authCheckOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_authCheckOut_t
    __del__ = lambda self : None;
authCheckOut_t_swigregister = _irods.authCheckOut_t_swigregister
authCheckOut_t_swigregister(authCheckOut_t)

class authResponseInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, authResponseInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, authResponseInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["response"] = _irods.authResponseInp_t_response_set
    __swig_getmethods__["response"] = _irods.authResponseInp_t_response_get
    if _newclass:response = _swig_property(_irods.authResponseInp_t_response_get, _irods.authResponseInp_t_response_set)
    __swig_setmethods__["username"] = _irods.authResponseInp_t_username_set
    __swig_getmethods__["username"] = _irods.authResponseInp_t_username_get
    if _newclass:username = _swig_property(_irods.authResponseInp_t_username_get, _irods.authResponseInp_t_username_set)
    def __init__(self): 
        this = _irods.new_authResponseInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_authResponseInp_t
    __del__ = lambda self : None;
authResponseInp_t_swigregister = _irods.authResponseInp_t_swigregister
authResponseInp_t_swigregister(authResponseInp_t)

class authRequestOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, authRequestOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, authRequestOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["challenge"] = _irods.authRequestOut_t_challenge_set
    __swig_getmethods__["challenge"] = _irods.authRequestOut_t_challenge_get
    if _newclass:challenge = _swig_property(_irods.authRequestOut_t_challenge_get, _irods.authRequestOut_t_challenge_set)
    def __init__(self): 
        this = _irods.new_authRequestOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_authRequestOut_t
    __del__ = lambda self : None;
authRequestOut_t_swigregister = _irods.authRequestOut_t_swigregister
authRequestOut_t_swigregister(authRequestOut_t)

class gsiAuthRequestOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gsiAuthRequestOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gsiAuthRequestOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["serverDN"] = _irods.gsiAuthRequestOut_t_serverDN_set
    __swig_getmethods__["serverDN"] = _irods.gsiAuthRequestOut_t_serverDN_get
    if _newclass:serverDN = _swig_property(_irods.gsiAuthRequestOut_t_serverDN_get, _irods.gsiAuthRequestOut_t_serverDN_set)
    def __init__(self): 
        this = _irods.new_gsiAuthRequestOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_gsiAuthRequestOut_t
    __del__ = lambda self : None;
gsiAuthRequestOut_t_swigregister = _irods.gsiAuthRequestOut_t_swigregister
gsiAuthRequestOut_t_swigregister(gsiAuthRequestOut_t)


def rcAuthCheck(*args):
  return _irods.rcAuthCheck(*args)
rcAuthCheck = _irods.rcAuthCheck

def rcAuthRequest(*args):
  return _irods.rcAuthRequest(*args)
rcAuthRequest = _irods.rcAuthRequest

def rcAuthResponse(*args):
  return _irods.rcAuthResponse(*args)
rcAuthResponse = _irods.rcAuthResponse

def rcGsiAuthRequest(*args):
  return _irods.rcGsiAuthRequest(*args)
rcGsiAuthRequest = _irods.rcGsiAuthRequest
class chkObjPermAndStat_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chkObjPermAndStat_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chkObjPermAndStat_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["objPath"] = _irods.chkObjPermAndStat_t_objPath_set
    __swig_getmethods__["objPath"] = _irods.chkObjPermAndStat_t_objPath_get
    if _newclass:objPath = _swig_property(_irods.chkObjPermAndStat_t_objPath_get, _irods.chkObjPermAndStat_t_objPath_set)
    __swig_setmethods__["permission"] = _irods.chkObjPermAndStat_t_permission_set
    __swig_getmethods__["permission"] = _irods.chkObjPermAndStat_t_permission_get
    if _newclass:permission = _swig_property(_irods.chkObjPermAndStat_t_permission_get, _irods.chkObjPermAndStat_t_permission_set)
    __swig_setmethods__["flags"] = _irods.chkObjPermAndStat_t_flags_set
    __swig_getmethods__["flags"] = _irods.chkObjPermAndStat_t_flags_get
    if _newclass:flags = _swig_property(_irods.chkObjPermAndStat_t_flags_get, _irods.chkObjPermAndStat_t_flags_set)
    __swig_setmethods__["status"] = _irods.chkObjPermAndStat_t_status_set
    __swig_getmethods__["status"] = _irods.chkObjPermAndStat_t_status_get
    if _newclass:status = _swig_property(_irods.chkObjPermAndStat_t_status_get, _irods.chkObjPermAndStat_t_status_set)
    __swig_setmethods__["condInput"] = _irods.chkObjPermAndStat_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.chkObjPermAndStat_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.chkObjPermAndStat_t_condInput_get, _irods.chkObjPermAndStat_t_condInput_set)
    def __init__(self): 
        this = _irods.new_chkObjPermAndStat_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_chkObjPermAndStat_t
    __del__ = lambda self : None;
chkObjPermAndStat_t_swigregister = _irods.chkObjPermAndStat_t_swigregister
chkObjPermAndStat_t_swigregister(chkObjPermAndStat_t)


def rcChkObjPermAndStat(*args):
  return _irods.rcChkObjPermAndStat(*args)
rcChkObjPermAndStat = _irods.rcChkObjPermAndStat
class collInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, collInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, collInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collName"] = _irods.collInp_t_collName_set
    __swig_getmethods__["collName"] = _irods.collInp_t_collName_get
    if _newclass:collName = _swig_property(_irods.collInp_t_collName_get, _irods.collInp_t_collName_set)
    __swig_setmethods__["flags"] = _irods.collInp_t_flags_set
    __swig_getmethods__["flags"] = _irods.collInp_t_flags_get
    if _newclass:flags = _swig_property(_irods.collInp_t_flags_get, _irods.collInp_t_flags_set)
    __swig_setmethods__["oprType"] = _irods.collInp_t_oprType_set
    __swig_getmethods__["oprType"] = _irods.collInp_t_oprType_get
    if _newclass:oprType = _swig_property(_irods.collInp_t_oprType_get, _irods.collInp_t_oprType_set)
    __swig_setmethods__["condInput"] = _irods.collInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.collInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.collInp_t_condInput_get, _irods.collInp_t_condInput_set)
    def __init__(self): 
        this = _irods.new_collInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_collInp_t
    __del__ = lambda self : None;
collInp_t_swigregister = _irods.collInp_t_swigregister
collInp_t_swigregister(collInp_t)

class dataCopyInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dataCopyInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dataCopyInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dataOprInp"] = _irods.dataCopyInp_t_dataOprInp_set
    __swig_getmethods__["dataOprInp"] = _irods.dataCopyInp_t_dataOprInp_get
    if _newclass:dataOprInp = _swig_property(_irods.dataCopyInp_t_dataOprInp_get, _irods.dataCopyInp_t_dataOprInp_set)
    __swig_setmethods__["portalOprOut"] = _irods.dataCopyInp_t_portalOprOut_set
    __swig_getmethods__["portalOprOut"] = _irods.dataCopyInp_t_portalOprOut_get
    if _newclass:portalOprOut = _swig_property(_irods.dataCopyInp_t_portalOprOut_get, _irods.dataCopyInp_t_portalOprOut_set)
    def __init__(self): 
        this = _irods.new_dataCopyInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_dataCopyInp_t
    __del__ = lambda self : None;
dataCopyInp_t_swigregister = _irods.dataCopyInp_t_swigregister
dataCopyInp_t_swigregister(dataCopyInp_t)

class dataObjCopyInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dataObjCopyInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dataObjCopyInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srcDataObjInp"] = _irods.dataObjCopyInp_t_srcDataObjInp_set
    __swig_getmethods__["srcDataObjInp"] = _irods.dataObjCopyInp_t_srcDataObjInp_get
    if _newclass:srcDataObjInp = _swig_property(_irods.dataObjCopyInp_t_srcDataObjInp_get, _irods.dataObjCopyInp_t_srcDataObjInp_set)
    __swig_setmethods__["destDataObjInp"] = _irods.dataObjCopyInp_t_destDataObjInp_set
    __swig_getmethods__["destDataObjInp"] = _irods.dataObjCopyInp_t_destDataObjInp_get
    if _newclass:destDataObjInp = _swig_property(_irods.dataObjCopyInp_t_destDataObjInp_get, _irods.dataObjCopyInp_t_destDataObjInp_set)
    def __init__(self): 
        this = _irods.new_dataObjCopyInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_dataObjCopyInp_t
    __del__ = lambda self : None;
dataObjCopyInp_t_swigregister = _irods.dataObjCopyInp_t_swigregister
dataObjCopyInp_t_swigregister(dataObjCopyInp_t)

class dataObjInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dataObjInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dataObjInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["objPath"] = _irods.dataObjInp_t_objPath_set
    __swig_getmethods__["objPath"] = _irods.dataObjInp_t_objPath_get
    if _newclass:objPath = _swig_property(_irods.dataObjInp_t_objPath_get, _irods.dataObjInp_t_objPath_set)
    __swig_setmethods__["createMode"] = _irods.dataObjInp_t_createMode_set
    __swig_getmethods__["createMode"] = _irods.dataObjInp_t_createMode_get
    if _newclass:createMode = _swig_property(_irods.dataObjInp_t_createMode_get, _irods.dataObjInp_t_createMode_set)
    __swig_setmethods__["openFlags"] = _irods.dataObjInp_t_openFlags_set
    __swig_getmethods__["openFlags"] = _irods.dataObjInp_t_openFlags_get
    if _newclass:openFlags = _swig_property(_irods.dataObjInp_t_openFlags_get, _irods.dataObjInp_t_openFlags_set)
    __swig_setmethods__["offset"] = _irods.dataObjInp_t_offset_set
    __swig_getmethods__["offset"] = _irods.dataObjInp_t_offset_get
    if _newclass:offset = _swig_property(_irods.dataObjInp_t_offset_get, _irods.dataObjInp_t_offset_set)
    __swig_setmethods__["dataSize"] = _irods.dataObjInp_t_dataSize_set
    __swig_getmethods__["dataSize"] = _irods.dataObjInp_t_dataSize_get
    if _newclass:dataSize = _swig_property(_irods.dataObjInp_t_dataSize_get, _irods.dataObjInp_t_dataSize_set)
    __swig_setmethods__["numThreads"] = _irods.dataObjInp_t_numThreads_set
    __swig_getmethods__["numThreads"] = _irods.dataObjInp_t_numThreads_get
    if _newclass:numThreads = _swig_property(_irods.dataObjInp_t_numThreads_get, _irods.dataObjInp_t_numThreads_set)
    __swig_setmethods__["oprType"] = _irods.dataObjInp_t_oprType_set
    __swig_getmethods__["oprType"] = _irods.dataObjInp_t_oprType_get
    if _newclass:oprType = _swig_property(_irods.dataObjInp_t_oprType_get, _irods.dataObjInp_t_oprType_set)
    __swig_setmethods__["specColl"] = _irods.dataObjInp_t_specColl_set
    __swig_getmethods__["specColl"] = _irods.dataObjInp_t_specColl_get
    if _newclass:specColl = _swig_property(_irods.dataObjInp_t_specColl_get, _irods.dataObjInp_t_specColl_set)
    __swig_setmethods__["condInput"] = _irods.dataObjInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.dataObjInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.dataObjInp_t_condInput_get, _irods.dataObjInp_t_condInput_set)
    def __init__(self): 
        this = _irods.new_dataObjInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_dataObjInp_t
    __del__ = lambda self : None;
dataObjInp_t_swigregister = _irods.dataObjInp_t_swigregister
dataObjInp_t_swigregister(dataObjInp_t)

class dataOprInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dataOprInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dataOprInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["oprType"] = _irods.dataOprInp_t_oprType_set
    __swig_getmethods__["oprType"] = _irods.dataOprInp_t_oprType_get
    if _newclass:oprType = _swig_property(_irods.dataOprInp_t_oprType_get, _irods.dataOprInp_t_oprType_set)
    __swig_setmethods__["numThreads"] = _irods.dataOprInp_t_numThreads_set
    __swig_getmethods__["numThreads"] = _irods.dataOprInp_t_numThreads_get
    if _newclass:numThreads = _swig_property(_irods.dataOprInp_t_numThreads_get, _irods.dataOprInp_t_numThreads_set)
    __swig_setmethods__["srcL3descInx"] = _irods.dataOprInp_t_srcL3descInx_set
    __swig_getmethods__["srcL3descInx"] = _irods.dataOprInp_t_srcL3descInx_get
    if _newclass:srcL3descInx = _swig_property(_irods.dataOprInp_t_srcL3descInx_get, _irods.dataOprInp_t_srcL3descInx_set)
    __swig_setmethods__["destL3descInx"] = _irods.dataOprInp_t_destL3descInx_set
    __swig_getmethods__["destL3descInx"] = _irods.dataOprInp_t_destL3descInx_get
    if _newclass:destL3descInx = _swig_property(_irods.dataOprInp_t_destL3descInx_get, _irods.dataOprInp_t_destL3descInx_set)
    __swig_setmethods__["srcRescTypeInx"] = _irods.dataOprInp_t_srcRescTypeInx_set
    __swig_getmethods__["srcRescTypeInx"] = _irods.dataOprInp_t_srcRescTypeInx_get
    if _newclass:srcRescTypeInx = _swig_property(_irods.dataOprInp_t_srcRescTypeInx_get, _irods.dataOprInp_t_srcRescTypeInx_set)
    __swig_setmethods__["destRescTypeInx"] = _irods.dataOprInp_t_destRescTypeInx_set
    __swig_getmethods__["destRescTypeInx"] = _irods.dataOprInp_t_destRescTypeInx_get
    if _newclass:destRescTypeInx = _swig_property(_irods.dataOprInp_t_destRescTypeInx_get, _irods.dataOprInp_t_destRescTypeInx_set)
    __swig_setmethods__["offset"] = _irods.dataOprInp_t_offset_set
    __swig_getmethods__["offset"] = _irods.dataOprInp_t_offset_get
    if _newclass:offset = _swig_property(_irods.dataOprInp_t_offset_get, _irods.dataOprInp_t_offset_set)
    __swig_setmethods__["dataSize"] = _irods.dataOprInp_t_dataSize_set
    __swig_getmethods__["dataSize"] = _irods.dataOprInp_t_dataSize_get
    if _newclass:dataSize = _swig_property(_irods.dataOprInp_t_dataSize_get, _irods.dataOprInp_t_dataSize_set)
    __swig_setmethods__["condInput"] = _irods.dataOprInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.dataOprInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.dataOprInp_t_condInput_get, _irods.dataOprInp_t_condInput_set)
    def __init__(self): 
        this = _irods.new_dataOprInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_dataOprInp_t
    __del__ = lambda self : None;
dataOprInp_t_swigregister = _irods.dataOprInp_t_swigregister
dataOprInp_t_swigregister(dataOprInp_t)

class openedDataObjInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, openedDataObjInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, openedDataObjInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["l1descInx"] = _irods.openedDataObjInp_t_l1descInx_set
    __swig_getmethods__["l1descInx"] = _irods.openedDataObjInp_t_l1descInx_get
    if _newclass:l1descInx = _swig_property(_irods.openedDataObjInp_t_l1descInx_get, _irods.openedDataObjInp_t_l1descInx_set)
    __swig_setmethods__["len"] = _irods.openedDataObjInp_t_len_set
    __swig_getmethods__["len"] = _irods.openedDataObjInp_t_len_get
    if _newclass:len = _swig_property(_irods.openedDataObjInp_t_len_get, _irods.openedDataObjInp_t_len_set)
    __swig_setmethods__["whence"] = _irods.openedDataObjInp_t_whence_set
    __swig_getmethods__["whence"] = _irods.openedDataObjInp_t_whence_get
    if _newclass:whence = _swig_property(_irods.openedDataObjInp_t_whence_get, _irods.openedDataObjInp_t_whence_set)
    __swig_setmethods__["oprType"] = _irods.openedDataObjInp_t_oprType_set
    __swig_getmethods__["oprType"] = _irods.openedDataObjInp_t_oprType_get
    if _newclass:oprType = _swig_property(_irods.openedDataObjInp_t_oprType_get, _irods.openedDataObjInp_t_oprType_set)
    __swig_setmethods__["offset"] = _irods.openedDataObjInp_t_offset_set
    __swig_getmethods__["offset"] = _irods.openedDataObjInp_t_offset_get
    if _newclass:offset = _swig_property(_irods.openedDataObjInp_t_offset_get, _irods.openedDataObjInp_t_offset_set)
    __swig_setmethods__["bytesWritten"] = _irods.openedDataObjInp_t_bytesWritten_set
    __swig_getmethods__["bytesWritten"] = _irods.openedDataObjInp_t_bytesWritten_get
    if _newclass:bytesWritten = _swig_property(_irods.openedDataObjInp_t_bytesWritten_get, _irods.openedDataObjInp_t_bytesWritten_set)
    __swig_setmethods__["condInput"] = _irods.openedDataObjInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.openedDataObjInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.openedDataObjInp_t_condInput_get, _irods.openedDataObjInp_t_condInput_set)
    def __init__(self): 
        this = _irods.new_openedDataObjInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_openedDataObjInp_t
    __del__ = lambda self : None;
openedDataObjInp_t_swigregister = _irods.openedDataObjInp_t_swigregister
openedDataObjInp_t_swigregister(openedDataObjInp_t)

class openStat_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, openStat_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, openStat_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dataSize"] = _irods.openStat_t_dataSize_set
    __swig_getmethods__["dataSize"] = _irods.openStat_t_dataSize_get
    if _newclass:dataSize = _swig_property(_irods.openStat_t_dataSize_get, _irods.openStat_t_dataSize_set)
    __swig_setmethods__["dataType"] = _irods.openStat_t_dataType_set
    __swig_getmethods__["dataType"] = _irods.openStat_t_dataType_get
    if _newclass:dataType = _swig_property(_irods.openStat_t_dataType_get, _irods.openStat_t_dataType_set)
    __swig_setmethods__["dataMode"] = _irods.openStat_t_dataMode_set
    __swig_getmethods__["dataMode"] = _irods.openStat_t_dataMode_get
    if _newclass:dataMode = _swig_property(_irods.openStat_t_dataMode_get, _irods.openStat_t_dataMode_set)
    __swig_setmethods__["l3descInx"] = _irods.openStat_t_l3descInx_set
    __swig_getmethods__["l3descInx"] = _irods.openStat_t_l3descInx_get
    if _newclass:l3descInx = _swig_property(_irods.openStat_t_l3descInx_get, _irods.openStat_t_l3descInx_set)
    __swig_setmethods__["replStatus"] = _irods.openStat_t_replStatus_set
    __swig_getmethods__["replStatus"] = _irods.openStat_t_replStatus_get
    if _newclass:replStatus = _swig_property(_irods.openStat_t_replStatus_get, _irods.openStat_t_replStatus_set)
    __swig_setmethods__["rescTypeInx"] = _irods.openStat_t_rescTypeInx_set
    __swig_getmethods__["rescTypeInx"] = _irods.openStat_t_rescTypeInx_get
    if _newclass:rescTypeInx = _swig_property(_irods.openStat_t_rescTypeInx_get, _irods.openStat_t_rescTypeInx_set)
    __swig_setmethods__["replNum"] = _irods.openStat_t_replNum_set
    __swig_getmethods__["replNum"] = _irods.openStat_t_replNum_get
    if _newclass:replNum = _swig_property(_irods.openStat_t_replNum_get, _irods.openStat_t_replNum_set)
    def __init__(self): 
        this = _irods.new_openStat_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_openStat_t
    __del__ = lambda self : None;
openStat_t_swigregister = _irods.openStat_t_swigregister
openStat_t_swigregister(openStat_t)

class portalOprOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, portalOprOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, portalOprOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _irods.portalOprOut_t_status_set
    __swig_getmethods__["status"] = _irods.portalOprOut_t_status_get
    if _newclass:status = _swig_property(_irods.portalOprOut_t_status_get, _irods.portalOprOut_t_status_set)
    __swig_setmethods__["l1descInx"] = _irods.portalOprOut_t_l1descInx_set
    __swig_getmethods__["l1descInx"] = _irods.portalOprOut_t_l1descInx_get
    if _newclass:l1descInx = _swig_property(_irods.portalOprOut_t_l1descInx_get, _irods.portalOprOut_t_l1descInx_set)
    __swig_setmethods__["numThreads"] = _irods.portalOprOut_t_numThreads_set
    __swig_getmethods__["numThreads"] = _irods.portalOprOut_t_numThreads_get
    if _newclass:numThreads = _swig_property(_irods.portalOprOut_t_numThreads_get, _irods.portalOprOut_t_numThreads_set)
    __swig_setmethods__["chksum"] = _irods.portalOprOut_t_chksum_set
    __swig_getmethods__["chksum"] = _irods.portalOprOut_t_chksum_get
    if _newclass:chksum = _swig_property(_irods.portalOprOut_t_chksum_get, _irods.portalOprOut_t_chksum_set)
    __swig_setmethods__["portList"] = _irods.portalOprOut_t_portList_set
    __swig_getmethods__["portList"] = _irods.portalOprOut_t_portList_get
    if _newclass:portList = _swig_property(_irods.portalOprOut_t_portList_get, _irods.portalOprOut_t_portList_set)
    def __init__(self): 
        this = _irods.new_portalOprOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_portalOprOut_t
    __del__ = lambda self : None;
portalOprOut_t_swigregister = _irods.portalOprOut_t_swigregister
portalOprOut_t_swigregister(portalOprOut_t)

class portList_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, portList_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, portList_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["portNum"] = _irods.portList_t_portNum_set
    __swig_getmethods__["portNum"] = _irods.portList_t_portNum_get
    if _newclass:portNum = _swig_property(_irods.portList_t_portNum_get, _irods.portList_t_portNum_set)
    __swig_setmethods__["cookie"] = _irods.portList_t_cookie_set
    __swig_getmethods__["cookie"] = _irods.portList_t_cookie_get
    if _newclass:cookie = _swig_property(_irods.portList_t_cookie_get, _irods.portList_t_cookie_set)
    __swig_setmethods__["windowSize"] = _irods.portList_t_windowSize_set
    __swig_getmethods__["windowSize"] = _irods.portList_t_windowSize_get
    if _newclass:windowSize = _swig_property(_irods.portList_t_windowSize_get, _irods.portList_t_windowSize_set)
    __swig_setmethods__["hostAddr"] = _irods.portList_t_hostAddr_set
    __swig_getmethods__["hostAddr"] = _irods.portList_t_hostAddr_get
    if _newclass:hostAddr = _swig_property(_irods.portList_t_hostAddr_get, _irods.portList_t_hostAddr_set)
    def __init__(self): 
        this = _irods.new_portList_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_portList_t
    __del__ = lambda self : None;
portList_t_swigregister = _irods.portList_t_swigregister
portList_t_swigregister(portList_t)


def clearDataObjCopyInp(*args):
  return _irods.clearDataObjCopyInp(*args)
clearDataObjCopyInp = _irods.clearDataObjCopyInp

def rcDataCopy(*args):
  return _irods.rcDataCopy(*args)
rcDataCopy = _irods.rcDataCopy

def rcDataGet(*args):
  return _irods.rcDataGet(*args)
rcDataGet = _irods.rcDataGet

def rcDataPut(*args):
  return _irods.rcDataPut(*args)
rcDataPut = _irods.rcDataPut

def rcDataObjChksum(*args):
  return _irods.rcDataObjChksum(*args)
rcDataObjChksum = _irods.rcDataObjChksum

def rcDataObjClose(*args):
  return _irods.rcDataObjClose(*args)
rcDataObjClose = _irods.rcDataObjClose

def rcDataObjCopy(*args):
  return _irods.rcDataObjCopy(*args)
rcDataObjCopy = _irods.rcDataObjCopy

def rcDataObjCreate(*args):
  return _irods.rcDataObjCreate(*args)
rcDataObjCreate = _irods.rcDataObjCreate

def rcDataObjCreateAndStat(*args):
  return _irods.rcDataObjCreateAndStat(*args)
rcDataObjCreateAndStat = _irods.rcDataObjCreateAndStat

def rcDataObjGet(*args):
  return _irods.rcDataObjGet(*args)
rcDataObjGet = _irods.rcDataObjGet

def rcDataObjLock(*args):
  return _irods.rcDataObjLock(*args)
rcDataObjLock = _irods.rcDataObjLock

def rcDataObjLseek(*args):
  return _irods.rcDataObjLseek(*args)
rcDataObjLseek = _irods.rcDataObjLseek

def rcDataObjOpen(*args):
  return _irods.rcDataObjOpen(*args)
rcDataObjOpen = _irods.rcDataObjOpen

def rcDataObjOpenAndStat(*args):
  return _irods.rcDataObjOpenAndStat(*args)
rcDataObjOpenAndStat = _irods.rcDataObjOpenAndStat

def rcDataObjPhymv(*args):
  return _irods.rcDataObjPhymv(*args)
rcDataObjPhymv = _irods.rcDataObjPhymv

def rcDataObjPut(*args):
  return _irods.rcDataObjPut(*args)
rcDataObjPut = _irods.rcDataObjPut

def rcDataObjRead(*args):
  return _irods.rcDataObjRead(*args)
rcDataObjRead = _irods.rcDataObjRead
def rcDataObjRead(conn, fileReadInp):
    dataObjReadOutBBuf = bytesBuf_t()
    dataObjReadOutBBuf.malloc(fileReadInp.len)
    readSize = _irods.rcDataObjRead(conn, fileReadInp, dataObjReadOutBBuf)
    outString = dataObjReadOutBBuf.getBuf()
    return (readSize, outString)


def rcDataObjRename(*args):
  return _irods.rcDataObjRename(*args)
rcDataObjRename = _irods.rcDataObjRename

def rcDataObjRepl(*args):
  return _irods.rcDataObjRepl(*args)
rcDataObjRepl = _irods.rcDataObjRepl

def rcDataObjRsync(*args):
  return _irods.rcDataObjRsync(*args)
rcDataObjRsync = _irods.rcDataObjRsync

def rcDataObjTrim(*args):
  return _irods.rcDataObjTrim(*args)
rcDataObjTrim = _irods.rcDataObjTrim

def rcDataObjTruncate(*args):
  return _irods.rcDataObjTruncate(*args)
rcDataObjTruncate = _irods.rcDataObjTruncate

def rcDataObjUnlink(*args):
  return _irods.rcDataObjUnlink(*args)
rcDataObjUnlink = _irods.rcDataObjUnlink

def rcDataObjWrite(*args):
  return _irods.rcDataObjWrite(*args)
rcDataObjWrite = _irods.rcDataObjWrite
CHALLENGE_LEN = _irods.CHALLENGE_LEN
RESPONSE_LEN = _irods.RESPONSE_LEN
DONE_OPR = _irods.DONE_OPR
PUT_OPR = _irods.PUT_OPR
GET_OPR = _irods.GET_OPR
SAME_HOST_COPY_OPR = _irods.SAME_HOST_COPY_OPR
COPY_TO_LOCAL_OPR = _irods.COPY_TO_LOCAL_OPR
COPY_TO_REM_OPR = _irods.COPY_TO_REM_OPR
REPLICATE_OPR = _irods.REPLICATE_OPR
REPLICATE_DEST = _irods.REPLICATE_DEST
REPLICATE_SRC = _irods.REPLICATE_SRC
COPY_DEST = _irods.COPY_DEST
COPY_SRC = _irods.COPY_SRC
RENAME_DATA_OBJ = _irods.RENAME_DATA_OBJ
RENAME_COLL = _irods.RENAME_COLL
MOVE_OPR = _irods.MOVE_OPR
RSYNC_OPR = _irods.RSYNC_OPR
PHYMV_OPR = _irods.PHYMV_OPR
PHYMV_SRC = _irods.PHYMV_SRC
PHYMV_DEST = _irods.PHYMV_DEST
QUERY_DATA_OBJ = _irods.QUERY_DATA_OBJ
QUERY_DATA_OBJ_RECUR = _irods.QUERY_DATA_OBJ_RECUR
QUERY_COLL_OBJ = _irods.QUERY_COLL_OBJ
QUERY_COLL_OBJ_RECUR = _irods.QUERY_COLL_OBJ_RECUR
RENAME_UNKNOWN_TYPE = _irods.RENAME_UNKNOWN_TYPE
REMOTE_ZONE_OPR = _irods.REMOTE_ZONE_OPR
UNREG_OPR = _irods.UNREG_OPR
NC_OPR = _irods.NC_OPR
NC_OPEN_FOR_WRITE = _irods.NC_OPEN_FOR_WRITE
NC_OPEN_FOR_READ = _irods.NC_OPEN_FOR_READ
NC_CREATE = _irods.NC_CREATE
NC_OPEN_GROUP = _irods.NC_OPEN_GROUP
CREATE_TYPE = _irods.CREATE_TYPE
OPEN_FOR_READ_TYPE = _irods.OPEN_FOR_READ_TYPE
OPEN_FOR_WRITE_TYPE = _irods.OPEN_FOR_WRITE_TYPE
STREAMING_FLAG = _irods.STREAMING_FLAG
NO_CHK_COPY_LEN_FLAG = _irods.NO_CHK_COPY_LEN_FLAG
READ_LOCK_TYPE = _irods.READ_LOCK_TYPE
WRITE_LOCK_TYPE = _irods.WRITE_LOCK_TYPE
UNLOCK_TYPE = _irods.UNLOCK_TYPE
SET_LOCK_CMD = _irods.SET_LOCK_CMD
SET_LOCK_WAIT_CMD = _irods.SET_LOCK_WAIT_CMD
GET_LOCK_CMD = _irods.GET_LOCK_CMD
LONG_METADATA_FG = _irods.LONG_METADATA_FG
VERY_LONG_METADATA_FG = _irods.VERY_LONG_METADATA_FG
RECUR_QUERY_FG = _irods.RECUR_QUERY_FG
DATA_QUERY_FIRST_FG = _irods.DATA_QUERY_FIRST_FG
NO_TRIM_REPL_FG = _irods.NO_TRIM_REPL_FG
INCLUDE_CONDINPUT_IN_QUERY = _irods.INCLUDE_CONDINPUT_IN_QUERY
STR_MS_T = _irods.STR_MS_T
INT_MS_T = _irods.INT_MS_T
INT16_MS_T = _irods.INT16_MS_T
CHAR_MS_T = _irods.CHAR_MS_T
BUF_LEN_MS_T = _irods.BUF_LEN_MS_T
STREAM_MS_T = _irods.STREAM_MS_T
DOUBLE_MS_T = _irods.DOUBLE_MS_T
FLOAT_MS_T = _irods.FLOAT_MS_T
BOOL_MS_T = _irods.BOOL_MS_T
DataObjInp_MS_T = _irods.DataObjInp_MS_T
DataObjCloseInp_MS_T = _irods.DataObjCloseInp_MS_T
DataObjCopyInp_MS_T = _irods.DataObjCopyInp_MS_T
DataObjReadInp_MS_T = _irods.DataObjReadInp_MS_T
DataObjWriteInp_MS_T = _irods.DataObjWriteInp_MS_T
DataObjLseekInp_MS_T = _irods.DataObjLseekInp_MS_T
DataObjLseekOut_MS_T = _irods.DataObjLseekOut_MS_T
KeyValPair_MS_T = _irods.KeyValPair_MS_T
TagStruct_MS_T = _irods.TagStruct_MS_T
CollInp_MS_T = _irods.CollInp_MS_T
ExecCmd_MS_T = _irods.ExecCmd_MS_T
ExecCmdOut_MS_T = _irods.ExecCmdOut_MS_T
RodsObjStat_MS_T = _irods.RodsObjStat_MS_T
VaultPathPolicy_MS_T = _irods.VaultPathPolicy_MS_T
StrArray_MS_T = _irods.StrArray_MS_T
IntArray_MS_T = _irods.IntArray_MS_T
GenQueryInp_MS_T = _irods.GenQueryInp_MS_T
GenQueryOut_MS_T = _irods.GenQueryOut_MS_T
XmsgTicketInfo_MS_T = _irods.XmsgTicketInfo_MS_T
SendXmsgInfo_MS_T = _irods.SendXmsgInfo_MS_T
GetXmsgTicketInp_MS_T = _irods.GetXmsgTicketInp_MS_T
SendXmsgInp_MS_T = _irods.SendXmsgInp_MS_T
RcvXmsgInp_MS_T = _irods.RcvXmsgInp_MS_T
RcvXmsgOut_MS_T = _irods.RcvXmsgOut_MS_T
StructFileExtAndRegInp_MS_T = _irods.StructFileExtAndRegInp_MS_T
RuleSet_MS_T = _irods.RuleSet_MS_T
RuleStruct_MS_T = _irods.RuleStruct_MS_T
DVMapStruct_MS_T = _irods.DVMapStruct_MS_T
FNMapStruct_MS_T = _irods.FNMapStruct_MS_T
MsrvcStruct_MS_T = _irods.MsrvcStruct_MS_T
NcOpenInp_MS_T = _irods.NcOpenInp_MS_T
NcInqIdInp_MS_T = _irods.NcInqIdInp_MS_T
NcInqWithIdOut_MS_T = _irods.NcInqWithIdOut_MS_T
NcInqInp_MS_T = _irods.NcInqInp_MS_T
NcInqOut_MS_T = _irods.NcInqOut_MS_T
NcCloseInp_MS_T = _irods.NcCloseInp_MS_T
NcGetVarInp_MS_T = _irods.NcGetVarInp_MS_T
NcGetVarOut_MS_T = _irods.NcGetVarOut_MS_T
NccfGetVarInp_MS_T = _irods.NccfGetVarInp_MS_T
NccfGetVarOut_MS_T = _irods.NccfGetVarOut_MS_T
NcInqGrpsOut_MS_T = _irods.NcInqGrpsOut_MS_T
Dictionary_MS_T = _irods.Dictionary_MS_T
DictArray_MS_T = _irods.DictArray_MS_T
GenArray_MS_T = _irods.GenArray_MS_T
RESC_NAME_FLAG = _irods.RESC_NAME_FLAG
DEST_RESC_NAME_FLAG = _irods.DEST_RESC_NAME_FLAG
BACKUP_RESC_NAME_FLAG = _irods.BACKUP_RESC_NAME_FLAG
FORCE_FLAG_FLAG = _irods.FORCE_FLAG_FLAG
ALL_FLAG = _irods.ALL_FLAG
LOCAL_PATH_FLAG = _irods.LOCAL_PATH_FLAG
VERIFY_CHKSUM_FLAG = _irods.VERIFY_CHKSUM_FLAG
IRODS_ADMIN_FLAG = _irods.IRODS_ADMIN_FLAG
UPDATE_REPL_FLAG = _irods.UPDATE_REPL_FLAG
REPL_NUM_FLAG = _irods.REPL_NUM_FLAG
DATA_TYPE_FLAG = _irods.DATA_TYPE_FLAG
CHKSUM_ALL_FLAG = _irods.CHKSUM_ALL_FLAG
FORCE_CHKSUM_FLAG = _irods.FORCE_CHKSUM_FLAG
FILE_PATH_FLAG = _irods.FILE_PATH_FLAG
CREATE_MODE_FLAG = _irods.CREATE_MODE_FLAG
OPEN_FLAGS_FLAG = _irods.OPEN_FLAGS_FLAG
COLL_FLAGS_FLAG = _irods.COLL_FLAGS_FLAG
DATA_SIZE_FLAGS = _irods.DATA_SIZE_FLAGS
NUM_THREADS_FLAG = _irods.NUM_THREADS_FLAG
OPR_TYPE_FLAG = _irods.OPR_TYPE_FLAG
OBJ_PATH_FLAG = _irods.OBJ_PATH_FLAG
COLL_NAME_FLAG = _irods.COLL_NAME_FLAG
IRODS_RMTRASH_FLAG = _irods.IRODS_RMTRASH_FLAG
IRODS_ADMIN_RMTRASH_FLAG = _irods.IRODS_ADMIN_RMTRASH_FLAG
DEF_RESC_NAME_FLAG = _irods.DEF_RESC_NAME_FLAG
RBUDP_TRANSFER_FLAG = _irods.RBUDP_TRANSFER_FLAG
RBUDP_SEND_RATE_FLAG = _irods.RBUDP_SEND_RATE_FLAG
RBUDP_PACK_SIZE_FLAG = _irods.RBUDP_PACK_SIZE_FLAG
BULK_OPR_FLAG = _irods.BULK_OPR_FLAG
UNREG_FLAG = _irods.UNREG_FLAG
MAX_PASSWORD_LEN = _irods.MAX_PASSWORD_LEN
MAX_PATH_ALLOWED = _irods.MAX_PATH_ALLOWED
MAX_NAME_LEN = _irods.MAX_NAME_LEN
TRANS_BUF_SZ = _irods.TRANS_BUF_SZ
PUBLIC_USER_NAME = _irods.PUBLIC_USER_NAME
NO_CHK_PERM_FLAG = _irods.NO_CHK_PERM_FLAG
UNIQUE_REM_COMM_FLAG = _irods.UNIQUE_REM_COMM_FLAG
FORCE_FLAG = _irods.FORCE_FLAG
RMDIR_RECUR = _irods.RMDIR_RECUR
PURGE_STRUCT_FILE_CACHE = _irods.PURGE_STRUCT_FILE_CACHE
DELETE_STRUCT_FILE = _irods.DELETE_STRUCT_FILE
NO_REG_COLL_INFO = _irods.NO_REG_COLL_INFO
LOGICAL_BUNDLE = _irods.LOGICAL_BUNDLE
CREATE_TAR_OPR = _irods.CREATE_TAR_OPR
ADD_TO_TAR_OPR = _irods.ADD_TO_TAR_OPR
PRESERVE_COLL_PATH = _irods.PRESERVE_COLL_PATH
PRESERVE_DIR_CONT = _irods.PRESERVE_DIR_CONT
O_RDONLY = _irods.O_RDONLY
O_WRONLY = _irods.O_WRONLY
O_RDWR = _irods.O_RDWR
O_CREAT = _irods.O_CREAT
SEEK_SET = _irods.SEEK_SET
SEEK_CUR = _irods.SEEK_CUR
SEEK_END = _irods.SEEK_END
LOG_SQL = _irods.LOG_SQL
LOG_DEBUG1 = _irods.LOG_DEBUG1
LOG_DEBUG2 = _irods.LOG_DEBUG2
LOG_DEBUG3 = _irods.LOG_DEBUG3
LOG_DEBUG = _irods.LOG_DEBUG
LOG_NOTICE = _irods.LOG_NOTICE
LOG_ERROR = _irods.LOG_ERROR
LOG_SYS_WARNING = _irods.LOG_SYS_WARNING
LOG_SYS_FATAL = _irods.LOG_SYS_FATAL
ALLOW_NO_SRC_FLAG = _irods.ALLOW_NO_SRC_FLAG
MAX_SQL_ATTR = _irods.MAX_SQL_ATTR
MAX_SQL_ROWS = _irods.MAX_SQL_ROWS
ORDER_BY = _irods.ORDER_BY
ORDER_BY_DESC = _irods.ORDER_BY_DESC
RETURN_TOTAL_ROW_COUNT = _irods.RETURN_TOTAL_ROW_COUNT
NO_DISTINCT = _irods.NO_DISTINCT
QUOTA_QUERY = _irods.QUOTA_QUERY
AUTO_CLOSE = _irods.AUTO_CLOSE
UPPER_CASE_WHERE = _irods.UPPER_CASE_WHERE
SELECT_MIN = _irods.SELECT_MIN
SELECT_MAX = _irods.SELECT_MAX
SELECT_SUM = _irods.SELECT_SUM
SELECT_AVG = _irods.SELECT_AVG
SELECT_COUNT = _irods.SELECT_COUNT
MAX_CORE_TABLE_VALUE = _irods.MAX_CORE_TABLE_VALUE
COL_ZONE_ID = _irods.COL_ZONE_ID
COL_ZONE_NAME = _irods.COL_ZONE_NAME
COL_ZONE_TYPE = _irods.COL_ZONE_TYPE
COL_ZONE_CONNECTION = _irods.COL_ZONE_CONNECTION
COL_ZONE_COMMENT = _irods.COL_ZONE_COMMENT
COL_ZONE_CREATE_TIME = _irods.COL_ZONE_CREATE_TIME
COL_ZONE_MODIFY_TIME = _irods.COL_ZONE_MODIFY_TIME
COL_USER_ID = _irods.COL_USER_ID
COL_USER_NAME = _irods.COL_USER_NAME
COL_USER_TYPE = _irods.COL_USER_TYPE
COL_USER_ZONE = _irods.COL_USER_ZONE
COL_USER_INFO = _irods.COL_USER_INFO
COL_USER_COMMENT = _irods.COL_USER_COMMENT
COL_USER_CREATE_TIME = _irods.COL_USER_CREATE_TIME
COL_USER_MODIFY_TIME = _irods.COL_USER_MODIFY_TIME
COL_USER_DN_INVALID = _irods.COL_USER_DN_INVALID
COL_R_RESC_ID = _irods.COL_R_RESC_ID
COL_R_RESC_NAME = _irods.COL_R_RESC_NAME
COL_R_ZONE_NAME = _irods.COL_R_ZONE_NAME
COL_R_TYPE_NAME = _irods.COL_R_TYPE_NAME
COL_R_CLASS_NAME = _irods.COL_R_CLASS_NAME
COL_R_LOC = _irods.COL_R_LOC
COL_R_VAULT_PATH = _irods.COL_R_VAULT_PATH
COL_R_FREE_SPACE = _irods.COL_R_FREE_SPACE
COL_R_RESC_INFO = _irods.COL_R_RESC_INFO
COL_R_RESC_COMMENT = _irods.COL_R_RESC_COMMENT
COL_R_CREATE_TIME = _irods.COL_R_CREATE_TIME
COL_R_MODIFY_TIME = _irods.COL_R_MODIFY_TIME
COL_R_RESC_STATUS = _irods.COL_R_RESC_STATUS
COL_R_FREE_SPACE_TIME = _irods.COL_R_FREE_SPACE_TIME
COL_D_DATA_ID = _irods.COL_D_DATA_ID
COL_D_COLL_ID = _irods.COL_D_COLL_ID
COL_DATA_NAME = _irods.COL_DATA_NAME
COL_DATA_REPL_NUM = _irods.COL_DATA_REPL_NUM
COL_DATA_VERSION = _irods.COL_DATA_VERSION
COL_DATA_TYPE_NAME = _irods.COL_DATA_TYPE_NAME
COL_DATA_SIZE = _irods.COL_DATA_SIZE
COL_D_RESC_GROUP_NAME = _irods.COL_D_RESC_GROUP_NAME
COL_D_RESC_NAME = _irods.COL_D_RESC_NAME
COL_D_DATA_PATH = _irods.COL_D_DATA_PATH
COL_D_OWNER_NAME = _irods.COL_D_OWNER_NAME
COL_D_OWNER_ZONE = _irods.COL_D_OWNER_ZONE
COL_D_REPL_STATUS = _irods.COL_D_REPL_STATUS
COL_D_DATA_STATUS = _irods.COL_D_DATA_STATUS
COL_D_DATA_CHECKSUM = _irods.COL_D_DATA_CHECKSUM
COL_D_EXPIRY = _irods.COL_D_EXPIRY
COL_D_MAP_ID = _irods.COL_D_MAP_ID
COL_D_COMMENTS = _irods.COL_D_COMMENTS
COL_D_CREATE_TIME = _irods.COL_D_CREATE_TIME
COL_D_MODIFY_TIME = _irods.COL_D_MODIFY_TIME
COL_DATA_MODE = _irods.COL_DATA_MODE
COL_COLL_ID = _irods.COL_COLL_ID
COL_COLL_NAME = _irods.COL_COLL_NAME
COL_COLL_PARENT_NAME = _irods.COL_COLL_PARENT_NAME
COL_COLL_OWNER_NAME = _irods.COL_COLL_OWNER_NAME
COL_COLL_OWNER_ZONE = _irods.COL_COLL_OWNER_ZONE
COL_COLL_MAP_ID = _irods.COL_COLL_MAP_ID
COL_COLL_INHERITANCE = _irods.COL_COLL_INHERITANCE
COL_COLL_COMMENTS = _irods.COL_COLL_COMMENTS
COL_COLL_CREATE_TIME = _irods.COL_COLL_CREATE_TIME
COL_COLL_MODIFY_TIME = _irods.COL_COLL_MODIFY_TIME
COL_COLL_TYPE = _irods.COL_COLL_TYPE
COL_COLL_INFO1 = _irods.COL_COLL_INFO1
COL_COLL_INFO2 = _irods.COL_COLL_INFO2
COL_META_DATA_ATTR_NAME = _irods.COL_META_DATA_ATTR_NAME
COL_META_DATA_ATTR_VALUE = _irods.COL_META_DATA_ATTR_VALUE
COL_META_DATA_ATTR_UNITS = _irods.COL_META_DATA_ATTR_UNITS
COL_META_DATA_ATTR_ID = _irods.COL_META_DATA_ATTR_ID
COL_META_DATA_CREATE_TIME = _irods.COL_META_DATA_CREATE_TIME
COL_META_DATA_MODIFY_TIME = _irods.COL_META_DATA_MODIFY_TIME
COL_META_COLL_ATTR_NAME = _irods.COL_META_COLL_ATTR_NAME
COL_META_COLL_ATTR_VALUE = _irods.COL_META_COLL_ATTR_VALUE
COL_META_COLL_ATTR_UNITS = _irods.COL_META_COLL_ATTR_UNITS
COL_META_COLL_ATTR_ID = _irods.COL_META_COLL_ATTR_ID
COL_META_COLL_CREATE_TIME = _irods.COL_META_COLL_CREATE_TIME
COL_META_COLL_MODIFY_TIME = _irods.COL_META_COLL_MODIFY_TIME
COL_META_NAMESPACE_COLL = _irods.COL_META_NAMESPACE_COLL
COL_META_NAMESPACE_DATA = _irods.COL_META_NAMESPACE_DATA
COL_META_NAMESPACE_RESC = _irods.COL_META_NAMESPACE_RESC
COL_META_NAMESPACE_USER = _irods.COL_META_NAMESPACE_USER
COL_META_NAMESPACE_RESC_GROUP = _irods.COL_META_NAMESPACE_RESC_GROUP
COL_META_NAMESPACE_RULE = _irods.COL_META_NAMESPACE_RULE
COL_META_NAMESPACE_MSRVC = _irods.COL_META_NAMESPACE_MSRVC
COL_META_NAMESPACE_MET2 = _irods.COL_META_NAMESPACE_MET2
COL_META_RESC_ATTR_NAME = _irods.COL_META_RESC_ATTR_NAME
COL_META_RESC_ATTR_VALUE = _irods.COL_META_RESC_ATTR_VALUE
COL_META_RESC_ATTR_UNITS = _irods.COL_META_RESC_ATTR_UNITS
COL_META_RESC_ATTR_ID = _irods.COL_META_RESC_ATTR_ID
COL_META_RESC_CREATE_TIME = _irods.COL_META_RESC_CREATE_TIME
COL_META_RESC_MODIFY_TIME = _irods.COL_META_RESC_MODIFY_TIME
COL_META_USER_ATTR_NAME = _irods.COL_META_USER_ATTR_NAME
COL_META_USER_ATTR_VALUE = _irods.COL_META_USER_ATTR_VALUE
COL_META_USER_ATTR_UNITS = _irods.COL_META_USER_ATTR_UNITS
COL_META_USER_ATTR_ID = _irods.COL_META_USER_ATTR_ID
COL_META_USER_CREATE_TIME = _irods.COL_META_USER_CREATE_TIME
COL_META_USER_MODIFY_TIME = _irods.COL_META_USER_MODIFY_TIME
COL_META_RESC_GROUP_ATTR_NAME = _irods.COL_META_RESC_GROUP_ATTR_NAME
COL_META_RESC_GROUP_ATTR_VALUE = _irods.COL_META_RESC_GROUP_ATTR_VALUE
COL_META_RESC_GROUP_ATTR_UNITS = _irods.COL_META_RESC_GROUP_ATTR_UNITS
COL_META_RESC_GROUP_ATTR_ID = _irods.COL_META_RESC_GROUP_ATTR_ID
COL_META_RESC_GROUP_CREATE_TIME = _irods.COL_META_RESC_GROUP_CREATE_TIME
COL_META_RESC_GROUP_MODIFY_TIME = _irods.COL_META_RESC_GROUP_MODIFY_TIME
COL_META_RULE_ATTR_NAME = _irods.COL_META_RULE_ATTR_NAME
COL_META_RULE_ATTR_VALUE = _irods.COL_META_RULE_ATTR_VALUE
COL_META_RULE_ATTR_UNITS = _irods.COL_META_RULE_ATTR_UNITS
COL_META_RULE_ATTR_ID = _irods.COL_META_RULE_ATTR_ID
COL_META_RULE_CREATE_TIME = _irods.COL_META_RULE_CREATE_TIME
COL_META_RULE_MODIFY_TIME = _irods.COL_META_RULE_MODIFY_TIME
COL_META_MSRVC_ATTR_NAME = _irods.COL_META_MSRVC_ATTR_NAME
COL_META_MSRVC_ATTR_VALUE = _irods.COL_META_MSRVC_ATTR_VALUE
COL_META_MSRVC_ATTR_UNITS = _irods.COL_META_MSRVC_ATTR_UNITS
COL_META_MSRVC_ATTR_ID = _irods.COL_META_MSRVC_ATTR_ID
COL_META_MSRVC_CREATE_TIME = _irods.COL_META_MSRVC_CREATE_TIME
COL_META_MSRVC_MODIFY_TIME = _irods.COL_META_MSRVC_MODIFY_TIME
COL_META_MET2_ATTR_NAME = _irods.COL_META_MET2_ATTR_NAME
COL_META_MET2_ATTR_VALUE = _irods.COL_META_MET2_ATTR_VALUE
COL_META_MET2_ATTR_UNITS = _irods.COL_META_MET2_ATTR_UNITS
COL_META_MET2_ATTR_ID = _irods.COL_META_MET2_ATTR_ID
COL_META_MET2_CREATE_TIME = _irods.COL_META_MET2_CREATE_TIME
COL_META_MET2_MODIFY_TIME = _irods.COL_META_MET2_MODIFY_TIME
COL_DATA_ACCESS_TYPE = _irods.COL_DATA_ACCESS_TYPE
COL_DATA_ACCESS_NAME = _irods.COL_DATA_ACCESS_NAME
COL_DATA_TOKEN_NAMESPACE = _irods.COL_DATA_TOKEN_NAMESPACE
COL_DATA_ACCESS_USER_ID = _irods.COL_DATA_ACCESS_USER_ID
COL_DATA_ACCESS_DATA_ID = _irods.COL_DATA_ACCESS_DATA_ID
COL_COLL_ACCESS_TYPE = _irods.COL_COLL_ACCESS_TYPE
COL_COLL_ACCESS_NAME = _irods.COL_COLL_ACCESS_NAME
COL_COLL_TOKEN_NAMESPACE = _irods.COL_COLL_TOKEN_NAMESPACE
COL_COLL_ACCESS_USER_ID = _irods.COL_COLL_ACCESS_USER_ID
COL_COLL_ACCESS_COLL_ID = _irods.COL_COLL_ACCESS_COLL_ID
COL_RESC_ACCESS_TYPE = _irods.COL_RESC_ACCESS_TYPE
COL_RESC_ACCESS_NAME = _irods.COL_RESC_ACCESS_NAME
COL_RESC_TOKEN_NAMESPACE = _irods.COL_RESC_TOKEN_NAMESPACE
COL_RESC_ACCESS_USER_ID = _irods.COL_RESC_ACCESS_USER_ID
COL_RESC_ACCESS_RESC_ID = _irods.COL_RESC_ACCESS_RESC_ID
COL_META_ACCESS_TYPE = _irods.COL_META_ACCESS_TYPE
COL_META_ACCESS_NAME = _irods.COL_META_ACCESS_NAME
COL_META_TOKEN_NAMESPACE = _irods.COL_META_TOKEN_NAMESPACE
COL_META_ACCESS_USER_ID = _irods.COL_META_ACCESS_USER_ID
COL_META_ACCESS_META_ID = _irods.COL_META_ACCESS_META_ID
COL_RULE_ACCESS_TYPE = _irods.COL_RULE_ACCESS_TYPE
COL_RULE_ACCESS_NAME = _irods.COL_RULE_ACCESS_NAME
COL_RULE_TOKEN_NAMESPACE = _irods.COL_RULE_TOKEN_NAMESPACE
COL_RULE_ACCESS_USER_ID = _irods.COL_RULE_ACCESS_USER_ID
COL_RULE_ACCESS_RULE_ID = _irods.COL_RULE_ACCESS_RULE_ID
COL_MSRVC_ACCESS_TYPE = _irods.COL_MSRVC_ACCESS_TYPE
COL_MSRVC_ACCESS_NAME = _irods.COL_MSRVC_ACCESS_NAME
COL_MSRVC_TOKEN_NAMESPACE = _irods.COL_MSRVC_TOKEN_NAMESPACE
COL_MSRVC_ACCESS_USER_ID = _irods.COL_MSRVC_ACCESS_USER_ID
COL_MSRVC_ACCESS_MSRVC_ID = _irods.COL_MSRVC_ACCESS_MSRVC_ID
COL_RESC_GROUP_RESC_ID = _irods.COL_RESC_GROUP_RESC_ID
COL_RESC_GROUP_NAME = _irods.COL_RESC_GROUP_NAME
COL_RESC_GROUP_ID = _irods.COL_RESC_GROUP_ID
COL_USER_GROUP_ID = _irods.COL_USER_GROUP_ID
COL_USER_GROUP_NAME = _irods.COL_USER_GROUP_NAME
COL_RULE_EXEC_ID = _irods.COL_RULE_EXEC_ID
COL_RULE_EXEC_NAME = _irods.COL_RULE_EXEC_NAME
COL_RULE_EXEC_REI_FILE_PATH = _irods.COL_RULE_EXEC_REI_FILE_PATH
COL_RULE_EXEC_USER_NAME = _irods.COL_RULE_EXEC_USER_NAME
COL_RULE_EXEC_ADDRESS = _irods.COL_RULE_EXEC_ADDRESS
COL_RULE_EXEC_TIME = _irods.COL_RULE_EXEC_TIME
COL_RULE_EXEC_FREQUENCY = _irods.COL_RULE_EXEC_FREQUENCY
COL_RULE_EXEC_PRIORITY = _irods.COL_RULE_EXEC_PRIORITY
COL_RULE_EXEC_ESTIMATED_EXE_TIME = _irods.COL_RULE_EXEC_ESTIMATED_EXE_TIME
COL_RULE_EXEC_NOTIFICATION_ADDR = _irods.COL_RULE_EXEC_NOTIFICATION_ADDR
COL_RULE_EXEC_LAST_EXE_TIME = _irods.COL_RULE_EXEC_LAST_EXE_TIME
COL_RULE_EXEC_STATUS = _irods.COL_RULE_EXEC_STATUS
COL_TOKEN_NAMESPACE = _irods.COL_TOKEN_NAMESPACE
COL_TOKEN_ID = _irods.COL_TOKEN_ID
COL_TOKEN_NAME = _irods.COL_TOKEN_NAME
COL_TOKEN_VALUE = _irods.COL_TOKEN_VALUE
COL_TOKEN_VALUE2 = _irods.COL_TOKEN_VALUE2
COL_TOKEN_VALUE3 = _irods.COL_TOKEN_VALUE3
COL_TOKEN_COMMENT = _irods.COL_TOKEN_COMMENT
COL_AUDIT_OBJ_ID = _irods.COL_AUDIT_OBJ_ID
COL_AUDIT_USER_ID = _irods.COL_AUDIT_USER_ID
COL_AUDIT_ACTION_ID = _irods.COL_AUDIT_ACTION_ID
COL_AUDIT_COMMENT = _irods.COL_AUDIT_COMMENT
COL_AUDIT_CREATE_TIME = _irods.COL_AUDIT_CREATE_TIME
COL_AUDIT_MODIFY_TIME = _irods.COL_AUDIT_MODIFY_TIME
COL_AUDIT_RANGE_START = _irods.COL_AUDIT_RANGE_START
COL_AUDIT_RANGE_END = _irods.COL_AUDIT_RANGE_END
COL_COLL_USER_NAME = _irods.COL_COLL_USER_NAME
COL_COLL_USER_ZONE = _irods.COL_COLL_USER_ZONE
COL_DATA_USER_NAME = _irods.COL_DATA_USER_NAME
COL_DATA_USER_ZONE = _irods.COL_DATA_USER_ZONE
COL_RESC_USER_NAME = _irods.COL_RESC_USER_NAME
COL_RESC_USER_ZONE = _irods.COL_RESC_USER_ZONE
COL_SL_HOST_NAME = _irods.COL_SL_HOST_NAME
COL_SL_RESC_NAME = _irods.COL_SL_RESC_NAME
COL_SL_CPU_USED = _irods.COL_SL_CPU_USED
COL_SL_MEM_USED = _irods.COL_SL_MEM_USED
COL_SL_SWAP_USED = _irods.COL_SL_SWAP_USED
COL_SL_RUNQ_LOAD = _irods.COL_SL_RUNQ_LOAD
COL_SL_DISK_SPACE = _irods.COL_SL_DISK_SPACE
COL_SL_NET_INPUT = _irods.COL_SL_NET_INPUT
COL_SL_NET_OUTPUT = _irods.COL_SL_NET_OUTPUT
COL_SL_CREATE_TIME = _irods.COL_SL_CREATE_TIME
COL_SLD_RESC_NAME = _irods.COL_SLD_RESC_NAME
COL_SLD_LOAD_FACTOR = _irods.COL_SLD_LOAD_FACTOR
COL_SLD_CREATE_TIME = _irods.COL_SLD_CREATE_TIME
COL_USER_AUTH_ID = _irods.COL_USER_AUTH_ID
COL_USER_DN = _irods.COL_USER_DN
COL_RULE_ID = _irods.COL_RULE_ID
COL_RULE_VERSION = _irods.COL_RULE_VERSION
COL_RULE_BASE_NAME = _irods.COL_RULE_BASE_NAME
COL_RULE_NAME = _irods.COL_RULE_NAME
COL_RULE_EVENT = _irods.COL_RULE_EVENT
COL_RULE_CONDITION = _irods.COL_RULE_CONDITION
COL_RULE_BODY = _irods.COL_RULE_BODY
COL_RULE_RECOVERY = _irods.COL_RULE_RECOVERY
COL_RULE_STATUS = _irods.COL_RULE_STATUS
COL_RULE_OWNER_NAME = _irods.COL_RULE_OWNER_NAME
COL_RULE_OWNER_ZONE = _irods.COL_RULE_OWNER_ZONE
COL_RULE_DESCR_1 = _irods.COL_RULE_DESCR_1
COL_RULE_DESCR_2 = _irods.COL_RULE_DESCR_2
COL_RULE_INPUT_PARAMS = _irods.COL_RULE_INPUT_PARAMS
COL_RULE_OUTPUT_PARAMS = _irods.COL_RULE_OUTPUT_PARAMS
COL_RULE_DOLLAR_VARS = _irods.COL_RULE_DOLLAR_VARS
COL_RULE_ICAT_ELEMENTS = _irods.COL_RULE_ICAT_ELEMENTS
COL_RULE_SIDEEFFECTS = _irods.COL_RULE_SIDEEFFECTS
COL_RULE_COMMENT = _irods.COL_RULE_COMMENT
COL_RULE_CREATE_TIME = _irods.COL_RULE_CREATE_TIME
COL_RULE_MODIFY_TIME = _irods.COL_RULE_MODIFY_TIME
COL_RULE_BASE_MAP_VERSION = _irods.COL_RULE_BASE_MAP_VERSION
COL_RULE_BASE_MAP_BASE_NAME = _irods.COL_RULE_BASE_MAP_BASE_NAME
COL_RULE_BASE_MAP_OWNER_NAME = _irods.COL_RULE_BASE_MAP_OWNER_NAME
COL_RULE_BASE_MAP_OWNER_ZONE = _irods.COL_RULE_BASE_MAP_OWNER_ZONE
COL_RULE_BASE_MAP_COMMENT = _irods.COL_RULE_BASE_MAP_COMMENT
COL_RULE_BASE_MAP_CREATE_TIME = _irods.COL_RULE_BASE_MAP_CREATE_TIME
COL_RULE_BASE_MAP_MODIFY_TIME = _irods.COL_RULE_BASE_MAP_MODIFY_TIME
COL_RULE_BASE_MAP_PRIORITY = _irods.COL_RULE_BASE_MAP_PRIORITY
COL_DVM_ID = _irods.COL_DVM_ID
COL_DVM_VERSION = _irods.COL_DVM_VERSION
COL_DVM_BASE_NAME = _irods.COL_DVM_BASE_NAME
COL_DVM_EXT_VAR_NAME = _irods.COL_DVM_EXT_VAR_NAME
COL_DVM_CONDITION = _irods.COL_DVM_CONDITION
COL_DVM_INT_MAP_PATH = _irods.COL_DVM_INT_MAP_PATH
COL_DVM_STATUS = _irods.COL_DVM_STATUS
COL_DVM_OWNER_NAME = _irods.COL_DVM_OWNER_NAME
COL_DVM_OWNER_ZONE = _irods.COL_DVM_OWNER_ZONE
COL_DVM_COMMENT = _irods.COL_DVM_COMMENT
COL_DVM_CREATE_TIME = _irods.COL_DVM_CREATE_TIME
COL_DVM_MODIFY_TIME = _irods.COL_DVM_MODIFY_TIME
COL_DVM_BASE_MAP_VERSION = _irods.COL_DVM_BASE_MAP_VERSION
COL_DVM_BASE_MAP_BASE_NAME = _irods.COL_DVM_BASE_MAP_BASE_NAME
COL_DVM_BASE_MAP_OWNER_NAME = _irods.COL_DVM_BASE_MAP_OWNER_NAME
COL_DVM_BASE_MAP_OWNER_ZONE = _irods.COL_DVM_BASE_MAP_OWNER_ZONE
COL_DVM_BASE_MAP_COMMENT = _irods.COL_DVM_BASE_MAP_COMMENT
COL_DVM_BASE_MAP_CREATE_TIME = _irods.COL_DVM_BASE_MAP_CREATE_TIME
COL_DVM_BASE_MAP_MODIFY_TIME = _irods.COL_DVM_BASE_MAP_MODIFY_TIME
COL_FNM_ID = _irods.COL_FNM_ID
COL_FNM_VERSION = _irods.COL_FNM_VERSION
COL_FNM_BASE_NAME = _irods.COL_FNM_BASE_NAME
COL_FNM_EXT_FUNC_NAME = _irods.COL_FNM_EXT_FUNC_NAME
COL_FNM_INT_FUNC_NAME = _irods.COL_FNM_INT_FUNC_NAME
COL_FNM_STATUS = _irods.COL_FNM_STATUS
COL_FNM_OWNER_NAME = _irods.COL_FNM_OWNER_NAME
COL_FNM_OWNER_ZONE = _irods.COL_FNM_OWNER_ZONE
COL_FNM_COMMENT = _irods.COL_FNM_COMMENT
COL_FNM_CREATE_TIME = _irods.COL_FNM_CREATE_TIME
COL_FNM_MODIFY_TIME = _irods.COL_FNM_MODIFY_TIME
COL_FNM_BASE_MAP_VERSION = _irods.COL_FNM_BASE_MAP_VERSION
COL_FNM_BASE_MAP_BASE_NAME = _irods.COL_FNM_BASE_MAP_BASE_NAME
COL_FNM_BASE_MAP_OWNER_NAME = _irods.COL_FNM_BASE_MAP_OWNER_NAME
COL_FNM_BASE_MAP_OWNER_ZONE = _irods.COL_FNM_BASE_MAP_OWNER_ZONE
COL_FNM_BASE_MAP_COMMENT = _irods.COL_FNM_BASE_MAP_COMMENT
COL_FNM_BASE_MAP_CREATE_TIME = _irods.COL_FNM_BASE_MAP_CREATE_TIME
COL_FNM_BASE_MAP_MODIFY_TIME = _irods.COL_FNM_BASE_MAP_MODIFY_TIME
COL_QUOTA_USER_ID = _irods.COL_QUOTA_USER_ID
COL_QUOTA_RESC_ID = _irods.COL_QUOTA_RESC_ID
COL_QUOTA_LIMIT = _irods.COL_QUOTA_LIMIT
COL_QUOTA_OVER = _irods.COL_QUOTA_OVER
COL_QUOTA_MODIFY_TIME = _irods.COL_QUOTA_MODIFY_TIME
COL_QUOTA_USAGE_USER_ID = _irods.COL_QUOTA_USAGE_USER_ID
COL_QUOTA_USAGE_RESC_ID = _irods.COL_QUOTA_USAGE_RESC_ID
COL_QUOTA_USAGE = _irods.COL_QUOTA_USAGE
COL_QUOTA_USAGE_MODIFY_TIME = _irods.COL_QUOTA_USAGE_MODIFY_TIME
COL_QUOTA_RESC_NAME = _irods.COL_QUOTA_RESC_NAME
COL_QUOTA_USER_NAME = _irods.COL_QUOTA_USER_NAME
COL_QUOTA_USER_ZONE = _irods.COL_QUOTA_USER_ZONE
COL_QUOTA_USER_TYPE = _irods.COL_QUOTA_USER_TYPE
COL_MSRVC_ID = _irods.COL_MSRVC_ID
COL_MSRVC_NAME = _irods.COL_MSRVC_NAME
COL_MSRVC_SIGNATURE = _irods.COL_MSRVC_SIGNATURE
COL_MSRVC_DOXYGEN = _irods.COL_MSRVC_DOXYGEN
COL_MSRVC_VARIATIONS = _irods.COL_MSRVC_VARIATIONS
COL_MSRVC_STATUS = _irods.COL_MSRVC_STATUS
COL_MSRVC_OWNER_NAME = _irods.COL_MSRVC_OWNER_NAME
COL_MSRVC_OWNER_ZONE = _irods.COL_MSRVC_OWNER_ZONE
COL_MSRVC_COMMENT = _irods.COL_MSRVC_COMMENT
COL_MSRVC_CREATE_TIME = _irods.COL_MSRVC_CREATE_TIME
COL_MSRVC_MODIFY_TIME = _irods.COL_MSRVC_MODIFY_TIME
COL_MSRVC_VERSION = _irods.COL_MSRVC_VERSION
COL_MSRVC_HOST = _irods.COL_MSRVC_HOST
COL_MSRVC_LOCATION = _irods.COL_MSRVC_LOCATION
COL_MSRVC_LANGUAGE = _irods.COL_MSRVC_LANGUAGE
COL_MSRVC_TYPE_NAME = _irods.COL_MSRVC_TYPE_NAME
COL_MSRVC_MODULE_NAME = _irods.COL_MSRVC_MODULE_NAME
COL_MSRVC_VER_OWNER_NAME = _irods.COL_MSRVC_VER_OWNER_NAME
COL_MSRVC_VER_OWNER_ZONE = _irods.COL_MSRVC_VER_OWNER_ZONE
COL_MSRVC_VER_COMMENT = _irods.COL_MSRVC_VER_COMMENT
COL_MSRVC_VER_CREATE_TIME = _irods.COL_MSRVC_VER_CREATE_TIME
COL_MSRVC_VER_MODIFY_TIME = _irods.COL_MSRVC_VER_MODIFY_TIME
COL_TICKET_ID = _irods.COL_TICKET_ID
COL_TICKET_STRING = _irods.COL_TICKET_STRING
COL_TICKET_TYPE = _irods.COL_TICKET_TYPE
COL_TICKET_USER_ID = _irods.COL_TICKET_USER_ID
COL_TICKET_OBJECT_ID = _irods.COL_TICKET_OBJECT_ID
COL_TICKET_OBJECT_TYPE = _irods.COL_TICKET_OBJECT_TYPE
COL_TICKET_USES_LIMIT = _irods.COL_TICKET_USES_LIMIT
COL_TICKET_USES_COUNT = _irods.COL_TICKET_USES_COUNT
COL_TICKET_EXPIRY_TS = _irods.COL_TICKET_EXPIRY_TS
COL_TICKET_CREATE_TIME = _irods.COL_TICKET_CREATE_TIME
COL_TICKET_MODIFY_TIME = _irods.COL_TICKET_MODIFY_TIME
COL_TICKET_WRITE_FILE_COUNT = _irods.COL_TICKET_WRITE_FILE_COUNT
COL_TICKET_WRITE_FILE_LIMIT = _irods.COL_TICKET_WRITE_FILE_LIMIT
COL_TICKET_WRITE_BYTE_COUNT = _irods.COL_TICKET_WRITE_BYTE_COUNT
COL_TICKET_WRITE_BYTE_LIMIT = _irods.COL_TICKET_WRITE_BYTE_LIMIT
COL_TICKET_ALLOWED_HOST_TICKET_ID = _irods.COL_TICKET_ALLOWED_HOST_TICKET_ID
COL_TICKET_ALLOWED_HOST = _irods.COL_TICKET_ALLOWED_HOST
COL_TICKET_ALLOWED_USER_TICKET_ID = _irods.COL_TICKET_ALLOWED_USER_TICKET_ID
COL_TICKET_ALLOWED_USER_NAME = _irods.COL_TICKET_ALLOWED_USER_NAME
COL_TICKET_ALLOWED_GROUP_TICKET_ID = _irods.COL_TICKET_ALLOWED_GROUP_TICKET_ID
COL_TICKET_ALLOWED_GROUP_NAME = _irods.COL_TICKET_ALLOWED_GROUP_NAME
COL_TICKET_DATA_NAME = _irods.COL_TICKET_DATA_NAME
COL_TICKET_DATA_COLL_NAME = _irods.COL_TICKET_DATA_COLL_NAME
COL_TICKET_COLL_NAME = _irods.COL_TICKET_COLL_NAME
COL_TICKET_OWNER_NAME = _irods.COL_TICKET_OWNER_NAME
COL_TICKET_OWNER_ZONE = _irods.COL_TICKET_OWNER_ZONE
COL_COLL_FILEMETA_OBJ_ID = _irods.COL_COLL_FILEMETA_OBJ_ID
COL_COLL_FILEMETA_UID = _irods.COL_COLL_FILEMETA_UID
COL_COLL_FILEMETA_GID = _irods.COL_COLL_FILEMETA_GID
COL_COLL_FILEMETA_OWNER = _irods.COL_COLL_FILEMETA_OWNER
COL_COLL_FILEMETA_GROUP = _irods.COL_COLL_FILEMETA_GROUP
COL_COLL_FILEMETA_MODE = _irods.COL_COLL_FILEMETA_MODE
COL_COLL_FILEMETA_CTIME = _irods.COL_COLL_FILEMETA_CTIME
COL_COLL_FILEMETA_MTIME = _irods.COL_COLL_FILEMETA_MTIME
COL_COLL_FILEMETA_SOURCE_PATH = _irods.COL_COLL_FILEMETA_SOURCE_PATH
COL_COLL_FILEMETA_CREATE_TIME = _irods.COL_COLL_FILEMETA_CREATE_TIME
COL_COLL_FILEMETA_MODIFY_TIME = _irods.COL_COLL_FILEMETA_MODIFY_TIME
COL_DATA_FILEMETA_OBJ_ID = _irods.COL_DATA_FILEMETA_OBJ_ID
COL_DATA_FILEMETA_UID = _irods.COL_DATA_FILEMETA_UID
COL_DATA_FILEMETA_GID = _irods.COL_DATA_FILEMETA_GID
COL_DATA_FILEMETA_OWNER = _irods.COL_DATA_FILEMETA_OWNER
COL_DATA_FILEMETA_GROUP = _irods.COL_DATA_FILEMETA_GROUP
COL_DATA_FILEMETA_MODE = _irods.COL_DATA_FILEMETA_MODE
COL_DATA_FILEMETA_CTIME = _irods.COL_DATA_FILEMETA_CTIME
COL_DATA_FILEMETA_MTIME = _irods.COL_DATA_FILEMETA_MTIME
COL_DATA_FILEMETA_SOURCE_PATH = _irods.COL_DATA_FILEMETA_SOURCE_PATH
COL_DATA_FILEMETA_CREATE_TIME = _irods.COL_DATA_FILEMETA_CREATE_TIME
COL_DATA_FILEMETA_MODIFY_TIME = _irods.COL_DATA_FILEMETA_MODIFY_TIME
SINGLE_MSG_TICKET = _irods.SINGLE_MSG_TICKET
MULTI_MSG_TICKET = _irods.MULTI_MSG_TICKET
ACCESS_NULL = _irods.ACCESS_NULL
ACCESS_EXECUTE = _irods.ACCESS_EXECUTE
ACCESS_READ_ANNOTATION = _irods.ACCESS_READ_ANNOTATION
ACCESS_READ_SYSTEM_METADATA = _irods.ACCESS_READ_SYSTEM_METADATA
ACCESS_READ_METADATA = _irods.ACCESS_READ_METADATA
ACCESS_READ_OBJECT = _irods.ACCESS_READ_OBJECT
ACCESS_WRITE_ANNOTATION = _irods.ACCESS_WRITE_ANNOTATION
ACCESS_CREATE_METADATA = _irods.ACCESS_CREATE_METADATA
ACCESS_MODIFY_METADATA = _irods.ACCESS_MODIFY_METADATA
ACCESS_DELETE_METADATA = _irods.ACCESS_DELETE_METADATA
ACCESS_ADMINISTER_OBJECT = _irods.ACCESS_ADMINISTER_OBJECT
ACCESS_CREATE_OBJECT = _irods.ACCESS_CREATE_OBJECT
ACCESS_MODIFY_OBJECT = _irods.ACCESS_MODIFY_OBJECT
ACCESS_DELETE_OBJECT = _irods.ACCESS_DELETE_OBJECT
ACCESS_CREATE_TOKEN = _irods.ACCESS_CREATE_TOKEN
ACCESS_DELETE_TOKEN = _irods.ACCESS_DELETE_TOKEN
ACCESS_CURATE = _irods.ACCESS_CURATE
ACCESS_OWN = _irods.ACCESS_OWN
ACCESS_INHERIT = _irods.ACCESS_INHERIT
ACCESS_NO_INHERIT = _irods.ACCESS_NO_INHERIT
AU_ACCESS_GRANTED = _irods.AU_ACCESS_GRANTED
AU_REGISTER_DATA_OBJ = _irods.AU_REGISTER_DATA_OBJ
AU_REGISTER_DATA_REPLICA = _irods.AU_REGISTER_DATA_REPLICA
AU_UNREGISTER_DATA_OBJ = _irods.AU_UNREGISTER_DATA_OBJ
AU_REGISTER_DELAYED_RULE = _irods.AU_REGISTER_DELAYED_RULE
AU_MODIFY_DELAYED_RULE = _irods.AU_MODIFY_DELAYED_RULE
AU_DELETE_DELAYED_RULE = _irods.AU_DELETE_DELAYED_RULE
AU_REGISTER_RESOURCE = _irods.AU_REGISTER_RESOURCE
AU_DELETE_RESOURCE = _irods.AU_DELETE_RESOURCE
AU_DELETE_USER_RE = _irods.AU_DELETE_USER_RE
AU_REGISTER_COLL_BY_ADMIN = _irods.AU_REGISTER_COLL_BY_ADMIN
AU_REGISTER_COLL = _irods.AU_REGISTER_COLL
AU_DELETE_COLL_BY_ADMIN = _irods.AU_DELETE_COLL_BY_ADMIN
AU_DELETE_COLL = _irods.AU_DELETE_COLL
AU_DELETE_ZONE = _irods.AU_DELETE_ZONE
AU_REGISTER_ZONE = _irods.AU_REGISTER_ZONE
AU_MOD_USER_NAME = _irods.AU_MOD_USER_NAME
AU_MOD_USER_TYPE = _irods.AU_MOD_USER_TYPE
AU_MOD_USER_ZONE = _irods.AU_MOD_USER_ZONE
AU_MOD_USER_DN = _irods.AU_MOD_USER_DN
AU_MOD_USER_INFO = _irods.AU_MOD_USER_INFO
AU_MOD_USER_COMMENT = _irods.AU_MOD_USER_COMMENT
AU_MOD_USER_PASSWORD = _irods.AU_MOD_USER_PASSWORD
AU_ADD_USER_AUTH_NAME = _irods.AU_ADD_USER_AUTH_NAME
AU_DELETE_USER_AUTH_NAME = _irods.AU_DELETE_USER_AUTH_NAME
AU_MOD_GROUP = _irods.AU_MOD_GROUP
AU_MOD_RESC = _irods.AU_MOD_RESC
AU_MOD_RESC_FREE_SPACE = _irods.AU_MOD_RESC_FREE_SPACE
AU_MOD_RESC_GROUP = _irods.AU_MOD_RESC_GROUP
AU_MOD_ZONE = _irods.AU_MOD_ZONE
AU_REGISTER_USER_RE = _irods.AU_REGISTER_USER_RE
AU_ADD_AVU_METADATA = _irods.AU_ADD_AVU_METADATA
AU_DELETE_AVU_METADATA = _irods.AU_DELETE_AVU_METADATA
AU_COPY_AVU_METADATA = _irods.AU_COPY_AVU_METADATA
AU_ADD_AVU_WILD_METADATA = _irods.AU_ADD_AVU_WILD_METADATA
AU_MOD_ACCESS_CONTROL_OBJ = _irods.AU_MOD_ACCESS_CONTROL_OBJ
AU_MOD_ACCESS_CONTROL_COLL = _irods.AU_MOD_ACCESS_CONTROL_COLL
AU_MOD_ACCESS_CONTROL_COLL_RECURSIVE = _irods.AU_MOD_ACCESS_CONTROL_COLL_RECURSIVE
AU_MOD_ACCESS_CONTROL_RESOURCE = _irods.AU_MOD_ACCESS_CONTROL_RESOURCE
AU_RENAME_DATA_OBJ = _irods.AU_RENAME_DATA_OBJ
AU_RENAME_COLLECTION = _irods.AU_RENAME_COLLECTION
AU_MOVE_DATA_OBJ = _irods.AU_MOVE_DATA_OBJ
AU_MOVE_COLL = _irods.AU_MOVE_COLL
AU_REG_TOKEN = _irods.AU_REG_TOKEN
AU_DEL_TOKEN = _irods.AU_DEL_TOKEN
AU_CREATE_TICKET = _irods.AU_CREATE_TICKET
AU_MOD_TICKET = _irods.AU_MOD_TICKET
AU_DELETE_TICKET = _irods.AU_DELETE_TICKET
AU_USE_TICKET = _irods.AU_USE_TICKET
def _irodsOpen(conn, collName, dataName, mode, resc_name):
    global lastStatus
    ir_file = irodsFile(conn)
    dataObjInp = dataObjInp_t()
    
    ir_file.dataName = dataName
    ir_file.collName = collName
    ir_file.openFlag = O_RDONLY
    
    dataObjInp.objPath = ir_file.fullPath()
    
    # Set the resource
    if resc_name:
        ir_file.resourceName = resc_name
        addKeyVal(dataObjInp.condInput, DEST_RESC_NAME_KW, resc_name)
        
        # Set the replica number (get the info from the icat)
        # returns null if the file does not exist
        replNum = getDataObjReplicaNumber(conn, collName, dataName, resc_name)
    
        if replNum:
            addKeyVal(dataObjInp.condInput, REPL_NUM_KW, replNum)
    
    if mode == "w":
        dataObjInp.openFlags = O_WRONLY | O_CREAT
        ir_file.openFlag = O_WRONLY | O_CREAT
        addKeyVal(dataObjInp.condInput, FORCE_FLAG_KW, "")
        lastStatus = rcDataObjCreate(conn, dataObjInp)
        
    elif mode == "r":
        dataObjInp.openFlags = O_RDONLY
        ir_file.openFlag = O_RDONLY
        lastStatus = rcDataObjOpen(conn, dataObjInp) 
        
    elif mode == "a":  
        dataObjInp.openFlags = O_WRONLY
        ir_file.openFlag = O_WRONLY
        lastStatus = rcDataObjOpen(conn, dataObjInp)
        
        if lastStatus != CAT_NO_ROWS_FOUND: # the file exists => seek to the end
            dataObjLseekInp = openedDataObjInp_t()
            dataObjLseekInp.l1descInx = lastStatus
            dataObjLseekInp.offset = 0
            dataObjLseekInp.whence = SEEK_END
            status, dataObjLseekOut = rcDataObjLseek(conn, dataObjLseekInp)
            if not resc_name:
                resc_names = getDataObjRescNames(conn, collName, dataName)
                if resc_names:
                    resc_name = resc_names[0]
                # else: File not found in iCAT, shouldn't happen
            ir_file.position = getDataObjSize(conn, collName, dataName, resc_name)
        else:
            lastStatus = rcDataObjCreate(conn, dataObjInp)
            
    elif mode == "w+":
        dataObjInp.openFlags = O_RDWR
        ir_file.openFlag = O_RDWR
        addKeyVal(dataObjInp.condInput, FORCE_FLAG_KW, "")
        lastStatus = rcDataObjCreate(conn, dataObjInp)
        
    elif mode == "r+":
        dataObjInp.openFlags = O_RDWR
        ir_file.openFlag = O_RDWR
        lastStatus = rcDataObjOpen(conn, dataObjInp) 
        
    elif mode == "a+":
        dataObjInp.openFlags = O_RDWR
        ir_file.openFlag = O_RDWR
        lastStatus = rcDataObjOpen(conn, dataObjInp)
        
        if lastStatus != CAT_NO_ROWS_FOUND: # the file exists => seek to the end
            dataObjLseekInp = openedDataObjInp_t()
            dataObjLseekInp.l1descInx = lastStatus
            dataObjLseekInp.offset = 0
            dataObjLseekInp.whence = SEEK_END

            status, dataObjLseekOut = rcDataObjLseek(conn, dataObjLseekInp)
            ir_file.position = getDataObjSize(conn, collName, dataName, resc_name)
        else:
            lastStatus = rcDataObjCreate(conn, dataObjInp)
    
    else:
        lastStatus = 0
    
    if not resc_name: # If the resc parameter was NULL then we need to find the
                      # resource iRODS used and set the ir_file variable
        ir_resc_name = getDataObjRescNames(conn, collName, dataName)
        if ir_resc_name:
            resc_name = ir_resc_name[0]
        else:
            status, myEnv = getRodsEnv()
            resc_name = myEnv.rodsDefResource
        ir_file.resourceName = resc_name

    if lastStatus > 0:
        ir_file.descInx = lastStatus
        ir_file.set_size()
        return ir_file

def addCollUserMetadata(conn, path, name, value, units=""):
    global lastStatus
    lastStatus = addUserMetadata(conn, "-c", path, name, value, units)
    return lastStatus

def addFileUserMetadata(conn, path, name, value, units=""):
    global lastStatus
    lastStatus = addUserMetadata(conn, "-d", path, name, value, units)
    return lastStatus

def addObject(conn, objType, objName, arg3, arg4, arg5, arg6):
    global lastStatus
    generalAdminInp = generalAdminInp_t ()
    generalAdminInp.arg0 = "add"
    generalAdminInp.arg1 = objType
    generalAdminInp.arg2 = objName
    generalAdminInp.arg3 = arg3
    generalAdminInp.arg4 = arg4
    generalAdminInp.arg5 = arg5
    generalAdminInp.arg6 = arg6
    generalAdminInp.arg7 = ""
    generalAdminInp.arg8 = ""
    generalAdminInp.arg9 = ""
    lastStatus = rcGeneralAdmin(conn, generalAdminInp)
    return lastStatus

# Parse a genQueryOut result parameter which comes from a genQuery call.
# Add the output to the python list passed in parameter. Each row becomes an
# element of the list and each element is a dictionary created with the keys
# passed in parameter. The order should be compliant with the order in genQueryInp
# if len(formatStr) < len(genQueryOut->sqlResult[a].attriInx) => segfault, that's
# why this function is not accessible from anywhere else
def addResultToFormatDictList(genQueryOut, formatStr, l):
    if not genQueryOut:
        return 0
    for r in xrange(genQueryOut.rowCnt):
        t = genQueryOut.getSqlResultIdx(r)
        d = {}
        for idx in xrange(len(formatStr)):
            name = formatStr[idx]
            tResult = t[idx]
            if name.endswith("_ts"):    # Pretty print of time values
                localTime = getLocalTimeFromRodsTime(tResult)
                d[name] = localTime
            else:
                d[name] = tResult
        l.append(d)
    return 0

## Parse a genQueryOut result parameter which comes from a genQuery call.
## Add the output to the python list passed in parameter. Each row becomes an
## element of the list and each element is a tuple created by selected attributes
## in the genQueryInp parameter.
## If attriCnt = 1 we do not create a list of tuple of str but a list of str
def addResultToTupleList(genQueryOut, l):
    if not genQueryOut:
        return 0
    for r in xrange(genQueryOut.rowCnt):
        l.append(genQueryOut.getSqlResultIdx(r))
    return 0

def addUserMetadata(conn, obj_type, name, attName, attValue, attUnits):
    global lastStatus
    lastStatus = procUserMetadata(conn, "add", obj_type, name, attName, 
                                  attValue, attUnits)
    return lastStatus
    
def createCollection(conn, coll_path):
    global lastStatus
    collCreateInp = collInp_t()
    collCreateInp.collName = coll_path
    lastStatus = rcCollCreate(conn, collCreateInp)
    return lastStatus

def createGroup(conn, groupName):
    global lastStatus
    if groupName == "":
        return None
    lastStatus, myEnv = getRodsEnv()
    if lastStatus != 0:
        return None
    lastStatus = addObject(conn, "user", groupName, "rodsgroup", myEnv.rodsZone, "", "")
    if lastStatus == 0:
        return irodsGroup(conn, groupName)
    else:
        return None

def createResource(conn, name, type, cls, host, path):
    global lastStatus
    if name == "":
        return None
    lastStatus = addObject(conn, "resource", name, type, cls,
                        host, path)
    if lastStatus == 0:
        return irodsResource(conn, name)
    else:
        return None

def createUser(conn, userName, type):
    global lastStatus
    if userName == "":
        return None
    lastStatus, myEnv = getRodsEnv()
    if lastStatus != 0:
        return None
    lastStatus = addObject(conn, "user", userName, type, myEnv.rodsZone, "", "")
    if lastStatus == 0:
        return irodsUser(conn, userName, myEnv.rodsZone)
    else:
        return None

def createZone(conn, zone_name, type, connstr="", comment=""):
    global lastStatus
    if zone_name == "":
        return None
    lastStatus, myEnv = getRodsEnv()
    if lastStatus != 0:
        return None
    lastStatus = addObject(conn, "zone", zone_name, type, connstr, comment, "")
    if lastStatus == 0:
        return irodsZone(conn, zone_name)
    else:
        return None

def deleteCollection(conn, coll_path, force=True):
    global lastStatus
    collInp = collInp_t()
    collInp.collName = coll_path
    if force:
        addKeyVal(collInp.condInput, FORCE_FLAG_KW, "")
    addKeyVal(collInp.condInput, RECURSIVE_OPR__KW, "")
    lastStatus = rcRmColl(conn, collInp, 0)
    return lastStatus

def deleteFile(conn, obj_path):
    global lastStatus
    dataObjInp = dataObjInp_t()
    dataObjInp.objPath = obj_path
    lastStatus = rcDataObjUnlink(conn, dataObjInp)
    return lastStatus

def deleteGroup(conn, userName):
    global lastStatus
    status, myEnv = getRodsEnv()
    if lastStatus != 0:
        return lastStatus
    lastStatus = rmObject(conn, "user", userName, myEnv.rodsZone)
    return lastStatus

def deleteResource(conn, name):
    global lastStatus
    lastStatus = rmObject(conn, "resource", name, "")
    return lastStatus

def deleteUser(conn, userName):
    global lastStatus
    lastStatus = rmObject(conn, "user", userName, "")
    return lastStatus

def deleteZone(conn, zone_name):
    global lastStatus
    lastStatus = rmObject(conn, "zone", zone_name, "")
    return lastStatus

def getCollAcl(conn, path):
    global lastStatus
    if path.endswith('/'):
        path = path[:-1]
    zoneHint = path
    lastStatus, genQueryOut = queryCollAcl(conn, path, zoneHint)
    
    res = []
    if genQueryOut and genQueryOut.rowCnt >= 0:
        for i in xrange(genQueryOut.rowCnt):
            res.append((
                         genQueryOut.getSqlResultByInxIdx(COL_COLL_USER_NAME, i),
                         genQueryOut.getSqlResultByInxIdx(COL_COLL_USER_ZONE, i),
                         genQueryOut.getSqlResultByInxIdx(COL_COLL_ACCESS_NAME, i)
                       ))
    return res

def getCollId(conn, path):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_COLL_ID], [0], 1)
    sqlCondInp.init([COL_COLL_NAME], ["='%s'" % path], 1)
    l = queryToTupleList(conn, selectInp, sqlCondInp)
    if l:
        return l[0]
    else:
        return -1

def getCollInheritance(conn, path):
    global lastStatus
    if path.endswith('/'):
        path = path[:-1]
    lastStatus, genQueryOut = queryCollInheritance(conn, path)
    inheritStr = genQueryOut.getSqlResultByInxIdx(COL_COLL_INHERITANCE, 0)
    if inheritStr == "1":
        return True
    else:
        return False

def getCollUserMetadata(conn, path):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_META_COLL_ATTR_NAME, COL_META_COLL_ATTR_VALUE,
                    COL_META_COLL_ATTR_UNITS],
                   [0, 0, 0], 3)
    sqlCondInp.init([COL_COLL_NAME], ["='%s'" % path], 1)
    return queryToTupleList(conn, selectInp, sqlCondInp)

def getDataObjACL(conn, irods_path):
    global lastStatus
    lastStatus, collName, dataName = splitPathByKey(irods_path, "/")
    if lastStatus < 0:
        return []
    zoneHint = collName
    dataId = getDataObjId(conn, collName, dataName)
    if not dataId:
        return CAT_UNKNOWN_FILE
    lastStatus, genQueryOut = queryDataObjAcl(conn, dataId, zoneHint)
    res = []
    if genQueryOut and genQueryOut.rowCnt >= 0:
        for i in xrange(genQueryOut.rowCnt):
            res.append((
                         genQueryOut.getSqlResultByInxIdx(COL_USER_NAME, i),
                         genQueryOut.getSqlResultByInxIdx(COL_USER_ZONE, i),
                         genQueryOut.getSqlResultByInxIdx(COL_DATA_ACCESS_NAME, i)
                       ))
    return res

def getDataObjId(conn, coll_name, data_name):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_D_DATA_ID], [0], 1)
    sqlCondInp.init([COL_DATA_NAME, COL_COLL_NAME], 
                    ["='%s'" % data_name,
                     "='%s'" % coll_name], 
                    2)
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    if len(l) > 0:
        return l[0]

## Returns the number of a replica for a specific file when you only know the
## resource name. This is used by REPL_NUM_KW when you want to open a file for
## instance
def getDataObjReplicaNumber(conn, coll_name, data_name, resc_name):
    genQueryInp = genQueryInp_t()
    addInxVal(genQueryInp.sqlCondInp, COL_COLL_NAME, "='%s'" % coll_name)
    addInxVal(genQueryInp.sqlCondInp, COL_DATA_NAME, "='%s'" % data_name)
    addInxVal(genQueryInp.sqlCondInp, COL_D_RESC_NAME, "='%s'" % resc_name)
    addInxIval(genQueryInp.selectInp, COL_DATA_REPL_NUM, 1)
    genQueryInp.maxRows = MAX_SQL_ROWS
    genQueryOut = rcGenQuery(conn, genQueryInp)
    rescNum = getSqlResultByInx(genQueryOut, COL_DATA_REPL_NUM)
    if genQueryOut and genQueryOut.rowCnt >= 0:
        # Should only have one row as output
        rescNum = getSqlResultByInx(genQueryOut, COL_DATA_REPL_NUM)
        res = rescNum.value[0]
    else:
        return ""
    
    if genQueryOut is not None:
        genQueryOut.release()
    return res

# Returns a PyList of the resource names of an irods data object given its
# collection and its name. The order is given by resource ids.
# It will fail if there are more than MAX_SQL_ROWS as I did not loop if
# continueInx > 0 after genQuery call
def getDataObjRescNames(conn, coll_name, data_name):
    genQueryInp = genQueryInp_t()
    addInxVal(genQueryInp.sqlCondInp, COL_COLL_NAME, "='%s'" % coll_name)
    addInxVal(genQueryInp.sqlCondInp, COL_DATA_NAME, "='%s'" % data_name)
    addInxIval(genQueryInp.selectInp, COL_D_RESC_NAME, 1)
    addInxIval(genQueryInp.selectInp, COL_R_RESC_ID, ORDER_BY)
    genQueryInp.maxRows = MAX_SQL_ROWS
    genQueryOut = rcGenQuery(conn, genQueryInp)
    rescNum = getSqlResultByInx(genQueryOut, COL_DATA_REPL_NUM)
    res = []
    if genQueryOut and genQueryOut.rowCnt >= 0:
        for i in xrange(genQueryOut.rowCnt):
            res.append(genQueryOut.getSqlResultByInxIdx(COL_D_RESC_NAME, i))
    else:
        return ""
    
    if genQueryOut is not None:
        genQueryOut.release()
    return res

# Returns the size of a data object
def getDataObjSize(conn, coll_name, data_name, resc_name):
    genQueryInp = genQueryInp_t()
    addInxVal(genQueryInp.sqlCondInp, COL_COLL_NAME, "='%s'" % coll_name)
    addInxVal(genQueryInp.sqlCondInp, COL_DATA_NAME, "='%s'" % data_name)  
    addInxVal(genQueryInp.sqlCondInp, COL_D_RESC_NAME, "='%s'" % resc_name)
    addInxIval(genQueryInp.selectInp, COL_DATA_SIZE, 1)
    genQueryInp.maxRows = MAX_SQL_ROWS
    genQueryOut = rcGenQuery(conn, genQueryInp)
    if genQueryOut and genQueryOut.rowCnt >= 0:
        sizeNum = getSqlResultByInx(genQueryOut, COL_DATA_SIZE)
        sizePyInt = int(sizeNum.value)
        if genQueryOut is not None:
            genQueryOut.release()
        return sizePyInt
    else:
        return 0

# Get the file Info with the name and resource, query the ICAT database and
# create a dictionary with the returned information. Need the connection to
# iRODS
def getFileInfo(conn, coll_name, data_name, resc_name):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    
    selectInp.init([COL_D_DATA_ID, COL_D_COLL_ID, COL_DATA_NAME, 
                    COL_DATA_REPL_NUM, COL_DATA_VERSION, COL_DATA_TYPE_NAME, 
                    COL_DATA_SIZE, COL_D_RESC_GROUP_NAME, COL_D_RESC_NAME, 
                    COL_D_DATA_PATH, COL_D_OWNER_NAME, COL_D_OWNER_ZONE, 
                    COL_D_REPL_STATUS, COL_D_DATA_STATUS, COL_D_DATA_CHECKSUM, 
                    COL_D_EXPIRY, COL_D_MAP_ID, COL_D_COMMENTS, 
                    COL_D_CREATE_TIME, COL_D_MODIFY_TIME, COL_DATA_MODE],
                   [0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0,
                    0], 
                   21)
    
    sqlCondInp.init([COL_DATA_NAME, COL_COLL_NAME, COL_D_RESC_NAME], 
                    ["='%s'" % data_name,
                     "='%s'" % coll_name,
                     "='%s'" % resc_name], 
                    3)
    
    columnNames = ["data_id", "coll_id", "data_name", "data_repl_num",
                   "data_version", "data_type_name", "data_size",
                   "resc_group_name", "resc_name", "data_path",
                   "data_owner_name", "data_owner_zone", "data_is_dirty",
                   "data_status", "data_checksum", "data_expiry_ts",
                   "data_map_id", "r_comment", "create_ts", "modify_ts",
                   "data_mode"]
    
    l =  queryToFormatDictList(conn, selectInp, sqlCondInp, columnNames)
    
    if len(l) > 0:
        return l[0]
    else:
        return {columnNames[0] : "mountP",          # "data_id"
                columnNames[1] : "",                # "coll_id"
                columnNames[2] : data_name,         # "data_name"
                columnNames[3] : "1",               # "data_repl_num"
                columnNames[4] : "",                # "data_version"
                columnNames[5] :  "mountP",         # "data_type_name"
                columnNames[6] : "       ",         # "data_size"
                columnNames[7] : "",                # "resc_group_name"
                columnNames[8] : resc_name,         # "resc_name"
                columnNames[9] : coll_name,         # "data_path"
                columnNames[10] : "        ",       # "data_owner_name"
                columnNames[11] : "            ",   # "data_owner_zone"
                columnNames[12] : "",               # "data_is_dirty" 
                columnNames[13] : "",               # "data_status"
                columnNames[14] : "",               # "data_checksum"
                columnNames[15] : "              ", # "data_expiry_ts"
                columnNames[16] : "",               # "data_map_id"
                columnNames[17] : "",               # "r_comment"
                columnNames[18] : "              ", # "create_ts"
                columnNames[19] : "              ", # "modify_ts"
                columnNames[20] : ""}               # "data_mode"

def getFileUserMetadata(conn, path):
    global lastStatus
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    lastStatus, collName, dataName = splitPathByKey(path, "/")
    if lastStatus != 0:
        return []
    selectInp.init([COL_META_DATA_ATTR_NAME, COL_META_DATA_ATTR_VALUE,
                    COL_META_DATA_ATTR_UNITS],
                   [0, 0, 0], 3)
    sqlCondInp.init([COL_COLL_NAME, COL_DATA_NAME], 
                    ["='%s'" % collName,
                     "='%s'" % dataName], 2)
    return queryToTupleList(conn, selectInp, sqlCondInp)

def getGroup(conn, groupName):
    global lastStatus
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_USER_NAME], [0], 1)
    sqlCondInp.init([COL_USER_NAME, COL_USER_TYPE], 
                    ["='%s'" % groupName,
                     "='rodsgroup'"], 2)
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    if len(l) > 0:
        return irodsGroup(conn, l[0])
    else:
        lastStatus = CAT_NO_ROWS_FOUND
        return None

# Get a python list of names of members of a group 
def getGroupMembers(conn, group_name):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_USER_NAME, COL_USER_ZONE,], [0, 0], 2)
    sqlCondInp.init([COL_USER_GROUP_NAME], ["='%s'" % group_name], 1)
    return queryToTupleList(conn, selectInp, sqlCondInp)

def getGroups(conn):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_USER_NAME], [0], 1)
    sqlCondInp.init([COL_USER_TYPE], ["='rodsgroup'"], 1)
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    if len(l) > 0:
        return [ irodsGroup(conn, name) for name in l ]
    else:
        return []

def getGroupsQuotaGlobal(conn):
    return getQuota(conn, "", False, True)

def getGroupsQuotaResources(conn):
    return getQuota(conn, "", False, False)

## userQ = boolean (true means user, false means group)
## GlobalQ = boolean (true means global, false means resource)
## return a list of dictionaries:
##   keys: 
##     resource: Resource name
##     user/group: User or Group name
##     zone: zone name
##     quota: set quota (in bits)
##     over: nb bits over quota (<0 means under quota)
##     time: time set
def getQuota(conn, userName, userQ, globalQ):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    
    printCount = 0
    i = 0
    
    colName = []
    inputInx = []
    inputVal = []
    
    if not globalQ:
        colName.append("resource")
        inputInx.append(COL_QUOTA_RESC_NAME)
        inputVal.append(0)
    else:
        colName.append("resource")
        inputInx.append(COL_QUOTA_RESC_ID)
        inputVal.append(0)
    
    if userQ:
        colName.append("user")
    else:
        colName.append("group")
    inputInx.append(COL_QUOTA_USER_NAME)
    inputVal.append(0)
    
    colName.append("zone")
    inputInx.append(COL_QUOTA_USER_ZONE)
    inputVal.append(0)
    
    colName.append("quota")
    inputInx.append(COL_QUOTA_LIMIT)
    inputVal.append(0)
    
    colName.append("over")
    inputInx.append(COL_QUOTA_OVER)
    inputVal.append(0)
    
    colName.append("time")
    inputInx.append(COL_QUOTA_MODIFY_TIME)
    inputVal.append(0)
    
    selectInp.init(inputInx, inputVal, len(inputInx))
    
    inputCond = []
    condVal = []
    
    if userName:
        userName2 = ""
        userZone = ""
        status, userName2, userZone = parseUserName(userName)
        
        if not userZone:
            inputCond.append(COL_QUOTA_USER_NAME)
            condVal.append("='%s'" % userName)
        else:
            inputCond.append(COL_QUOTA_USER_NAME)
            condVal.append("='%s'" % userName2)
            inputCond.append(COL_QUOTA_USER_ZONE)
            condVal.append("='%s'" % userZone)
    
    inputCond.append(COL_QUOTA_USER_TYPE)
    if userQ:
        condVal.append("!='rodsgroup'")
    else:
        condVal.append("='rodsgroup'")
    
    if globalQ:
        inputCond.append(COL_QUOTA_RESC_ID)
        condVal.append("='0'")
    
    sqlCondInp.init(inputCond, condVal, len(inputCond))
    
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    
    res = []
    
    for el in l:
        d = dict(zip(colName, el))
        if globalQ:
            d['resource'] = "All"
        d['time'] = getLocalTimeFromRodsTime(d['time'])
        d['over'] = int(d['over'])
        d['quota'] = int(d['quota'])
        res.append(d)
    
    return res

def getRescInfoToDict(conn, resc_name):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_R_RESC_ID, COL_R_RESC_NAME, COL_R_ZONE_NAME, 
                    COL_R_TYPE_NAME, COL_R_CLASS_NAME, COL_R_LOC, 
                    COL_R_VAULT_PATH, COL_R_FREE_SPACE, COL_R_FREE_SPACE_TIME, 
                    COL_R_RESC_INFO, COL_R_RESC_COMMENT, COL_R_CREATE_TIME, 
                    COL_R_MODIFY_TIME],
                   [0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0,
                    0, 0, 0], 
                   13)
    sqlCondInp.init([COL_R_RESC_NAME], ["='%s'" % resc_name], 1)
    columnNames = ["resc_id", "resc_name", "zone_name", "resc_type_name",
                   "resc_class_name", "resc_net", "resc_def_path",
                   "free_space", "free_space_ts", "resc_info",
                   "r_comment", "create_ts", "modify_ts"]
    l =  queryToFormatDictList(conn, selectInp, sqlCondInp, columnNames)
    if len(l) > 0:
        return l[0]
    else:
        return {}

def getResource(conn, resc_name):
    global lastStatus
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_R_RESC_NAME], [0], 1)
    sqlCondInp.init([COL_R_RESC_NAME], ["='%s'" % resc_name], 1)
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    # Check the existence of the resource
    if len(l) > 0:
        return irodsResource(conn, l[0])
    else:
        lastStatus = CAT_NO_ROWS_FOUND
        return None

def getResources(conn):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_R_RESC_NAME], [0], 1)
    sqlCondInp.init([], [], 0)
    return [ irodsResource(conn, name) for name in queryToTupleList(conn, selectInp, sqlCondInp) ]

def getUser(conn, userName, zone_name=""):
    global lastStatus
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_USER_NAME, COL_USER_ZONE], [0, 0], 2)
    if zone_name:
        sqlCondInp.init([COL_USER_NAME, COL_USER_TYPE, COL_USER_ZONE], 
                        ["='%s'" % userName,
                         "<>'rodsgroup'",
                         "='%s'" % zone_name], 3)
    else:
        sqlCondInp.init([COL_USER_NAME, COL_USER_TYPE], 
                        ["='%s'" % userName,
                         "<>'rodsgroup'"], 2)
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    
    if len(l) > 0:
        return irodsUser(conn, l[0][0], l[0][1])
    else:
        lastStatus = CAT_NO_ROWS_FOUND
        return None

## return the list of groups for the user
def getUserGroupMembership(conn, userName, zoneName):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_USER_GROUP_NAME], [0], 1)
    sqlCondInp.init([COL_USER_NAME, COL_USER_ZONE],
                    ["='%s'" % userName, "='%s'" % zoneName],
                    2)
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    return l

def getUserInfo(conn, userName, zone_name=""):
    return getUserInfoToDict(conn, userName, zone_name)

def getUserInfoToDict(conn, user_name, zone=""):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_USER_NAME, COL_USER_ID, COL_USER_TYPE, COL_USER_ZONE,
                    COL_USER_INFO, COL_USER_COMMENT, COL_USER_CREATE_TIME,
                    COL_USER_MODIFY_TIME],
                   [0, 0, 0, 0, 0, 
                    0, 0, 0], 
                   8)
    if zone:
        sqlCondInp.init([COL_USER_NAME, COL_USER_ZONE], 
                        ["='%s'" % user_name,
                         "='%s'" % zone], 
                        2)
    else:
        sqlCondInp.init([COL_USER_NAME], 
                        ["='%s'" % user_name], 
                        1)
    columnNames = ["user_name", "user_id", "user_type_name", "zone_name",
                   "user_info", "r_comment", "create_ts",
                   "modify_ts"]
    l =  queryToFormatDictList(conn, selectInp, sqlCondInp, columnNames)
    if len(l) > 0:
        return l[0]
    else:
        return {}

def getUserQuotaGlobal(conn, userName):
    return getQuota(conn, userName, True, True)

def getUserQuotaResources(conn, userName):
    return getQuota(conn, userName, True, False)

def getUsers(conn):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
                
    selectInp.init([COL_USER_NAME, COL_USER_ZONE], [0, 0], 2)
    
    sqlCondInp.init([COL_USER_TYPE], 
                    ["<>'rodsgroup'"], 1)
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    
    if len(l) > 0:
        return [  irodsUser(conn, name, zone) for (name, zone) in l ]
    else:
        return []

def getUsersQuotaGlobal(conn):
    return getQuota(conn, "", True, True)

def getUsersQuotaResources(conn):
    return getQuota(conn, "", True, False)

## return a list of dictionaries:
##   keys: 
##     resource: Resource name
##     user: User name
##     zone: zone name
##     usage: nb bits used
##     time: time set
def getUserUsage(userName, usersZone):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_QUOTA_USAGE_MODIFY_TIME,
                    COL_QUOTA_RESC_NAME,
                    COL_QUOTA_USER_NAME,
                    COL_QUOTA_USER_ZONE,
                    COL_QUOTA_USAGE],
                   [0,0,0,0,0],
                   5)
    colName = ["time", "resource", "user", "zone", "usage"]
    if userName:
        sqlCondInp.init([COL_QUOTA_USER_NAME],
                        ["='%s'" % userName],
                        1)
    else:
        sqlCondInp.init([], [], 0)
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    res = []
    for el in l:
        d = dict(zip(colName, el))
        d['time'] = getLocalTimeFromRodsTime(d['time'])
        d['usage'] = int(d['usage'])
        res.append(d)
    return res

def getZone(conn, zone_name):
    global lastStatus
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_ZONE_NAME], [0], 1)
    sqlCondInp.init([COL_ZONE_NAME], ["='%s'" % zone_name], 1)
    l =  queryToTupleList(conn, selectInp, sqlCondInp)
    if len(l) > 0:
        return irodsZone(conn, l[0])
    else:
        lastStatus = irods.CAT_NO_ROWS_FOUND
        return None

def getZoneInfoToDict(conn, zone_name, zone=""):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_ZONE_ID, COL_ZONE_NAME, COL_ZONE_TYPE, 
                    COL_ZONE_CONNECTION, COL_ZONE_COMMENT, COL_ZONE_CREATE_TIME,
                    COL_ZONE_MODIFY_TIME],
                   [0, 0, 0, 0, 0, 0, 0], 
                   7)
    sqlCondInp.init([COL_ZONE_NAME], ["='%s'" % zone_name], 1)
    columnNames = ["zone_id", "zone_name", "zone_type_name", 
                   "zone_conn_string", "r_comment", "create_ts", "modify_ts"]
    l =  queryToFormatDictList(conn, selectInp, sqlCondInp, columnNames)
    if len(l) > 0:
        return l[0]
    else:
        return {}

def getZones(conn):
    sqlCondInp = inxValPair_t()
    selectInp = inxIvalPair_t()
    selectInp.init([COL_ZONE_NAME], [0], 1)
    sqlCondInp.init([], [], 0)
    return [ irodsZone(conn, el) for el in queryToTupleList(conn, selectInp, sqlCondInp)]

def irodsCopy(conn, path, new_path, force=False, resc=None):
    global lastStatus
    lastStatus, myEnv = getRodsEnv()
    if lastStatus != 0:
        return lastStatus
    dataObjCopyInp = dataObjCopyInp_t()
    if force:
        addKeyVal(dataObjCopyInp.destDataObjInp.condInput, FORCE_FLAG_KW, "")
    if resc:
        addKeyVal(dataObjCopyInp.destDataObjInp.condInput, DEST_RESC_NAME_KW, resc)
    else:
        addKeyVal(dataObjCopyInp.destDataObjInp.condInput, DEST_RESC_NAME_KW, myEnv.rodsDefResource)
    dataObjCopyInp.srcDataObjInp.objPath = path
    dataObjCopyInp.destDataObjInp.objPath = new_path
    dataObjCopyInp.srcDataObjInp.dataSize = -1
    lastStatus = rcDataObjCopy(conn, dataObjCopyInp)
    return lastStatus

def irodsMove(conn, old_path, new_path):
    global lastStatus
    dataObjRenameInp = dataObjCopyInp_t()
    dataObjRenameInp.srcDataObjInp.oprType = RENAME_DATA_OBJ
    dataObjRenameInp.srcDataObjInp.objPath = old_path
    dataObjRenameInp.destDataObjInp.oprType = RENAME_DATA_OBJ
    dataObjRenameInp.destDataObjInp.objPath = new_path
    lastStatus = rcDataObjRename(conn, dataObjRenameInp)
    return lastStatus

def irodsOpen(conn, path, mode="r", resc_name=""):
    status, collName, dataName = splitPathByKey(path, "/")
#    if not resc_name:
#        status, myEnv = getRodsEnv()
#        resc_name = myEnv.rodsDefResource
    return  _irodsOpen(conn, collName, dataName, mode, resc_name)

def modifyObject(conn, objType, objName, fieldName, fieldValue):
    generalAdminInp = generalAdminInp_t()
    generalAdminInp.arg0 = "modify"
    generalAdminInp.arg1 = objType
    generalAdminInp.arg2 = objName
    generalAdminInp.arg3 = fieldName
    generalAdminInp.arg4 = fieldValue
    generalAdminInp.arg5 = ""
    generalAdminInp.arg6 = ""
    generalAdminInp.arg7 = ""
    generalAdminInp.arg8 = ""
    generalAdminInp.arg9 = ""
    return rcGeneralAdmin(conn, generalAdminInp)

## Factorize the call to modAVUMetadata
## objType = -d -C, -R, -u,...
## action = add, rm
def procUserMetadata(conn, action, objType, name, attName, attValue, attUnits):
    global lastStatus
    modAVUMetadataInp = modAVUMetadataInp_t()
    modAVUMetadataInp.arg0 = action
    modAVUMetadataInp.arg1 = objType
    modAVUMetadataInp.arg2 = name
    modAVUMetadataInp.arg3 = attName
    modAVUMetadataInp.arg4 = attValue
    modAVUMetadataInp.arg5 = attUnits
    modAVUMetadataInp.arg6 = ""
    modAVUMetadataInp.arg7 = ""
    modAVUMetadataInp.arg8 = ""
    modAVUMetadataInp.arg9 = ""
    lastStatus = rcModAVUMetadata(conn, modAVUMetadataInp)
    return lastStatus

def queryToFormatDictList(conn, selectInp, sqlCondInp, formatStr):
    genQueryInp = genQueryInp_t()
    l = []
    genQueryInp.maxRows = MAX_SQL_ROWS
    genQueryInp.continueInx = 0
    genQueryInp.condInput.len = 0
    genQueryInp.selectInp = selectInp
    genQueryInp.sqlCondInp = sqlCondInp
    genQueryOut = rcGenQuery(conn, genQueryInp)
    if not genQueryOut:
        return l
    addResultToFormatDictList(genQueryOut, formatStr, l)
    while genQueryOut and genQueryOut.continueInx > 0:
        genQueryInp.continueInx = genQueryOut.continueInx
        if genQueryOut is not None:
            genQueryOut.release()
        genQueryOut = rcGenQuery(conn, genQueryInp)
        if genQueryOut:
            addResultToFormatDictList(genQueryOut, l)

    if genQueryOut is not None:
        genQueryOut.release()
    return l

def queryToTupleList(conn, selectInp, sqlCondInp):
    genQueryInp = genQueryInp_t()
    l = []
    genQueryInp.maxRows = MAX_SQL_ROWS
    genQueryInp.continueInx = 0
    genQueryInp.condInput.len = 0
    genQueryInp.selectInp = selectInp
    genQueryInp.sqlCondInp = sqlCondInp
    genQueryOut = rcGenQuery(conn, genQueryInp)
    if not genQueryOut:
        return l
    addResultToTupleList(genQueryOut, l)
    while genQueryOut and genQueryOut.continueInx > 0:
        genQueryInp.continueInx = genQueryOut.continueInx
        if genQueryOut is not None:
            genQueryOut.release()
        genQueryOut = rcGenQuery(conn, genQueryInp)
        if genQueryOut:
            addResultToTupleList(genQueryOut, l)

    if genQueryOut is not None:
        genQueryOut.release()
    return l

def rmCollUserMetadata(conn, path, name, value, units=""):
    return rmUserMetadata(conn, "-c", path, name, value, units)
    
def rmFileUserMetadata(conn, path, name, value, units=""):
    return rmUserMetadata(conn, "-d", path, name, value, units)

def rmObject(conn, objType, objName, arg3):
    global lastStatus
    generalAdminInp = generalAdminInp_t()
    generalAdminInp.arg0 = "rm"
    generalAdminInp.arg1 = objType
    generalAdminInp.arg2 = objName
    generalAdminInp.arg3 = arg3
    generalAdminInp.arg4 = ""
    generalAdminInp.arg5 = ""
    generalAdminInp.arg6 = ""
    generalAdminInp.arg7 = ""
    generalAdminInp.arg8 = ""
    generalAdminInp.arg9 = ""
    lastStatus = rcGeneralAdmin(conn, generalAdminInp)
    return lastStatus

def rmUserMetadata(conn, obj_type, name, attName, attValue, attUnits):
    return procUserMetadata(conn, "rm", obj_type, name, attName, attValue, 
                            attUnits)

def setACL(conn, accessLevel, userName, zoneName, path, recursive=False):
    global lastStatus
    modAccessControl = modAccessControlInp_t()
    if recursive:
        modAccessControl.recursiveFlag = 1
    else:
        modAccessControl.recursiveFlag = 0
    modAccessControl.accessLevel = accessLevel
    modAccessControl.userName = userName
    modAccessControl.zone = zoneName
    modAccessControl.path = path
    lastStatus = rcModAccessControl(conn, modAccessControl)
    return lastStatus

def setCollACL(conn, accessLevel, userName, zoneName, path, recursive=False):
    if path.endswith('/'):
        path = path[:-1]
    return setACL(conn, accessLevel, userName, zoneName, path, recursive)

def setDataObjACL(conn, accessLevel, userName, zoneName, path, recursive=False):
    return setACL(conn, accessLevel, userName, zoneName, path, recursive)

def setInheritACL(conn, path, inherit, recursive=False):
    if inherit:
        return setACL(conn, "inherit", "", "", path, recursive)
    else:
        return setACL(conn, "noinherit", "", "", path, recursive)

def setPassword(conn, userName, new_pw):
    rand = "1gCBizHWbwIYyWLoysGzTe6SyzqFKMniZX05faZHWAwQKXf6Fs"
    lcopy = MAX_PASSWORD_LEN - 10 - len(new_pw)
    if lcopy > 15:
        new_pw += rand[:lcopy]
    i, pw = obfGetPw()
    key2 = getSessionSignitureClientside()
    obf_pw = obfEncodeByKeyV2(new_pw, pw, key2)
    return modifyObject(conn, "user", userName, "password", obf_pw)


class rodsEnv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rodsEnv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rodsEnv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rodsUserName"] = _irods.rodsEnv_rodsUserName_set
    __swig_getmethods__["rodsUserName"] = _irods.rodsEnv_rodsUserName_get
    if _newclass:rodsUserName = _swig_property(_irods.rodsEnv_rodsUserName_get, _irods.rodsEnv_rodsUserName_set)
    __swig_setmethods__["rodsHost"] = _irods.rodsEnv_rodsHost_set
    __swig_getmethods__["rodsHost"] = _irods.rodsEnv_rodsHost_get
    if _newclass:rodsHost = _swig_property(_irods.rodsEnv_rodsHost_get, _irods.rodsEnv_rodsHost_set)
    __swig_setmethods__["rodsPort"] = _irods.rodsEnv_rodsPort_set
    __swig_getmethods__["rodsPort"] = _irods.rodsEnv_rodsPort_get
    if _newclass:rodsPort = _swig_property(_irods.rodsEnv_rodsPort_get, _irods.rodsEnv_rodsPort_set)
    __swig_setmethods__["xmsgHost"] = _irods.rodsEnv_xmsgHost_set
    __swig_getmethods__["xmsgHost"] = _irods.rodsEnv_xmsgHost_get
    if _newclass:xmsgHost = _swig_property(_irods.rodsEnv_xmsgHost_get, _irods.rodsEnv_xmsgHost_set)
    __swig_setmethods__["xmsgPort"] = _irods.rodsEnv_xmsgPort_set
    __swig_getmethods__["xmsgPort"] = _irods.rodsEnv_xmsgPort_get
    if _newclass:xmsgPort = _swig_property(_irods.rodsEnv_xmsgPort_get, _irods.rodsEnv_xmsgPort_set)
    __swig_setmethods__["rodsHome"] = _irods.rodsEnv_rodsHome_set
    __swig_getmethods__["rodsHome"] = _irods.rodsEnv_rodsHome_get
    if _newclass:rodsHome = _swig_property(_irods.rodsEnv_rodsHome_get, _irods.rodsEnv_rodsHome_set)
    __swig_setmethods__["rodsCwd"] = _irods.rodsEnv_rodsCwd_set
    __swig_getmethods__["rodsCwd"] = _irods.rodsEnv_rodsCwd_get
    if _newclass:rodsCwd = _swig_property(_irods.rodsEnv_rodsCwd_get, _irods.rodsEnv_rodsCwd_set)
    __swig_setmethods__["rodsAuthScheme"] = _irods.rodsEnv_rodsAuthScheme_set
    __swig_getmethods__["rodsAuthScheme"] = _irods.rodsEnv_rodsAuthScheme_get
    if _newclass:rodsAuthScheme = _swig_property(_irods.rodsEnv_rodsAuthScheme_get, _irods.rodsEnv_rodsAuthScheme_set)
    __swig_setmethods__["rodsDefResource"] = _irods.rodsEnv_rodsDefResource_set
    __swig_getmethods__["rodsDefResource"] = _irods.rodsEnv_rodsDefResource_get
    if _newclass:rodsDefResource = _swig_property(_irods.rodsEnv_rodsDefResource_get, _irods.rodsEnv_rodsDefResource_set)
    __swig_setmethods__["rodsZone"] = _irods.rodsEnv_rodsZone_set
    __swig_getmethods__["rodsZone"] = _irods.rodsEnv_rodsZone_get
    if _newclass:rodsZone = _swig_property(_irods.rodsEnv_rodsZone_get, _irods.rodsEnv_rodsZone_set)
    __swig_setmethods__["rodsServerDn"] = _irods.rodsEnv_rodsServerDn_set
    __swig_getmethods__["rodsServerDn"] = _irods.rodsEnv_rodsServerDn_get
    if _newclass:rodsServerDn = _swig_property(_irods.rodsEnv_rodsServerDn_get, _irods.rodsEnv_rodsServerDn_set)
    __swig_setmethods__["rodsLogLevel"] = _irods.rodsEnv_rodsLogLevel_set
    __swig_getmethods__["rodsLogLevel"] = _irods.rodsEnv_rodsLogLevel_get
    if _newclass:rodsLogLevel = _swig_property(_irods.rodsEnv_rodsLogLevel_get, _irods.rodsEnv_rodsLogLevel_set)
    __swig_setmethods__["rodsAuthFileName"] = _irods.rodsEnv_rodsAuthFileName_set
    __swig_getmethods__["rodsAuthFileName"] = _irods.rodsEnv_rodsAuthFileName_get
    if _newclass:rodsAuthFileName = _swig_property(_irods.rodsEnv_rodsAuthFileName_get, _irods.rodsEnv_rodsAuthFileName_set)
    __swig_setmethods__["rodsDebug"] = _irods.rodsEnv_rodsDebug_set
    __swig_getmethods__["rodsDebug"] = _irods.rodsEnv_rodsDebug_get
    if _newclass:rodsDebug = _swig_property(_irods.rodsEnv_rodsDebug_get, _irods.rodsEnv_rodsDebug_set)
    def __init__(self): 
        this = _irods.new_rodsEnv()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rodsEnv
    __del__ = lambda self : None;
rodsEnv_swigregister = _irods.rodsEnv_swigregister
rodsEnv_swigregister(rodsEnv)


def appendRodsEnv(*args):
  return _irods.appendRodsEnv(*args)
appendRodsEnv = _irods.appendRodsEnv

def getRodsEnv(*args):
  return _irods.getRodsEnv(*args)
getRodsEnv = _irods.getRodsEnv
def getRodsEnv():
    rodsEnvArg = rodsEnv()
    status = _irods.getRodsEnv(rodsEnvArg)
    return (status, rodsEnvArg)


def getRodsEnvAuthFileName():
  return _irods.getRodsEnvAuthFileName()
getRodsEnvAuthFileName = _irods.getRodsEnvAuthFileName

def getRodsEnvFileName():
  return _irods.getRodsEnvFileName()
getRodsEnvFileName = _irods.getRodsEnvFileName
class MD5_CTX(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MD5_CTX, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MD5_CTX, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _irods.MD5_CTX_state_set
    __swig_getmethods__["state"] = _irods.MD5_CTX_state_get
    if _newclass:state = _swig_property(_irods.MD5_CTX_state_get, _irods.MD5_CTX_state_set)
    __swig_setmethods__["count"] = _irods.MD5_CTX_count_set
    __swig_getmethods__["count"] = _irods.MD5_CTX_count_get
    if _newclass:count = _swig_property(_irods.MD5_CTX_count_get, _irods.MD5_CTX_count_set)
    __swig_setmethods__["buffer"] = _irods.MD5_CTX_buffer_set
    __swig_getmethods__["buffer"] = _irods.MD5_CTX_buffer_get
    if _newclass:buffer = _swig_property(_irods.MD5_CTX_buffer_get, _irods.MD5_CTX_buffer_set)
    def __init__(self): 
        this = _irods.new_MD5_CTX()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_MD5_CTX
    __del__ = lambda self : None;
MD5_CTX_swigregister = _irods.MD5_CTX_swigregister
MD5_CTX_swigregister(MD5_CTX)


def chksumLocFile(*args):
  return _irods.chksumLocFile(*args)
chksumLocFile = _irods.chksumLocFile

def MD5Digest(*args):
  return _irods.MD5Digest(*args)
MD5Digest = _irods.MD5Digest

def md5ToStr(*args):
  return _irods.md5ToStr(*args)
md5ToStr = _irods.md5ToStr

def rcChksumLocFile(*args):
  return _irods.rcChksumLocFile(*args)
rcChksumLocFile = _irods.rcChksumLocFile
class collEnt_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, collEnt_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, collEnt_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["objType"] = _irods.collEnt_t_objType_set
    __swig_getmethods__["objType"] = _irods.collEnt_t_objType_get
    if _newclass:objType = _swig_property(_irods.collEnt_t_objType_get, _irods.collEnt_t_objType_set)
    __swig_setmethods__["replNum"] = _irods.collEnt_t_replNum_set
    __swig_getmethods__["replNum"] = _irods.collEnt_t_replNum_get
    if _newclass:replNum = _swig_property(_irods.collEnt_t_replNum_get, _irods.collEnt_t_replNum_set)
    __swig_setmethods__["replStatus"] = _irods.collEnt_t_replStatus_set
    __swig_getmethods__["replStatus"] = _irods.collEnt_t_replStatus_get
    if _newclass:replStatus = _swig_property(_irods.collEnt_t_replStatus_get, _irods.collEnt_t_replStatus_set)
    __swig_setmethods__["dataMode"] = _irods.collEnt_t_dataMode_set
    __swig_getmethods__["dataMode"] = _irods.collEnt_t_dataMode_get
    if _newclass:dataMode = _swig_property(_irods.collEnt_t_dataMode_get, _irods.collEnt_t_dataMode_set)
    __swig_setmethods__["dataSize"] = _irods.collEnt_t_dataSize_set
    __swig_getmethods__["dataSize"] = _irods.collEnt_t_dataSize_get
    if _newclass:dataSize = _swig_property(_irods.collEnt_t_dataSize_get, _irods.collEnt_t_dataSize_set)
    __swig_setmethods__["collName"] = _irods.collEnt_t_collName_set
    __swig_getmethods__["collName"] = _irods.collEnt_t_collName_get
    if _newclass:collName = _swig_property(_irods.collEnt_t_collName_get, _irods.collEnt_t_collName_set)
    __swig_setmethods__["dataName"] = _irods.collEnt_t_dataName_set
    __swig_getmethods__["dataName"] = _irods.collEnt_t_dataName_get
    if _newclass:dataName = _swig_property(_irods.collEnt_t_dataName_get, _irods.collEnt_t_dataName_set)
    __swig_setmethods__["dataId"] = _irods.collEnt_t_dataId_set
    __swig_getmethods__["dataId"] = _irods.collEnt_t_dataId_get
    if _newclass:dataId = _swig_property(_irods.collEnt_t_dataId_get, _irods.collEnt_t_dataId_set)
    __swig_setmethods__["createTime"] = _irods.collEnt_t_createTime_set
    __swig_getmethods__["createTime"] = _irods.collEnt_t_createTime_get
    if _newclass:createTime = _swig_property(_irods.collEnt_t_createTime_get, _irods.collEnt_t_createTime_set)
    __swig_setmethods__["modifyTime"] = _irods.collEnt_t_modifyTime_set
    __swig_getmethods__["modifyTime"] = _irods.collEnt_t_modifyTime_get
    if _newclass:modifyTime = _swig_property(_irods.collEnt_t_modifyTime_get, _irods.collEnt_t_modifyTime_set)
    __swig_setmethods__["chksum"] = _irods.collEnt_t_chksum_set
    __swig_getmethods__["chksum"] = _irods.collEnt_t_chksum_get
    if _newclass:chksum = _swig_property(_irods.collEnt_t_chksum_get, _irods.collEnt_t_chksum_set)
    __swig_setmethods__["resource"] = _irods.collEnt_t_resource_set
    __swig_getmethods__["resource"] = _irods.collEnt_t_resource_get
    if _newclass:resource = _swig_property(_irods.collEnt_t_resource_get, _irods.collEnt_t_resource_set)
    __swig_setmethods__["rescGrp"] = _irods.collEnt_t_rescGrp_set
    __swig_getmethods__["rescGrp"] = _irods.collEnt_t_rescGrp_get
    if _newclass:rescGrp = _swig_property(_irods.collEnt_t_rescGrp_get, _irods.collEnt_t_rescGrp_set)
    __swig_setmethods__["phyPath"] = _irods.collEnt_t_phyPath_set
    __swig_getmethods__["phyPath"] = _irods.collEnt_t_phyPath_get
    if _newclass:phyPath = _swig_property(_irods.collEnt_t_phyPath_get, _irods.collEnt_t_phyPath_set)
    __swig_setmethods__["ownerName"] = _irods.collEnt_t_ownerName_set
    __swig_getmethods__["ownerName"] = _irods.collEnt_t_ownerName_get
    if _newclass:ownerName = _swig_property(_irods.collEnt_t_ownerName_get, _irods.collEnt_t_ownerName_set)
    __swig_setmethods__["specColl"] = _irods.collEnt_t_specColl_set
    __swig_getmethods__["specColl"] = _irods.collEnt_t_specColl_get
    if _newclass:specColl = _swig_property(_irods.collEnt_t_specColl_get, _irods.collEnt_t_specColl_set)
    def __init__(self): 
        this = _irods.new_collEnt_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_collEnt_t
    __del__ = lambda self : None;
collEnt_t_swigregister = _irods.collEnt_t_swigregister
collEnt_t_swigregister(collEnt_t)

COLL_CLOSED = _irods.COLL_CLOSED
COLL_OPENED = _irods.COLL_OPENED
COLL_DATA_OBJ_QUERIED = _irods.COLL_DATA_OBJ_QUERIED
COLL_COLL_OBJ_QUERIED = _irods.COLL_COLL_OBJ_QUERIED
class collHandle_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, collHandle_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, collHandle_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _irods.collHandle_t_state_set
    __swig_getmethods__["state"] = _irods.collHandle_t_state_get
    if _newclass:state = _swig_property(_irods.collHandle_t_state_get, _irods.collHandle_t_state_set)
    __swig_setmethods__["inuseFlag"] = _irods.collHandle_t_inuseFlag_set
    __swig_getmethods__["inuseFlag"] = _irods.collHandle_t_inuseFlag_get
    if _newclass:inuseFlag = _swig_property(_irods.collHandle_t_inuseFlag_get, _irods.collHandle_t_inuseFlag_set)
    __swig_setmethods__["flags"] = _irods.collHandle_t_flags_set
    __swig_getmethods__["flags"] = _irods.collHandle_t_flags_get
    if _newclass:flags = _swig_property(_irods.collHandle_t_flags_get, _irods.collHandle_t_flags_set)
    __swig_setmethods__["rowInx"] = _irods.collHandle_t_rowInx_set
    __swig_getmethods__["rowInx"] = _irods.collHandle_t_rowInx_get
    if _newclass:rowInx = _swig_property(_irods.collHandle_t_rowInx_get, _irods.collHandle_t_rowInx_set)
    __swig_setmethods__["rodsObjStat"] = _irods.collHandle_t_rodsObjStat_set
    __swig_getmethods__["rodsObjStat"] = _irods.collHandle_t_rodsObjStat_get
    if _newclass:rodsObjStat = _swig_property(_irods.collHandle_t_rodsObjStat_get, _irods.collHandle_t_rodsObjStat_set)
    __swig_setmethods__["queryHandle"] = _irods.collHandle_t_queryHandle_set
    __swig_getmethods__["queryHandle"] = _irods.collHandle_t_queryHandle_get
    if _newclass:queryHandle = _swig_property(_irods.collHandle_t_queryHandle_get, _irods.collHandle_t_queryHandle_set)
    __swig_setmethods__["genQueryInp"] = _irods.collHandle_t_genQueryInp_set
    __swig_getmethods__["genQueryInp"] = _irods.collHandle_t_genQueryInp_get
    if _newclass:genQueryInp = _swig_property(_irods.collHandle_t_genQueryInp_get, _irods.collHandle_t_genQueryInp_set)
    __swig_setmethods__["dataObjInp"] = _irods.collHandle_t_dataObjInp_set
    __swig_getmethods__["dataObjInp"] = _irods.collHandle_t_dataObjInp_get
    if _newclass:dataObjInp = _swig_property(_irods.collHandle_t_dataObjInp_get, _irods.collHandle_t_dataObjInp_set)
    __swig_setmethods__["dataObjSqlResult"] = _irods.collHandle_t_dataObjSqlResult_set
    __swig_getmethods__["dataObjSqlResult"] = _irods.collHandle_t_dataObjSqlResult_get
    if _newclass:dataObjSqlResult = _swig_property(_irods.collHandle_t_dataObjSqlResult_get, _irods.collHandle_t_dataObjSqlResult_set)
    __swig_setmethods__["collSqlResult"] = _irods.collHandle_t_collSqlResult_set
    __swig_getmethods__["collSqlResult"] = _irods.collHandle_t_collSqlResult_get
    if _newclass:collSqlResult = _swig_property(_irods.collHandle_t_collSqlResult_get, _irods.collHandle_t_collSqlResult_set)
    __swig_setmethods__["linkedObjPath"] = _irods.collHandle_t_linkedObjPath_set
    __swig_getmethods__["linkedObjPath"] = _irods.collHandle_t_linkedObjPath_get
    if _newclass:linkedObjPath = _swig_property(_irods.collHandle_t_linkedObjPath_get, _irods.collHandle_t_linkedObjPath_set)
    __swig_setmethods__["prevdataId"] = _irods.collHandle_t_prevdataId_set
    __swig_getmethods__["prevdataId"] = _irods.collHandle_t_prevdataId_get
    if _newclass:prevdataId = _swig_property(_irods.collHandle_t_prevdataId_get, _irods.collHandle_t_prevdataId_set)
    def __init__(self): 
        this = _irods.new_collHandle_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_collHandle_t
    __del__ = lambda self : None;
collHandle_t_swigregister = _irods.collHandle_t_swigregister
collHandle_t_swigregister(collHandle_t)

class collSqlResult_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, collSqlResult_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, collSqlResult_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rowCnt"] = _irods.collSqlResult_t_rowCnt_set
    __swig_getmethods__["rowCnt"] = _irods.collSqlResult_t_rowCnt_get
    if _newclass:rowCnt = _swig_property(_irods.collSqlResult_t_rowCnt_get, _irods.collSqlResult_t_rowCnt_set)
    __swig_setmethods__["attriCnt"] = _irods.collSqlResult_t_attriCnt_set
    __swig_getmethods__["attriCnt"] = _irods.collSqlResult_t_attriCnt_get
    if _newclass:attriCnt = _swig_property(_irods.collSqlResult_t_attriCnt_get, _irods.collSqlResult_t_attriCnt_set)
    __swig_setmethods__["continueInx"] = _irods.collSqlResult_t_continueInx_set
    __swig_getmethods__["continueInx"] = _irods.collSqlResult_t_continueInx_get
    if _newclass:continueInx = _swig_property(_irods.collSqlResult_t_continueInx_get, _irods.collSqlResult_t_continueInx_set)
    __swig_setmethods__["totalRowCount"] = _irods.collSqlResult_t_totalRowCount_set
    __swig_getmethods__["totalRowCount"] = _irods.collSqlResult_t_totalRowCount_get
    if _newclass:totalRowCount = _swig_property(_irods.collSqlResult_t_totalRowCount_get, _irods.collSqlResult_t_totalRowCount_set)
    __swig_setmethods__["collName"] = _irods.collSqlResult_t_collName_set
    __swig_getmethods__["collName"] = _irods.collSqlResult_t_collName_get
    if _newclass:collName = _swig_property(_irods.collSqlResult_t_collName_get, _irods.collSqlResult_t_collName_set)
    __swig_setmethods__["collType"] = _irods.collSqlResult_t_collType_set
    __swig_getmethods__["collType"] = _irods.collSqlResult_t_collType_get
    if _newclass:collType = _swig_property(_irods.collSqlResult_t_collType_get, _irods.collSqlResult_t_collType_set)
    __swig_setmethods__["collInfo1"] = _irods.collSqlResult_t_collInfo1_set
    __swig_getmethods__["collInfo1"] = _irods.collSqlResult_t_collInfo1_get
    if _newclass:collInfo1 = _swig_property(_irods.collSqlResult_t_collInfo1_get, _irods.collSqlResult_t_collInfo1_set)
    __swig_setmethods__["collInfo2"] = _irods.collSqlResult_t_collInfo2_set
    __swig_getmethods__["collInfo2"] = _irods.collSqlResult_t_collInfo2_get
    if _newclass:collInfo2 = _swig_property(_irods.collSqlResult_t_collInfo2_get, _irods.collSqlResult_t_collInfo2_set)
    __swig_setmethods__["collOwner"] = _irods.collSqlResult_t_collOwner_set
    __swig_getmethods__["collOwner"] = _irods.collSqlResult_t_collOwner_get
    if _newclass:collOwner = _swig_property(_irods.collSqlResult_t_collOwner_get, _irods.collSqlResult_t_collOwner_set)
    __swig_setmethods__["collCreateTime"] = _irods.collSqlResult_t_collCreateTime_set
    __swig_getmethods__["collCreateTime"] = _irods.collSqlResult_t_collCreateTime_get
    if _newclass:collCreateTime = _swig_property(_irods.collSqlResult_t_collCreateTime_get, _irods.collSqlResult_t_collCreateTime_set)
    __swig_setmethods__["collModifyTime"] = _irods.collSqlResult_t_collModifyTime_set
    __swig_getmethods__["collModifyTime"] = _irods.collSqlResult_t_collModifyTime_get
    if _newclass:collModifyTime = _swig_property(_irods.collSqlResult_t_collModifyTime_get, _irods.collSqlResult_t_collModifyTime_set)
    def __init__(self): 
        this = _irods.new_collSqlResult_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_collSqlResult_t
    __del__ = lambda self : None;
collSqlResult_t_swigregister = _irods.collSqlResult_t_swigregister
collSqlResult_t_swigregister(collSqlResult_t)

class dataObjSqlResult_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dataObjSqlResult_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dataObjSqlResult_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rowCnt"] = _irods.dataObjSqlResult_t_rowCnt_set
    __swig_getmethods__["rowCnt"] = _irods.dataObjSqlResult_t_rowCnt_get
    if _newclass:rowCnt = _swig_property(_irods.dataObjSqlResult_t_rowCnt_get, _irods.dataObjSqlResult_t_rowCnt_set)
    __swig_setmethods__["attriCnt"] = _irods.dataObjSqlResult_t_attriCnt_set
    __swig_getmethods__["attriCnt"] = _irods.dataObjSqlResult_t_attriCnt_get
    if _newclass:attriCnt = _swig_property(_irods.dataObjSqlResult_t_attriCnt_get, _irods.dataObjSqlResult_t_attriCnt_set)
    __swig_setmethods__["continueInx"] = _irods.dataObjSqlResult_t_continueInx_set
    __swig_getmethods__["continueInx"] = _irods.dataObjSqlResult_t_continueInx_get
    if _newclass:continueInx = _swig_property(_irods.dataObjSqlResult_t_continueInx_get, _irods.dataObjSqlResult_t_continueInx_set)
    __swig_setmethods__["totalRowCount"] = _irods.dataObjSqlResult_t_totalRowCount_set
    __swig_getmethods__["totalRowCount"] = _irods.dataObjSqlResult_t_totalRowCount_get
    if _newclass:totalRowCount = _swig_property(_irods.dataObjSqlResult_t_totalRowCount_get, _irods.dataObjSqlResult_t_totalRowCount_set)
    __swig_setmethods__["collName"] = _irods.dataObjSqlResult_t_collName_set
    __swig_getmethods__["collName"] = _irods.dataObjSqlResult_t_collName_get
    if _newclass:collName = _swig_property(_irods.dataObjSqlResult_t_collName_get, _irods.dataObjSqlResult_t_collName_set)
    __swig_setmethods__["dataName"] = _irods.dataObjSqlResult_t_dataName_set
    __swig_getmethods__["dataName"] = _irods.dataObjSqlResult_t_dataName_get
    if _newclass:dataName = _swig_property(_irods.dataObjSqlResult_t_dataName_get, _irods.dataObjSqlResult_t_dataName_set)
    __swig_setmethods__["dataMode"] = _irods.dataObjSqlResult_t_dataMode_set
    __swig_getmethods__["dataMode"] = _irods.dataObjSqlResult_t_dataMode_get
    if _newclass:dataMode = _swig_property(_irods.dataObjSqlResult_t_dataMode_get, _irods.dataObjSqlResult_t_dataMode_set)
    __swig_setmethods__["dataSize"] = _irods.dataObjSqlResult_t_dataSize_set
    __swig_getmethods__["dataSize"] = _irods.dataObjSqlResult_t_dataSize_get
    if _newclass:dataSize = _swig_property(_irods.dataObjSqlResult_t_dataSize_get, _irods.dataObjSqlResult_t_dataSize_set)
    __swig_setmethods__["createTime"] = _irods.dataObjSqlResult_t_createTime_set
    __swig_getmethods__["createTime"] = _irods.dataObjSqlResult_t_createTime_get
    if _newclass:createTime = _swig_property(_irods.dataObjSqlResult_t_createTime_get, _irods.dataObjSqlResult_t_createTime_set)
    __swig_setmethods__["modifyTime"] = _irods.dataObjSqlResult_t_modifyTime_set
    __swig_getmethods__["modifyTime"] = _irods.dataObjSqlResult_t_modifyTime_get
    if _newclass:modifyTime = _swig_property(_irods.dataObjSqlResult_t_modifyTime_get, _irods.dataObjSqlResult_t_modifyTime_set)
    __swig_setmethods__["chksum"] = _irods.dataObjSqlResult_t_chksum_set
    __swig_getmethods__["chksum"] = _irods.dataObjSqlResult_t_chksum_get
    if _newclass:chksum = _swig_property(_irods.dataObjSqlResult_t_chksum_get, _irods.dataObjSqlResult_t_chksum_set)
    __swig_setmethods__["replStatus"] = _irods.dataObjSqlResult_t_replStatus_set
    __swig_getmethods__["replStatus"] = _irods.dataObjSqlResult_t_replStatus_get
    if _newclass:replStatus = _swig_property(_irods.dataObjSqlResult_t_replStatus_get, _irods.dataObjSqlResult_t_replStatus_set)
    __swig_setmethods__["dataId"] = _irods.dataObjSqlResult_t_dataId_set
    __swig_getmethods__["dataId"] = _irods.dataObjSqlResult_t_dataId_get
    if _newclass:dataId = _swig_property(_irods.dataObjSqlResult_t_dataId_get, _irods.dataObjSqlResult_t_dataId_set)
    __swig_setmethods__["resource"] = _irods.dataObjSqlResult_t_resource_set
    __swig_getmethods__["resource"] = _irods.dataObjSqlResult_t_resource_get
    if _newclass:resource = _swig_property(_irods.dataObjSqlResult_t_resource_get, _irods.dataObjSqlResult_t_resource_set)
    __swig_setmethods__["phyPath"] = _irods.dataObjSqlResult_t_phyPath_set
    __swig_getmethods__["phyPath"] = _irods.dataObjSqlResult_t_phyPath_get
    if _newclass:phyPath = _swig_property(_irods.dataObjSqlResult_t_phyPath_get, _irods.dataObjSqlResult_t_phyPath_set)
    __swig_setmethods__["ownerName"] = _irods.dataObjSqlResult_t_ownerName_set
    __swig_getmethods__["ownerName"] = _irods.dataObjSqlResult_t_ownerName_get
    if _newclass:ownerName = _swig_property(_irods.dataObjSqlResult_t_ownerName_get, _irods.dataObjSqlResult_t_ownerName_set)
    __swig_setmethods__["replNum"] = _irods.dataObjSqlResult_t_replNum_set
    __swig_getmethods__["replNum"] = _irods.dataObjSqlResult_t_replNum_get
    if _newclass:replNum = _swig_property(_irods.dataObjSqlResult_t_replNum_get, _irods.dataObjSqlResult_t_replNum_set)
    __swig_setmethods__["rescGrp"] = _irods.dataObjSqlResult_t_rescGrp_set
    __swig_getmethods__["rescGrp"] = _irods.dataObjSqlResult_t_rescGrp_get
    if _newclass:rescGrp = _swig_property(_irods.dataObjSqlResult_t_rescGrp_get, _irods.dataObjSqlResult_t_rescGrp_set)
    __swig_setmethods__["dataType"] = _irods.dataObjSqlResult_t_dataType_set
    __swig_getmethods__["dataType"] = _irods.dataObjSqlResult_t_dataType_get
    if _newclass:dataType = _swig_property(_irods.dataObjSqlResult_t_dataType_get, _irods.dataObjSqlResult_t_dataType_set)
    def __init__(self): 
        this = _irods.new_dataObjSqlResult_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_dataObjSqlResult_t
    __del__ = lambda self : None;
dataObjSqlResult_t_swigregister = _irods.dataObjSqlResult_t_swigregister
dataObjSqlResult_t_swigregister(dataObjSqlResult_t)

class queryHandle_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, queryHandle_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, queryHandle_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["conn"] = _irods.queryHandle_t_conn_set
    __swig_getmethods__["conn"] = _irods.queryHandle_t_conn_get
    if _newclass:conn = _swig_property(_irods.queryHandle_t_conn_get, _irods.queryHandle_t_conn_set)
    __swig_setmethods__["connType"] = _irods.queryHandle_t_connType_set
    __swig_getmethods__["connType"] = _irods.queryHandle_t_connType_get
    if _newclass:connType = _swig_property(_irods.queryHandle_t_connType_get, _irods.queryHandle_t_connType_set)
    __swig_setmethods__["querySpecColl"] = _irods.queryHandle_t_querySpecColl_set
    __swig_getmethods__["querySpecColl"] = _irods.queryHandle_t_querySpecColl_get
    if _newclass:querySpecColl = _swig_property(_irods.queryHandle_t_querySpecColl_get, _irods.queryHandle_t_querySpecColl_set)
    __swig_setmethods__["genQuery"] = _irods.queryHandle_t_genQuery_set
    __swig_getmethods__["genQuery"] = _irods.queryHandle_t_genQuery_get
    if _newclass:genQuery = _swig_property(_irods.queryHandle_t_genQuery_get, _irods.queryHandle_t_genQuery_set)
    def __init__(self): 
        this = _irods.new_queryHandle_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_queryHandle_t
    __del__ = lambda self : None;
queryHandle_t_swigregister = _irods.queryHandle_t_swigregister
queryHandle_t_swigregister(queryHandle_t)


def getRodsObjType(*args):
  return _irods.getRodsObjType(*args)
getRodsObjType = _irods.getRodsObjType

def mkColl(*args):
  return _irods.mkColl(*args)
mkColl = _irods.mkColl

def mkCollR(*args):
  return _irods.mkCollR(*args)
mkCollR = _irods.mkCollR

def mkdirR(*args):
  return _irods.mkdirR(*args)
mkdirR = _irods.mkdirR

def myChmod(*args):
  return _irods.myChmod(*args)
myChmod = _irods.myChmod

def queryCollAcl(*args):
  return _irods.queryCollAcl(*args)
queryCollAcl = _irods.queryCollAcl

def queryCollAclSpecific(*args):
  return _irods.queryCollAclSpecific(*args)
queryCollAclSpecific = _irods.queryCollAclSpecific

def queryCollInColl(*args):
  return _irods.queryCollInColl(*args)
queryCollInColl = _irods.queryCollInColl

def queryCollInheritance(*args):
  return _irods.queryCollInheritance(*args)
queryCollInheritance = _irods.queryCollInheritance

def queryDataObjInColl(*args):
  return _irods.queryDataObjInColl(*args)
queryDataObjInColl = _irods.queryDataObjInColl

def queryDataObjAcl(*args):
  return _irods.queryDataObjAcl(*args)
queryDataObjAcl = _irods.queryDataObjAcl

def rclCloseCollection(*args):
  return _irods.rclCloseCollection(*args)
rclCloseCollection = _irods.rclCloseCollection

def rclInitQueryHandle(*args):
  return _irods.rclInitQueryHandle(*args)
rclInitQueryHandle = _irods.rclInitQueryHandle

def rclOpenCollection(*args):
  return _irods.rclOpenCollection(*args)
rclOpenCollection = _irods.rclOpenCollection
def rclOpenCollection(conn, collection, flag):
    collHandle = collHandle_t()
    status = _irods.rclOpenCollection(conn, collection, flag, collHandle)
    return (status, collHandle)


def rclReadCollection(*args):
  return _irods.rclReadCollection(*args)
rclReadCollection = _irods.rclReadCollection

def setQueryFlag(*args):
  return _irods.setQueryFlag(*args)
setQueryFlag = _irods.setQueryFlag

def setQueryInpForData(*args):
  return _irods.setQueryInpForData(*args)
setQueryInpForData = _irods.setQueryInpForData
class modAccessControlInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, modAccessControlInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, modAccessControlInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["recursiveFlag"] = _irods.modAccessControlInp_t_recursiveFlag_set
    __swig_getmethods__["recursiveFlag"] = _irods.modAccessControlInp_t_recursiveFlag_get
    if _newclass:recursiveFlag = _swig_property(_irods.modAccessControlInp_t_recursiveFlag_get, _irods.modAccessControlInp_t_recursiveFlag_set)
    __swig_setmethods__["accessLevel"] = _irods.modAccessControlInp_t_accessLevel_set
    __swig_getmethods__["accessLevel"] = _irods.modAccessControlInp_t_accessLevel_get
    if _newclass:accessLevel = _swig_property(_irods.modAccessControlInp_t_accessLevel_get, _irods.modAccessControlInp_t_accessLevel_set)
    __swig_setmethods__["userName"] = _irods.modAccessControlInp_t_userName_set
    __swig_getmethods__["userName"] = _irods.modAccessControlInp_t_userName_get
    if _newclass:userName = _swig_property(_irods.modAccessControlInp_t_userName_get, _irods.modAccessControlInp_t_userName_set)
    __swig_setmethods__["zone"] = _irods.modAccessControlInp_t_zone_set
    __swig_getmethods__["zone"] = _irods.modAccessControlInp_t_zone_get
    if _newclass:zone = _swig_property(_irods.modAccessControlInp_t_zone_get, _irods.modAccessControlInp_t_zone_set)
    __swig_setmethods__["path"] = _irods.modAccessControlInp_t_path_set
    __swig_getmethods__["path"] = _irods.modAccessControlInp_t_path_get
    if _newclass:path = _swig_property(_irods.modAccessControlInp_t_path_get, _irods.modAccessControlInp_t_path_set)
    def __init__(self): 
        this = _irods.new_modAccessControlInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_modAccessControlInp_t
    __del__ = lambda self : None;
modAccessControlInp_t_swigregister = _irods.modAccessControlInp_t_swigregister
modAccessControlInp_t_swigregister(modAccessControlInp_t)


def rcModAccessControl(*args):
  return _irods.rcModAccessControl(*args)
rcModAccessControl = _irods.rcModAccessControl
class msParam_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msParam_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msParam_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _irods.msParam_t_label_set
    __swig_getmethods__["label"] = _irods.msParam_t_label_get
    if _newclass:label = _swig_property(_irods.msParam_t_label_get, _irods.msParam_t_label_set)
    __swig_setmethods__["type"] = _irods.msParam_t_type_set
    __swig_getmethods__["type"] = _irods.msParam_t_type_get
    if _newclass:type = _swig_property(_irods.msParam_t_type_get, _irods.msParam_t_type_set)
    __swig_setmethods__["inOutStruct"] = _irods.msParam_t_inOutStruct_set
    __swig_getmethods__["inOutStruct"] = _irods.msParam_t_inOutStruct_get
    if _newclass:inOutStruct = _swig_property(_irods.msParam_t_inOutStruct_get, _irods.msParam_t_inOutStruct_set)
    __swig_setmethods__["inpOutBuf"] = _irods.msParam_t_inpOutBuf_set
    __swig_getmethods__["inpOutBuf"] = _irods.msParam_t_inpOutBuf_get
    if _newclass:inpOutBuf = _swig_property(_irods.msParam_t_inpOutBuf_get, _irods.msParam_t_inpOutBuf_set)
    def getInOutAsExecCmdOut(self): return _irods.msParam_t_getInOutAsExecCmdOut(self)
    def getInOutAsChar(self): return _irods.msParam_t_getInOutAsChar(self)
    def getInOutAsInt(self): return _irods.msParam_t_getInOutAsInt(self)
    def getInOutAsDouble(self): return _irods.msParam_t_getInOutAsDouble(self)
    def getInOutAsKeyValPair(self): return _irods.msParam_t_getInOutAsKeyValPair(self)
    def getInOutAsTagStruct(self): return _irods.msParam_t_getInOutAsTagStruct(self)
    def __init__(self): 
        this = _irods.new_msParam_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_msParam_t
    __del__ = lambda self : None;
msParam_t_swigregister = _irods.msParam_t_swigregister
msParam_t_swigregister(msParam_t)

class msParamArray_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msParamArray_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msParamArray_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _irods.msParamArray_t_len_set
    __swig_getmethods__["len"] = _irods.msParamArray_t_len_get
    if _newclass:len = _swig_property(_irods.msParamArray_t_len_get, _irods.msParamArray_t_len_set)
    __swig_setmethods__["oprType"] = _irods.msParamArray_t_oprType_set
    __swig_getmethods__["oprType"] = _irods.msParamArray_t_oprType_get
    if _newclass:oprType = _swig_property(_irods.msParamArray_t_oprType_get, _irods.msParamArray_t_oprType_set)
    __swig_setmethods__["msParam"] = _irods.msParamArray_t_msParam_set
    __swig_getmethods__["msParam"] = _irods.msParamArray_t_msParam_get
    if _newclass:msParam = _swig_property(_irods.msParamArray_t_msParam_get, _irods.msParamArray_t_msParam_set)
    def getMsParam(self, *args): return _irods.msParamArray_t_getMsParam(self, *args)
    def __init__(self): 
        this = _irods.new_msParamArray_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_msParamArray_t
    __del__ = lambda self : None;
msParamArray_t_swigregister = _irods.msParamArray_t_swigregister
msParamArray_t_swigregister(msParamArray_t)


def addMsParamToArray(*args):
  return _irods.addMsParamToArray(*args)
addMsParamToArray = _irods.addMsParamToArray

def addCharParamToArray(*args):
  return _irods.addCharParamToArray(*args)
addCharParamToArray = _irods.addCharParamToArray

def addDoubleParamToArray(*args):
  return _irods.addDoubleParamToArray(*args)
addDoubleParamToArray = _irods.addDoubleParamToArray

def addKeyValParamToArray(*args):
  return _irods.addKeyValParamToArray(*args)
addKeyValParamToArray = _irods.addKeyValParamToArray

def addTagStructParamToArray(*args):
  return _irods.addTagStructParamToArray(*args)
addTagStructParamToArray = _irods.addTagStructParamToArray

def addIntParamToArray(*args):
  return _irods.addIntParamToArray(*args)
addIntParamToArray = _irods.addIntParamToArray

def fillBufLenInMsParam(*args):
  return _irods.fillBufLenInMsParam(*args)
fillBufLenInMsParam = _irods.fillBufLenInMsParam

def fillCharInMsParam(*args):
  return _irods.fillCharInMsParam(*args)
fillCharInMsParam = _irods.fillCharInMsParam

def fillDoubleInMsParam(*args):
  return _irods.fillDoubleInMsParam(*args)
fillDoubleInMsParam = _irods.fillDoubleInMsParam

def fillFloatInMsParam(*args):
  return _irods.fillFloatInMsParam(*args)
fillFloatInMsParam = _irods.fillFloatInMsParam

def fillIntInMsParam(*args):
  return _irods.fillIntInMsParam(*args)
fillIntInMsParam = _irods.fillIntInMsParam

def fillStrInMsParam(*args):
  return _irods.fillStrInMsParam(*args)
fillStrInMsParam = _irods.fillStrInMsParam

def getMsParamByLabel(*args):
  return _irods.getMsParamByLabel(*args)
getMsParamByLabel = _irods.getMsParamByLabel

def getMsParamByType(*args):
  return _irods.getMsParamByType(*args)
getMsParamByType = _irods.getMsParamByType

def parseMspForFloat(*args):
  return _irods.parseMspForFloat(*args)
parseMspForFloat = _irods.parseMspForFloat

def parseMspForPosInt(*args):
  return _irods.parseMspForPosInt(*args)
parseMspForPosInt = _irods.parseMspForPosInt

def parseMspForStr(*args):
  return _irods.parseMspForStr(*args)
parseMspForStr = _irods.parseMspForStr

def obfDecodeByKey(*args):
  return _irods.obfDecodeByKey(*args)
obfDecodeByKey = _irods.obfDecodeByKey

def obfDecodeByKeyV2(*args):
  return _irods.obfDecodeByKeyV2(*args)
obfDecodeByKeyV2 = _irods.obfDecodeByKeyV2

def obfEncodeByKey(*args):
  return _irods.obfEncodeByKey(*args)
obfEncodeByKey = _irods.obfEncodeByKey

def obfEncodeByKeyV2(*args):
  return _irods.obfEncodeByKeyV2(*args)
obfEncodeByKeyV2 = _irods.obfEncodeByKeyV2

def obfGetPw():
  return _irods.obfGetPw()
obfGetPw = _irods.obfGetPw

def obfiDecode(*args):
  return _irods.obfiDecode(*args)
obfiDecode = _irods.obfiDecode

def obfiEncode(*args):
  return _irods.obfiEncode(*args)
obfiEncode = _irods.obfiEncode

def obfiGetEnvKey():
  return _irods.obfiGetEnvKey()
obfiGetEnvKey = _irods.obfiGetEnvKey

def obfiGetPw(*args):
  return _irods.obfiGetPw(*args)
obfiGetPw = _irods.obfiGetPw

def obfiGetTv(*args):
  return _irods.obfiGetTv(*args)
obfiGetTv = _irods.obfiGetTv

def obfiOpenOutFile(*args):
  return _irods.obfiOpenOutFile(*args)
obfiOpenOutFile = _irods.obfiOpenOutFile

def obfiWritePw(*args):
  return _irods.obfiWritePw(*args)
obfiWritePw = _irods.obfiWritePw

def obfRmPw(*args):
  return _irods.obfRmPw(*args)
obfRmPw = _irods.obfRmPw

def obfSavePw(*args):
  return _irods.obfSavePw(*args)
obfSavePw = _irods.obfSavePw

def obfTempOps(*args):
  return _irods.obfTempOps(*args)
obfTempOps = _irods.obfTempOps
class rodsArguments_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rodsArguments_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rodsArguments_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["add"] = _irods.rodsArguments_t_add_set
    __swig_getmethods__["add"] = _irods.rodsArguments_t_add_get
    if _newclass:add = _swig_property(_irods.rodsArguments_t_add_get, _irods.rodsArguments_t_add_set)
    __swig_setmethods__["age"] = _irods.rodsArguments_t_age_set
    __swig_getmethods__["age"] = _irods.rodsArguments_t_age_get
    if _newclass:age = _swig_property(_irods.rodsArguments_t_age_get, _irods.rodsArguments_t_age_set)
    __swig_setmethods__["agevalue"] = _irods.rodsArguments_t_agevalue_set
    __swig_getmethods__["agevalue"] = _irods.rodsArguments_t_agevalue_get
    if _newclass:agevalue = _swig_property(_irods.rodsArguments_t_agevalue_get, _irods.rodsArguments_t_agevalue_set)
    __swig_setmethods__["all"] = _irods.rodsArguments_t_all_set
    __swig_getmethods__["all"] = _irods.rodsArguments_t_all_get
    if _newclass:all = _swig_property(_irods.rodsArguments_t_all_get, _irods.rodsArguments_t_all_set)
    __swig_setmethods__["accessControl"] = _irods.rodsArguments_t_accessControl_set
    __swig_getmethods__["accessControl"] = _irods.rodsArguments_t_accessControl_get
    if _newclass:accessControl = _swig_property(_irods.rodsArguments_t_accessControl_get, _irods.rodsArguments_t_accessControl_set)
    __swig_setmethods__["admin"] = _irods.rodsArguments_t_admin_set
    __swig_getmethods__["admin"] = _irods.rodsArguments_t_admin_get
    if _newclass:admin = _swig_property(_irods.rodsArguments_t_admin_get, _irods.rodsArguments_t_admin_set)
    __swig_setmethods__["ascitime"] = _irods.rodsArguments_t_ascitime_set
    __swig_getmethods__["ascitime"] = _irods.rodsArguments_t_ascitime_get
    if _newclass:ascitime = _swig_property(_irods.rodsArguments_t_ascitime_get, _irods.rodsArguments_t_ascitime_set)
    __swig_setmethods__["attr"] = _irods.rodsArguments_t_attr_set
    __swig_getmethods__["attr"] = _irods.rodsArguments_t_attr_get
    if _newclass:attr = _swig_property(_irods.rodsArguments_t_attr_get, _irods.rodsArguments_t_attr_set)
    __swig_setmethods__["noattr"] = _irods.rodsArguments_t_noattr_set
    __swig_getmethods__["noattr"] = _irods.rodsArguments_t_noattr_get
    if _newclass:noattr = _swig_property(_irods.rodsArguments_t_noattr_get, _irods.rodsArguments_t_noattr_set)
    __swig_setmethods__["attrStr"] = _irods.rodsArguments_t_attrStr_set
    __swig_getmethods__["attrStr"] = _irods.rodsArguments_t_attrStr_get
    if _newclass:attrStr = _swig_property(_irods.rodsArguments_t_attrStr_get, _irods.rodsArguments_t_attrStr_set)
    __swig_setmethods__["bulk"] = _irods.rodsArguments_t_bulk_set
    __swig_getmethods__["bulk"] = _irods.rodsArguments_t_bulk_get
    if _newclass:bulk = _swig_property(_irods.rodsArguments_t_bulk_get, _irods.rodsArguments_t_bulk_set)
    __swig_setmethods__["backupMode"] = _irods.rodsArguments_t_backupMode_set
    __swig_getmethods__["backupMode"] = _irods.rodsArguments_t_backupMode_get
    if _newclass:backupMode = _swig_property(_irods.rodsArguments_t_backupMode_get, _irods.rodsArguments_t_backupMode_set)
    __swig_setmethods__["condition"] = _irods.rodsArguments_t_condition_set
    __swig_getmethods__["condition"] = _irods.rodsArguments_t_condition_get
    if _newclass:condition = _swig_property(_irods.rodsArguments_t_condition_get, _irods.rodsArguments_t_condition_set)
    __swig_setmethods__["conditionString"] = _irods.rodsArguments_t_conditionString_set
    __swig_getmethods__["conditionString"] = _irods.rodsArguments_t_conditionString_get
    if _newclass:conditionString = _swig_property(_irods.rodsArguments_t_conditionString_get, _irods.rodsArguments_t_conditionString_set)
    __swig_setmethods__["collection"] = _irods.rodsArguments_t_collection_set
    __swig_getmethods__["collection"] = _irods.rodsArguments_t_collection_get
    if _newclass:collection = _swig_property(_irods.rodsArguments_t_collection_get, _irods.rodsArguments_t_collection_set)
    __swig_setmethods__["collectionString"] = _irods.rodsArguments_t_collectionString_set
    __swig_getmethods__["collectionString"] = _irods.rodsArguments_t_collectionString_get
    if _newclass:collectionString = _swig_property(_irods.rodsArguments_t_collectionString_get, _irods.rodsArguments_t_collectionString_set)
    __swig_setmethods__["dataObjects"] = _irods.rodsArguments_t_dataObjects_set
    __swig_getmethods__["dataObjects"] = _irods.rodsArguments_t_dataObjects_get
    if _newclass:dataObjects = _swig_property(_irods.rodsArguments_t_dataObjects_get, _irods.rodsArguments_t_dataObjects_set)
    __swig_setmethods__["dim"] = _irods.rodsArguments_t_dim_set
    __swig_getmethods__["dim"] = _irods.rodsArguments_t_dim_get
    if _newclass:dim = _swig_property(_irods.rodsArguments_t_dim_get, _irods.rodsArguments_t_dim_set)
    __swig_setmethods__["dryrun"] = _irods.rodsArguments_t_dryrun_set
    __swig_getmethods__["dryrun"] = _irods.rodsArguments_t_dryrun_get
    if _newclass:dryrun = _swig_property(_irods.rodsArguments_t_dryrun_get, _irods.rodsArguments_t_dryrun_set)
    __swig_setmethods__["echo"] = _irods.rodsArguments_t_echo_set
    __swig_getmethods__["echo"] = _irods.rodsArguments_t_echo_get
    if _newclass:echo = _swig_property(_irods.rodsArguments_t_echo_get, _irods.rodsArguments_t_echo_set)
    __swig_setmethods__["empty"] = _irods.rodsArguments_t_empty_set
    __swig_getmethods__["empty"] = _irods.rodsArguments_t_empty_get
    if _newclass:empty = _swig_property(_irods.rodsArguments_t_empty_get, _irods.rodsArguments_t_empty_set)
    __swig_setmethods__["force"] = _irods.rodsArguments_t_force_set
    __swig_getmethods__["force"] = _irods.rodsArguments_t_force_get
    if _newclass:force = _swig_property(_irods.rodsArguments_t_force_get, _irods.rodsArguments_t_force_set)
    __swig_setmethods__["file"] = _irods.rodsArguments_t_file_set
    __swig_getmethods__["file"] = _irods.rodsArguments_t_file_get
    if _newclass:file = _swig_property(_irods.rodsArguments_t_file_get, _irods.rodsArguments_t_file_set)
    __swig_setmethods__["fileString"] = _irods.rodsArguments_t_fileString_set
    __swig_getmethods__["fileString"] = _irods.rodsArguments_t_fileString_get
    if _newclass:fileString = _swig_property(_irods.rodsArguments_t_fileString_get, _irods.rodsArguments_t_fileString_set)
    __swig_setmethods__["rescGroup"] = _irods.rodsArguments_t_rescGroup_set
    __swig_getmethods__["rescGroup"] = _irods.rodsArguments_t_rescGroup_get
    if _newclass:rescGroup = _swig_property(_irods.rodsArguments_t_rescGroup_get, _irods.rodsArguments_t_rescGroup_set)
    __swig_setmethods__["rescGroupString"] = _irods.rodsArguments_t_rescGroupString_set
    __swig_getmethods__["rescGroupString"] = _irods.rodsArguments_t_rescGroupString_get
    if _newclass:rescGroupString = _swig_property(_irods.rodsArguments_t_rescGroupString_get, _irods.rodsArguments_t_rescGroupString_set)
    __swig_setmethods__["header"] = _irods.rodsArguments_t_header_set
    __swig_getmethods__["header"] = _irods.rodsArguments_t_header_get
    if _newclass:header = _swig_property(_irods.rodsArguments_t_header_get, _irods.rodsArguments_t_header_set)
    __swig_setmethods__["help"] = _irods.rodsArguments_t_help_set
    __swig_getmethods__["help"] = _irods.rodsArguments_t_help_get
    if _newclass:help = _swig_property(_irods.rodsArguments_t_help_get, _irods.rodsArguments_t_help_set)
    __swig_setmethods__["hostAddr"] = _irods.rodsArguments_t_hostAddr_set
    __swig_getmethods__["hostAddr"] = _irods.rodsArguments_t_hostAddr_get
    if _newclass:hostAddr = _swig_property(_irods.rodsArguments_t_hostAddr_get, _irods.rodsArguments_t_hostAddr_set)
    __swig_setmethods__["hostAddrString"] = _irods.rodsArguments_t_hostAddrString_set
    __swig_getmethods__["hostAddrString"] = _irods.rodsArguments_t_hostAddrString_get
    if _newclass:hostAddrString = _swig_property(_irods.rodsArguments_t_hostAddrString_get, _irods.rodsArguments_t_hostAddrString_set)
    __swig_setmethods__["input"] = _irods.rodsArguments_t_input_set
    __swig_getmethods__["input"] = _irods.rodsArguments_t_input_get
    if _newclass:input = _swig_property(_irods.rodsArguments_t_input_get, _irods.rodsArguments_t_input_set)
    __swig_setmethods__["redirectConn"] = _irods.rodsArguments_t_redirectConn_set
    __swig_getmethods__["redirectConn"] = _irods.rodsArguments_t_redirectConn_get
    if _newclass:redirectConn = _swig_property(_irods.rodsArguments_t_redirectConn_get, _irods.rodsArguments_t_redirectConn_set)
    __swig_setmethods__["checksum"] = _irods.rodsArguments_t_checksum_set
    __swig_getmethods__["checksum"] = _irods.rodsArguments_t_checksum_get
    if _newclass:checksum = _swig_property(_irods.rodsArguments_t_checksum_get, _irods.rodsArguments_t_checksum_set)
    __swig_setmethods__["verifyChecksum"] = _irods.rodsArguments_t_verifyChecksum_set
    __swig_getmethods__["verifyChecksum"] = _irods.rodsArguments_t_verifyChecksum_get
    if _newclass:verifyChecksum = _swig_property(_irods.rodsArguments_t_verifyChecksum_get, _irods.rodsArguments_t_verifyChecksum_set)
    __swig_setmethods__["dataType"] = _irods.rodsArguments_t_dataType_set
    __swig_getmethods__["dataType"] = _irods.rodsArguments_t_dataType_get
    if _newclass:dataType = _swig_property(_irods.rodsArguments_t_dataType_get, _irods.rodsArguments_t_dataType_set)
    __swig_setmethods__["dataTypeString"] = _irods.rodsArguments_t_dataTypeString_set
    __swig_getmethods__["dataTypeString"] = _irods.rodsArguments_t_dataTypeString_get
    if _newclass:dataTypeString = _swig_property(_irods.rodsArguments_t_dataTypeString_get, _irods.rodsArguments_t_dataTypeString_set)
    __swig_setmethods__["longOption"] = _irods.rodsArguments_t_longOption_set
    __swig_getmethods__["longOption"] = _irods.rodsArguments_t_longOption_get
    if _newclass:longOption = _swig_property(_irods.rodsArguments_t_longOption_get, _irods.rodsArguments_t_longOption_set)
    __swig_setmethods__["link"] = _irods.rodsArguments_t_link_set
    __swig_getmethods__["link"] = _irods.rodsArguments_t_link_get
    if _newclass:link = _swig_property(_irods.rodsArguments_t_link_get, _irods.rodsArguments_t_link_set)
    __swig_setmethods__["rlock"] = _irods.rodsArguments_t_rlock_set
    __swig_getmethods__["rlock"] = _irods.rodsArguments_t_rlock_get
    if _newclass:rlock = _swig_property(_irods.rodsArguments_t_rlock_get, _irods.rodsArguments_t_rlock_set)
    __swig_setmethods__["wlock"] = _irods.rodsArguments_t_wlock_set
    __swig_getmethods__["wlock"] = _irods.rodsArguments_t_wlock_get
    if _newclass:wlock = _swig_property(_irods.rodsArguments_t_wlock_get, _irods.rodsArguments_t_wlock_set)
    __swig_setmethods__["veryLongOption"] = _irods.rodsArguments_t_veryLongOption_set
    __swig_getmethods__["veryLongOption"] = _irods.rodsArguments_t_veryLongOption_get
    if _newclass:veryLongOption = _swig_property(_irods.rodsArguments_t_veryLongOption_get, _irods.rodsArguments_t_veryLongOption_set)
    __swig_setmethods__["mountCollection"] = _irods.rodsArguments_t_mountCollection_set
    __swig_getmethods__["mountCollection"] = _irods.rodsArguments_t_mountCollection_get
    if _newclass:mountCollection = _swig_property(_irods.rodsArguments_t_mountCollection_get, _irods.rodsArguments_t_mountCollection_set)
    __swig_setmethods__["mountType"] = _irods.rodsArguments_t_mountType_set
    __swig_getmethods__["mountType"] = _irods.rodsArguments_t_mountType_get
    if _newclass:mountType = _swig_property(_irods.rodsArguments_t_mountType_get, _irods.rodsArguments_t_mountType_set)
    __swig_setmethods__["replNum"] = _irods.rodsArguments_t_replNum_set
    __swig_getmethods__["replNum"] = _irods.rodsArguments_t_replNum_get
    if _newclass:replNum = _swig_property(_irods.rodsArguments_t_replNum_get, _irods.rodsArguments_t_replNum_set)
    __swig_setmethods__["replNumValue"] = _irods.rodsArguments_t_replNumValue_set
    __swig_getmethods__["replNumValue"] = _irods.rodsArguments_t_replNumValue_get
    if _newclass:replNumValue = _swig_property(_irods.rodsArguments_t_replNumValue_get, _irods.rodsArguments_t_replNumValue_set)
    __swig_setmethods__["noPage"] = _irods.rodsArguments_t_noPage_set
    __swig_getmethods__["noPage"] = _irods.rodsArguments_t_noPage_get
    if _newclass:noPage = _swig_property(_irods.rodsArguments_t_noPage_get, _irods.rodsArguments_t_noPage_set)
    __swig_setmethods__["number"] = _irods.rodsArguments_t_number_set
    __swig_getmethods__["number"] = _irods.rodsArguments_t_number_get
    if _newclass:number = _swig_property(_irods.rodsArguments_t_number_get, _irods.rodsArguments_t_number_set)
    __swig_setmethods__["numberValue"] = _irods.rodsArguments_t_numberValue_set
    __swig_getmethods__["numberValue"] = _irods.rodsArguments_t_numberValue_get
    if _newclass:numberValue = _swig_property(_irods.rodsArguments_t_numberValue_get, _irods.rodsArguments_t_numberValue_set)
    __swig_setmethods__["physicalPath"] = _irods.rodsArguments_t_physicalPath_set
    __swig_getmethods__["physicalPath"] = _irods.rodsArguments_t_physicalPath_get
    if _newclass:physicalPath = _swig_property(_irods.rodsArguments_t_physicalPath_get, _irods.rodsArguments_t_physicalPath_set)
    __swig_setmethods__["physicalPathString"] = _irods.rodsArguments_t_physicalPathString_set
    __swig_getmethods__["physicalPathString"] = _irods.rodsArguments_t_physicalPathString_get
    if _newclass:physicalPathString = _swig_property(_irods.rodsArguments_t_physicalPathString_get, _irods.rodsArguments_t_physicalPathString_set)
    __swig_setmethods__["logicalPath"] = _irods.rodsArguments_t_logicalPath_set
    __swig_getmethods__["logicalPath"] = _irods.rodsArguments_t_logicalPath_get
    if _newclass:logicalPath = _swig_property(_irods.rodsArguments_t_logicalPath_get, _irods.rodsArguments_t_logicalPath_set)
    __swig_setmethods__["logicalPathString"] = _irods.rodsArguments_t_logicalPathString_set
    __swig_getmethods__["logicalPathString"] = _irods.rodsArguments_t_logicalPathString_get
    if _newclass:logicalPathString = _swig_property(_irods.rodsArguments_t_logicalPathString_get, _irods.rodsArguments_t_logicalPathString_set)
    __swig_setmethods__["progressFlag"] = _irods.rodsArguments_t_progressFlag_set
    __swig_getmethods__["progressFlag"] = _irods.rodsArguments_t_progressFlag_get
    if _newclass:progressFlag = _swig_property(_irods.rodsArguments_t_progressFlag_get, _irods.rodsArguments_t_progressFlag_set)
    __swig_setmethods__["option"] = _irods.rodsArguments_t_option_set
    __swig_getmethods__["option"] = _irods.rodsArguments_t_option_get
    if _newclass:option = _swig_property(_irods.rodsArguments_t_option_get, _irods.rodsArguments_t_option_set)
    __swig_setmethods__["optionString"] = _irods.rodsArguments_t_optionString_set
    __swig_getmethods__["optionString"] = _irods.rodsArguments_t_optionString_get
    if _newclass:optionString = _swig_property(_irods.rodsArguments_t_optionString_get, _irods.rodsArguments_t_optionString_set)
    __swig_setmethods__["orphan"] = _irods.rodsArguments_t_orphan_set
    __swig_getmethods__["orphan"] = _irods.rodsArguments_t_orphan_get
    if _newclass:orphan = _swig_property(_irods.rodsArguments_t_orphan_get, _irods.rodsArguments_t_orphan_set)
    __swig_setmethods__["purgeCache"] = _irods.rodsArguments_t_purgeCache_set
    __swig_getmethods__["purgeCache"] = _irods.rodsArguments_t_purgeCache_get
    if _newclass:purgeCache = _swig_property(_irods.rodsArguments_t_purgeCache_get, _irods.rodsArguments_t_purgeCache_set)
    __swig_setmethods__["bundle"] = _irods.rodsArguments_t_bundle_set
    __swig_getmethods__["bundle"] = _irods.rodsArguments_t_bundle_get
    if _newclass:bundle = _swig_property(_irods.rodsArguments_t_bundle_get, _irods.rodsArguments_t_bundle_set)
    __swig_setmethods__["prompt"] = _irods.rodsArguments_t_prompt_set
    __swig_getmethods__["prompt"] = _irods.rodsArguments_t_prompt_get
    if _newclass:prompt = _swig_property(_irods.rodsArguments_t_prompt_get, _irods.rodsArguments_t_prompt_set)
    __swig_setmethods__["query"] = _irods.rodsArguments_t_query_set
    __swig_getmethods__["query"] = _irods.rodsArguments_t_query_get
    if _newclass:query = _swig_property(_irods.rodsArguments_t_query_get, _irods.rodsArguments_t_query_set)
    __swig_setmethods__["queryStr"] = _irods.rodsArguments_t_queryStr_set
    __swig_getmethods__["queryStr"] = _irods.rodsArguments_t_queryStr_get
    if _newclass:queryStr = _swig_property(_irods.rodsArguments_t_queryStr_get, _irods.rodsArguments_t_queryStr_set)
    __swig_setmethods__["rbudp"] = _irods.rodsArguments_t_rbudp_set
    __swig_getmethods__["rbudp"] = _irods.rodsArguments_t_rbudp_get
    if _newclass:rbudp = _swig_property(_irods.rodsArguments_t_rbudp_get, _irods.rodsArguments_t_rbudp_set)
    __swig_setmethods__["reg"] = _irods.rodsArguments_t_reg_set
    __swig_getmethods__["reg"] = _irods.rodsArguments_t_reg_get
    if _newclass:reg = _swig_property(_irods.rodsArguments_t_reg_get, _irods.rodsArguments_t_reg_set)
    __swig_setmethods__["recursive"] = _irods.rodsArguments_t_recursive_set
    __swig_getmethods__["recursive"] = _irods.rodsArguments_t_recursive_get
    if _newclass:recursive = _swig_property(_irods.rodsArguments_t_recursive_get, _irods.rodsArguments_t_recursive_set)
    __swig_setmethods__["resource"] = _irods.rodsArguments_t_resource_set
    __swig_getmethods__["resource"] = _irods.rodsArguments_t_resource_get
    if _newclass:resource = _swig_property(_irods.rodsArguments_t_resource_get, _irods.rodsArguments_t_resource_set)
    __swig_setmethods__["resourceString"] = _irods.rodsArguments_t_resourceString_set
    __swig_getmethods__["resourceString"] = _irods.rodsArguments_t_resourceString_get
    if _newclass:resourceString = _swig_property(_irods.rodsArguments_t_resourceString_get, _irods.rodsArguments_t_resourceString_set)
    __swig_setmethods__["remove"] = _irods.rodsArguments_t_remove_set
    __swig_getmethods__["remove"] = _irods.rodsArguments_t_remove_get
    if _newclass:remove = _swig_property(_irods.rodsArguments_t_remove_get, _irods.rodsArguments_t_remove_set)
    __swig_setmethods__["sizeFlag"] = _irods.rodsArguments_t_sizeFlag_set
    __swig_getmethods__["sizeFlag"] = _irods.rodsArguments_t_sizeFlag_get
    if _newclass:sizeFlag = _swig_property(_irods.rodsArguments_t_sizeFlag_get, _irods.rodsArguments_t_sizeFlag_set)
    __swig_setmethods__["size"] = _irods.rodsArguments_t_size_set
    __swig_getmethods__["size"] = _irods.rodsArguments_t_size_get
    if _newclass:size = _swig_property(_irods.rodsArguments_t_size_get, _irods.rodsArguments_t_size_set)
    __swig_setmethods__["srcResc"] = _irods.rodsArguments_t_srcResc_set
    __swig_getmethods__["srcResc"] = _irods.rodsArguments_t_srcResc_get
    if _newclass:srcResc = _swig_property(_irods.rodsArguments_t_srcResc_get, _irods.rodsArguments_t_srcResc_set)
    __swig_setmethods__["srcRescString"] = _irods.rodsArguments_t_srcRescString_set
    __swig_getmethods__["srcRescString"] = _irods.rodsArguments_t_srcRescString_get
    if _newclass:srcRescString = _swig_property(_irods.rodsArguments_t_srcRescString_get, _irods.rodsArguments_t_srcRescString_set)
    __swig_setmethods__["subset"] = _irods.rodsArguments_t_subset_set
    __swig_getmethods__["subset"] = _irods.rodsArguments_t_subset_get
    if _newclass:subset = _swig_property(_irods.rodsArguments_t_subset_get, _irods.rodsArguments_t_subset_set)
    __swig_setmethods__["subsetByVal"] = _irods.rodsArguments_t_subsetByVal_set
    __swig_getmethods__["subsetByVal"] = _irods.rodsArguments_t_subsetByVal_get
    if _newclass:subsetByVal = _swig_property(_irods.rodsArguments_t_subsetByVal_get, _irods.rodsArguments_t_subsetByVal_set)
    __swig_setmethods__["subsetStr"] = _irods.rodsArguments_t_subsetStr_set
    __swig_getmethods__["subsetStr"] = _irods.rodsArguments_t_subsetStr_get
    if _newclass:subsetStr = _swig_property(_irods.rodsArguments_t_subsetStr_get, _irods.rodsArguments_t_subsetStr_set)
    __swig_setmethods__["test"] = _irods.rodsArguments_t_test_set
    __swig_getmethods__["test"] = _irods.rodsArguments_t_test_get
    if _newclass:test = _swig_property(_irods.rodsArguments_t_test_get, _irods.rodsArguments_t_test_set)
    __swig_setmethods__["ticket"] = _irods.rodsArguments_t_ticket_set
    __swig_getmethods__["ticket"] = _irods.rodsArguments_t_ticket_get
    if _newclass:ticket = _swig_property(_irods.rodsArguments_t_ticket_get, _irods.rodsArguments_t_ticket_set)
    __swig_setmethods__["ticketString"] = _irods.rodsArguments_t_ticketString_set
    __swig_getmethods__["ticketString"] = _irods.rodsArguments_t_ticketString_get
    if _newclass:ticketString = _swig_property(_irods.rodsArguments_t_ticketString_get, _irods.rodsArguments_t_ticketString_set)
    __swig_setmethods__["reconnect"] = _irods.rodsArguments_t_reconnect_set
    __swig_getmethods__["reconnect"] = _irods.rodsArguments_t_reconnect_get
    if _newclass:reconnect = _swig_property(_irods.rodsArguments_t_reconnect_get, _irods.rodsArguments_t_reconnect_set)
    __swig_setmethods__["user"] = _irods.rodsArguments_t_user_set
    __swig_getmethods__["user"] = _irods.rodsArguments_t_user_get
    if _newclass:user = _swig_property(_irods.rodsArguments_t_user_get, _irods.rodsArguments_t_user_set)
    __swig_setmethods__["userString"] = _irods.rodsArguments_t_userString_set
    __swig_getmethods__["userString"] = _irods.rodsArguments_t_userString_get
    if _newclass:userString = _swig_property(_irods.rodsArguments_t_userString_get, _irods.rodsArguments_t_userString_set)
    __swig_setmethods__["unmount"] = _irods.rodsArguments_t_unmount_set
    __swig_getmethods__["unmount"] = _irods.rodsArguments_t_unmount_get
    if _newclass:unmount = _swig_property(_irods.rodsArguments_t_unmount_get, _irods.rodsArguments_t_unmount_set)
    __swig_setmethods__["verbose"] = _irods.rodsArguments_t_verbose_set
    __swig_getmethods__["verbose"] = _irods.rodsArguments_t_verbose_get
    if _newclass:verbose = _swig_property(_irods.rodsArguments_t_verbose_get, _irods.rodsArguments_t_verbose_set)
    __swig_setmethods__["veryVerbose"] = _irods.rodsArguments_t_veryVerbose_set
    __swig_getmethods__["veryVerbose"] = _irods.rodsArguments_t_veryVerbose_get
    if _newclass:veryVerbose = _swig_property(_irods.rodsArguments_t_veryVerbose_get, _irods.rodsArguments_t_veryVerbose_set)
    __swig_setmethods__["zone"] = _irods.rodsArguments_t_zone_set
    __swig_getmethods__["zone"] = _irods.rodsArguments_t_zone_get
    if _newclass:zone = _swig_property(_irods.rodsArguments_t_zone_get, _irods.rodsArguments_t_zone_set)
    __swig_setmethods__["zoneName"] = _irods.rodsArguments_t_zoneName_set
    __swig_getmethods__["zoneName"] = _irods.rodsArguments_t_zoneName_get
    if _newclass:zoneName = _swig_property(_irods.rodsArguments_t_zoneName_get, _irods.rodsArguments_t_zoneName_set)
    __swig_setmethods__["verify"] = _irods.rodsArguments_t_verify_set
    __swig_getmethods__["verify"] = _irods.rodsArguments_t_verify_get
    if _newclass:verify = _swig_property(_irods.rodsArguments_t_verify_get, _irods.rodsArguments_t_verify_set)
    __swig_setmethods__["var"] = _irods.rodsArguments_t_var_set
    __swig_getmethods__["var"] = _irods.rodsArguments_t_var_get
    if _newclass:var = _swig_property(_irods.rodsArguments_t_var_get, _irods.rodsArguments_t_var_set)
    __swig_setmethods__["varStr"] = _irods.rodsArguments_t_varStr_set
    __swig_getmethods__["varStr"] = _irods.rodsArguments_t_varStr_get
    if _newclass:varStr = _swig_property(_irods.rodsArguments_t_varStr_get, _irods.rodsArguments_t_varStr_set)
    __swig_setmethods__["extract"] = _irods.rodsArguments_t_extract_set
    __swig_getmethods__["extract"] = _irods.rodsArguments_t_extract_get
    if _newclass:extract = _swig_property(_irods.rodsArguments_t_extract_get, _irods.rodsArguments_t_extract_set)
    __swig_setmethods__["restart"] = _irods.rodsArguments_t_restart_set
    __swig_getmethods__["restart"] = _irods.rodsArguments_t_restart_get
    if _newclass:restart = _swig_property(_irods.rodsArguments_t_restart_get, _irods.rodsArguments_t_restart_set)
    __swig_setmethods__["restartFileString"] = _irods.rodsArguments_t_restartFileString_set
    __swig_getmethods__["restartFileString"] = _irods.rodsArguments_t_restartFileString_get
    if _newclass:restartFileString = _swig_property(_irods.rodsArguments_t_restartFileString_get, _irods.rodsArguments_t_restartFileString_set)
    __swig_setmethods__["lfrestart"] = _irods.rodsArguments_t_lfrestart_set
    __swig_getmethods__["lfrestart"] = _irods.rodsArguments_t_lfrestart_get
    if _newclass:lfrestart = _swig_property(_irods.rodsArguments_t_lfrestart_get, _irods.rodsArguments_t_lfrestart_set)
    __swig_setmethods__["lfrestartFileString"] = _irods.rodsArguments_t_lfrestartFileString_set
    __swig_getmethods__["lfrestartFileString"] = _irods.rodsArguments_t_lfrestartFileString_get
    if _newclass:lfrestartFileString = _swig_property(_irods.rodsArguments_t_lfrestartFileString_get, _irods.rodsArguments_t_lfrestartFileString_set)
    __swig_setmethods__["version"] = _irods.rodsArguments_t_version_set
    __swig_getmethods__["version"] = _irods.rodsArguments_t_version_get
    if _newclass:version = _swig_property(_irods.rodsArguments_t_version_get, _irods.rodsArguments_t_version_set)
    __swig_setmethods__["retries"] = _irods.rodsArguments_t_retries_set
    __swig_getmethods__["retries"] = _irods.rodsArguments_t_retries_get
    if _newclass:retries = _swig_property(_irods.rodsArguments_t_retries_get, _irods.rodsArguments_t_retries_set)
    __swig_setmethods__["retriesValue"] = _irods.rodsArguments_t_retriesValue_set
    __swig_getmethods__["retriesValue"] = _irods.rodsArguments_t_retriesValue_get
    if _newclass:retriesValue = _swig_property(_irods.rodsArguments_t_retriesValue_get, _irods.rodsArguments_t_retriesValue_set)
    __swig_setmethods__["regRepl"] = _irods.rodsArguments_t_regRepl_set
    __swig_getmethods__["regRepl"] = _irods.rodsArguments_t_regRepl_get
    if _newclass:regRepl = _swig_property(_irods.rodsArguments_t_regRepl_get, _irods.rodsArguments_t_regRepl_set)
    __swig_setmethods__["excludeFile"] = _irods.rodsArguments_t_excludeFile_set
    __swig_getmethods__["excludeFile"] = _irods.rodsArguments_t_excludeFile_get
    if _newclass:excludeFile = _swig_property(_irods.rodsArguments_t_excludeFile_get, _irods.rodsArguments_t_excludeFile_set)
    __swig_setmethods__["excludeFileString"] = _irods.rodsArguments_t_excludeFileString_set
    __swig_getmethods__["excludeFileString"] = _irods.rodsArguments_t_excludeFileString_get
    if _newclass:excludeFileString = _swig_property(_irods.rodsArguments_t_excludeFileString_get, _irods.rodsArguments_t_excludeFileString_set)
    __swig_setmethods__["parallel"] = _irods.rodsArguments_t_parallel_set
    __swig_getmethods__["parallel"] = _irods.rodsArguments_t_parallel_get
    if _newclass:parallel = _swig_property(_irods.rodsArguments_t_parallel_get, _irods.rodsArguments_t_parallel_set)
    __swig_setmethods__["serial"] = _irods.rodsArguments_t_serial_set
    __swig_getmethods__["serial"] = _irods.rodsArguments_t_serial_get
    if _newclass:serial = _swig_property(_irods.rodsArguments_t_serial_get, _irods.rodsArguments_t_serial_set)
    __swig_setmethods__["masterIcat"] = _irods.rodsArguments_t_masterIcat_set
    __swig_getmethods__["masterIcat"] = _irods.rodsArguments_t_masterIcat_get
    if _newclass:masterIcat = _swig_property(_irods.rodsArguments_t_masterIcat_get, _irods.rodsArguments_t_masterIcat_set)
    __swig_setmethods__["silent"] = _irods.rodsArguments_t_silent_set
    __swig_getmethods__["silent"] = _irods.rodsArguments_t_silent_get
    if _newclass:silent = _swig_property(_irods.rodsArguments_t_silent_get, _irods.rodsArguments_t_silent_set)
    __swig_setmethods__["sql"] = _irods.rodsArguments_t_sql_set
    __swig_getmethods__["sql"] = _irods.rodsArguments_t_sql_get
    if _newclass:sql = _swig_property(_irods.rodsArguments_t_sql_get, _irods.rodsArguments_t_sql_set)
    __swig_setmethods__["optind"] = _irods.rodsArguments_t_optind_set
    __swig_getmethods__["optind"] = _irods.rodsArguments_t_optind_get
    if _newclass:optind = _swig_property(_irods.rodsArguments_t_optind_get, _irods.rodsArguments_t_optind_set)
    def __init__(self): 
        this = _irods.new_rodsArguments_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rodsArguments_t
    __del__ = lambda self : None;
rodsArguments_t_swigregister = _irods.rodsArguments_t_swigregister
rodsArguments_t_swigregister(rodsArguments_t)


def parseCmdLineOpt(*args):
  return _irods.parseCmdLineOpt(*args)
parseCmdLineOpt = _irods.parseCmdLineOpt
class rcComm_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rcComm_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rcComm_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["irodsProt"] = _irods.rcComm_t_irodsProt_set
    __swig_getmethods__["irodsProt"] = _irods.rcComm_t_irodsProt_get
    if _newclass:irodsProt = _swig_property(_irods.rcComm_t_irodsProt_get, _irods.rcComm_t_irodsProt_set)
    __swig_setmethods__["host"] = _irods.rcComm_t_host_set
    __swig_getmethods__["host"] = _irods.rcComm_t_host_get
    if _newclass:host = _swig_property(_irods.rcComm_t_host_get, _irods.rcComm_t_host_set)
    __swig_setmethods__["sock"] = _irods.rcComm_t_sock_set
    __swig_getmethods__["sock"] = _irods.rcComm_t_sock_get
    if _newclass:sock = _swig_property(_irods.rcComm_t_sock_get, _irods.rcComm_t_sock_set)
    __swig_setmethods__["portNum"] = _irods.rcComm_t_portNum_set
    __swig_getmethods__["portNum"] = _irods.rcComm_t_portNum_get
    if _newclass:portNum = _swig_property(_irods.rcComm_t_portNum_get, _irods.rcComm_t_portNum_set)
    __swig_setmethods__["loggedIn"] = _irods.rcComm_t_loggedIn_set
    __swig_getmethods__["loggedIn"] = _irods.rcComm_t_loggedIn_get
    if _newclass:loggedIn = _swig_property(_irods.rcComm_t_loggedIn_get, _irods.rcComm_t_loggedIn_set)
    __swig_setmethods__["localAddr"] = _irods.rcComm_t_localAddr_set
    __swig_getmethods__["localAddr"] = _irods.rcComm_t_localAddr_get
    if _newclass:localAddr = _swig_property(_irods.rcComm_t_localAddr_get, _irods.rcComm_t_localAddr_set)
    __swig_setmethods__["remoteAddr"] = _irods.rcComm_t_remoteAddr_set
    __swig_getmethods__["remoteAddr"] = _irods.rcComm_t_remoteAddr_get
    if _newclass:remoteAddr = _swig_property(_irods.rcComm_t_remoteAddr_get, _irods.rcComm_t_remoteAddr_set)
    __swig_setmethods__["proxyUser"] = _irods.rcComm_t_proxyUser_set
    __swig_getmethods__["proxyUser"] = _irods.rcComm_t_proxyUser_get
    if _newclass:proxyUser = _swig_property(_irods.rcComm_t_proxyUser_get, _irods.rcComm_t_proxyUser_set)
    __swig_setmethods__["clientUser"] = _irods.rcComm_t_clientUser_set
    __swig_getmethods__["clientUser"] = _irods.rcComm_t_clientUser_get
    if _newclass:clientUser = _swig_property(_irods.rcComm_t_clientUser_get, _irods.rcComm_t_clientUser_set)
    __swig_setmethods__["svrVersion"] = _irods.rcComm_t_svrVersion_set
    __swig_getmethods__["svrVersion"] = _irods.rcComm_t_svrVersion_get
    if _newclass:svrVersion = _swig_property(_irods.rcComm_t_svrVersion_get, _irods.rcComm_t_svrVersion_set)
    __swig_setmethods__["rError"] = _irods.rcComm_t_rError_set
    __swig_getmethods__["rError"] = _irods.rcComm_t_rError_get
    if _newclass:rError = _swig_property(_irods.rcComm_t_rError_get, _irods.rcComm_t_rError_set)
    __swig_setmethods__["flag"] = _irods.rcComm_t_flag_set
    __swig_getmethods__["flag"] = _irods.rcComm_t_flag_get
    if _newclass:flag = _swig_property(_irods.rcComm_t_flag_get, _irods.rcComm_t_flag_set)
    __swig_setmethods__["transStat"] = _irods.rcComm_t_transStat_set
    __swig_getmethods__["transStat"] = _irods.rcComm_t_transStat_get
    if _newclass:transStat = _swig_property(_irods.rcComm_t_transStat_get, _irods.rcComm_t_transStat_set)
    __swig_setmethods__["apiInx"] = _irods.rcComm_t_apiInx_set
    __swig_getmethods__["apiInx"] = _irods.rcComm_t_apiInx_get
    if _newclass:apiInx = _swig_property(_irods.rcComm_t_apiInx_get, _irods.rcComm_t_apiInx_set)
    __swig_setmethods__["status"] = _irods.rcComm_t_status_set
    __swig_getmethods__["status"] = _irods.rcComm_t_status_get
    if _newclass:status = _swig_property(_irods.rcComm_t_status_get, _irods.rcComm_t_status_set)
    __swig_setmethods__["windowSize"] = _irods.rcComm_t_windowSize_set
    __swig_getmethods__["windowSize"] = _irods.rcComm_t_windowSize_get
    if _newclass:windowSize = _swig_property(_irods.rcComm_t_windowSize_get, _irods.rcComm_t_windowSize_set)
    __swig_setmethods__["reconnectedSock"] = _irods.rcComm_t_reconnectedSock_set
    __swig_getmethods__["reconnectedSock"] = _irods.rcComm_t_reconnectedSock_get
    if _newclass:reconnectedSock = _swig_property(_irods.rcComm_t_reconnectedSock_get, _irods.rcComm_t_reconnectedSock_set)
    __swig_setmethods__["reconnTime"] = _irods.rcComm_t_reconnTime_set
    __swig_getmethods__["reconnTime"] = _irods.rcComm_t_reconnTime_get
    if _newclass:reconnTime = _swig_property(_irods.rcComm_t_reconnTime_get, _irods.rcComm_t_reconnTime_set)
    __swig_setmethods__["reconnThr"] = _irods.rcComm_t_reconnThr_set
    __swig_getmethods__["reconnThr"] = _irods.rcComm_t_reconnThr_get
    if _newclass:reconnThr = _swig_property(_irods.rcComm_t_reconnThr_get, _irods.rcComm_t_reconnThr_set)
    __swig_setmethods__["lock"] = _irods.rcComm_t_lock_set
    __swig_getmethods__["lock"] = _irods.rcComm_t_lock_get
    if _newclass:lock = _swig_property(_irods.rcComm_t_lock_get, _irods.rcComm_t_lock_set)
    __swig_setmethods__["cond"] = _irods.rcComm_t_cond_set
    __swig_getmethods__["cond"] = _irods.rcComm_t_cond_get
    if _newclass:cond = _swig_property(_irods.rcComm_t_cond_get, _irods.rcComm_t_cond_set)
    __swig_setmethods__["agentState"] = _irods.rcComm_t_agentState_set
    __swig_getmethods__["agentState"] = _irods.rcComm_t_agentState_get
    if _newclass:agentState = _swig_property(_irods.rcComm_t_agentState_get, _irods.rcComm_t_agentState_set)
    __swig_setmethods__["clientState"] = _irods.rcComm_t_clientState_set
    __swig_getmethods__["clientState"] = _irods.rcComm_t_clientState_get
    if _newclass:clientState = _swig_property(_irods.rcComm_t_clientState_get, _irods.rcComm_t_clientState_set)
    __swig_setmethods__["reconnThrState"] = _irods.rcComm_t_reconnThrState_set
    __swig_getmethods__["reconnThrState"] = _irods.rcComm_t_reconnThrState_get
    if _newclass:reconnThrState = _swig_property(_irods.rcComm_t_reconnThrState_get, _irods.rcComm_t_reconnThrState_set)
    __swig_setmethods__["operProgress"] = _irods.rcComm_t_operProgress_set
    __swig_getmethods__["operProgress"] = _irods.rcComm_t_operProgress_get
    if _newclass:operProgress = _swig_property(_irods.rcComm_t_operProgress_get, _irods.rcComm_t_operProgress_set)
    __swig_setmethods__["fileRestart"] = _irods.rcComm_t_fileRestart_set
    __swig_getmethods__["fileRestart"] = _irods.rcComm_t_fileRestart_get
    if _newclass:fileRestart = _swig_property(_irods.rcComm_t_fileRestart_get, _irods.rcComm_t_fileRestart_set)
    def disconnect(self): return _irods.rcComm_t_disconnect(self)
    def __init__(self): 
        this = _irods.new_rcComm_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rcComm_t
    __del__ = lambda self : None;
rcComm_t_swigregister = _irods.rcComm_t_swigregister
rcComm_t_swigregister(rcComm_t)


def clientLogin(*args):
  return _irods.clientLogin(*args)
clientLogin = _irods.clientLogin

def clientLoginWithPassword(*args):
  return _irods.clientLoginWithPassword(*args)
clientLoginWithPassword = _irods.clientLoginWithPassword

def clientLoginWithObfPassword(*args):
  return _irods.clientLoginWithObfPassword(*args)
clientLoginWithObfPassword = _irods.clientLoginWithObfPassword

def getSessionSignitureClientside():
  return _irods.getSessionSignitureClientside()
getSessionSignitureClientside = _irods.getSessionSignitureClientside

def rcConnect(*args):
  return _irods.rcConnect(*args)
rcConnect = _irods.rcConnect
def rcConnect(rodsHost, rodsPort, userName, rodsZone, reconnFlag=0):
    errMsg = rErrMsg_t()
    status = _irods.rcConnect(rodsHost, rodsPort, userName, rodsZone, reconnFlag, errMsg)
    return (status, errMsg)


def rcDisconnect(*args):
  return _irods.rcDisconnect(*args)
rcDisconnect = _irods.rcDisconnect

def addInxIval(*args):
  return _irods.addInxIval(*args)
addInxIval = _irods.addInxIval

def addInxVal(*args):
  return _irods.addInxVal(*args)
addInxVal = _irods.addInxVal

def addKeyVal(*args):
  return _irods.addKeyVal(*args)
addKeyVal = _irods.addKeyVal

def addTagStruct(*args):
  return _irods.addTagStruct(*args)
addTagStruct = _irods.addTagStruct

def chkStateForResume(*args):
  return _irods.chkStateForResume(*args)
chkStateForResume = _irods.chkStateForResume

def getLocalTimeFromRodsTime(*args):
  return _irods.getLocalTimeFromRodsTime(*args)
getLocalTimeFromRodsTime = _irods.getLocalTimeFromRodsTime

def getMountedSubPhyPath(*args):
  return _irods.getMountedSubPhyPath(*args)
getMountedSubPhyPath = _irods.getMountedSubPhyPath

def getSpecCollTypeStr(*args):
  return _irods.getSpecCollTypeStr(*args)
getSpecCollTypeStr = _irods.getSpecCollTypeStr

def getSqlResultByInx(*args):
  return _irods.getSqlResultByInx(*args)
getSqlResultByInx = _irods.getSqlResultByInx

def openRestartFile(*args):
  return _irods.openRestartFile(*args)
openRestartFile = _irods.openRestartFile

def parseUserName(*args):
  return _irods.parseUserName(*args)
parseUserName = _irods.parseUserName

def printError(*args):
  return _irods.printError(*args)
printError = _irods.printError

def printErrorStack(*args):
  return _irods.printErrorStack(*args)
printErrorStack = _irods.printErrorStack

def printReleaseInfo(*args):
  return _irods.printReleaseInfo(*args)
printReleaseInfo = _irods.printReleaseInfo

def procAndWrriteRestartFile(*args):
  return _irods.procAndWrriteRestartFile(*args)
procAndWrriteRestartFile = _irods.procAndWrriteRestartFile

def rcGetRemoteZoneResc(*args):
  return _irods.rcGetRemoteZoneResc(*args)
rcGetRemoteZoneResc = _irods.rcGetRemoteZoneResc

def rcGetTempPassword(*args):
  return _irods.rcGetTempPassword(*args)
rcGetTempPassword = _irods.rcGetTempPassword

def rcRmColl(*args):
  return _irods.rcRmColl(*args)
rcRmColl = _irods.rcRmColl

def resolveSpecCollType(*args):
  return _irods.resolveSpecCollType(*args)
resolveSpecCollType = _irods.resolveSpecCollType

def setStateForRestart(*args):
  return _irods.setStateForRestart(*args)
setStateForRestart = _irods.setStateForRestart
class generalAdminInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, generalAdminInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, generalAdminInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arg0"] = _irods.generalAdminInp_t_arg0_set
    __swig_getmethods__["arg0"] = _irods.generalAdminInp_t_arg0_get
    if _newclass:arg0 = _swig_property(_irods.generalAdminInp_t_arg0_get, _irods.generalAdminInp_t_arg0_set)
    __swig_setmethods__["arg1"] = _irods.generalAdminInp_t_arg1_set
    __swig_getmethods__["arg1"] = _irods.generalAdminInp_t_arg1_get
    if _newclass:arg1 = _swig_property(_irods.generalAdminInp_t_arg1_get, _irods.generalAdminInp_t_arg1_set)
    __swig_setmethods__["arg2"] = _irods.generalAdminInp_t_arg2_set
    __swig_getmethods__["arg2"] = _irods.generalAdminInp_t_arg2_get
    if _newclass:arg2 = _swig_property(_irods.generalAdminInp_t_arg2_get, _irods.generalAdminInp_t_arg2_set)
    __swig_setmethods__["arg3"] = _irods.generalAdminInp_t_arg3_set
    __swig_getmethods__["arg3"] = _irods.generalAdminInp_t_arg3_get
    if _newclass:arg3 = _swig_property(_irods.generalAdminInp_t_arg3_get, _irods.generalAdminInp_t_arg3_set)
    __swig_setmethods__["arg4"] = _irods.generalAdminInp_t_arg4_set
    __swig_getmethods__["arg4"] = _irods.generalAdminInp_t_arg4_get
    if _newclass:arg4 = _swig_property(_irods.generalAdminInp_t_arg4_get, _irods.generalAdminInp_t_arg4_set)
    __swig_setmethods__["arg5"] = _irods.generalAdminInp_t_arg5_set
    __swig_getmethods__["arg5"] = _irods.generalAdminInp_t_arg5_get
    if _newclass:arg5 = _swig_property(_irods.generalAdminInp_t_arg5_get, _irods.generalAdminInp_t_arg5_set)
    __swig_setmethods__["arg6"] = _irods.generalAdminInp_t_arg6_set
    __swig_getmethods__["arg6"] = _irods.generalAdminInp_t_arg6_get
    if _newclass:arg6 = _swig_property(_irods.generalAdminInp_t_arg6_get, _irods.generalAdminInp_t_arg6_set)
    __swig_setmethods__["arg7"] = _irods.generalAdminInp_t_arg7_set
    __swig_getmethods__["arg7"] = _irods.generalAdminInp_t_arg7_get
    if _newclass:arg7 = _swig_property(_irods.generalAdminInp_t_arg7_get, _irods.generalAdminInp_t_arg7_set)
    __swig_setmethods__["arg8"] = _irods.generalAdminInp_t_arg8_set
    __swig_getmethods__["arg8"] = _irods.generalAdminInp_t_arg8_get
    if _newclass:arg8 = _swig_property(_irods.generalAdminInp_t_arg8_get, _irods.generalAdminInp_t_arg8_set)
    __swig_setmethods__["arg9"] = _irods.generalAdminInp_t_arg9_set
    __swig_getmethods__["arg9"] = _irods.generalAdminInp_t_arg9_get
    if _newclass:arg9 = _swig_property(_irods.generalAdminInp_t_arg9_get, _irods.generalAdminInp_t_arg9_set)
    def __init__(self): 
        this = _irods.new_generalAdminInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_generalAdminInp_t
    __del__ = lambda self : None;
generalAdminInp_t_swigregister = _irods.generalAdminInp_t_swigregister
generalAdminInp_t_swigregister(generalAdminInp_t)

class userAdminInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, userAdminInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, userAdminInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arg0"] = _irods.userAdminInp_t_arg0_set
    __swig_getmethods__["arg0"] = _irods.userAdminInp_t_arg0_get
    if _newclass:arg0 = _swig_property(_irods.userAdminInp_t_arg0_get, _irods.userAdminInp_t_arg0_set)
    __swig_setmethods__["arg1"] = _irods.userAdminInp_t_arg1_set
    __swig_getmethods__["arg1"] = _irods.userAdminInp_t_arg1_get
    if _newclass:arg1 = _swig_property(_irods.userAdminInp_t_arg1_get, _irods.userAdminInp_t_arg1_set)
    __swig_setmethods__["arg2"] = _irods.userAdminInp_t_arg2_set
    __swig_getmethods__["arg2"] = _irods.userAdminInp_t_arg2_get
    if _newclass:arg2 = _swig_property(_irods.userAdminInp_t_arg2_get, _irods.userAdminInp_t_arg2_set)
    __swig_setmethods__["arg3"] = _irods.userAdminInp_t_arg3_set
    __swig_getmethods__["arg3"] = _irods.userAdminInp_t_arg3_get
    if _newclass:arg3 = _swig_property(_irods.userAdminInp_t_arg3_get, _irods.userAdminInp_t_arg3_set)
    __swig_setmethods__["arg4"] = _irods.userAdminInp_t_arg4_set
    __swig_getmethods__["arg4"] = _irods.userAdminInp_t_arg4_get
    if _newclass:arg4 = _swig_property(_irods.userAdminInp_t_arg4_get, _irods.userAdminInp_t_arg4_set)
    __swig_setmethods__["arg5"] = _irods.userAdminInp_t_arg5_set
    __swig_getmethods__["arg5"] = _irods.userAdminInp_t_arg5_get
    if _newclass:arg5 = _swig_property(_irods.userAdminInp_t_arg5_get, _irods.userAdminInp_t_arg5_set)
    __swig_setmethods__["arg6"] = _irods.userAdminInp_t_arg6_set
    __swig_getmethods__["arg6"] = _irods.userAdminInp_t_arg6_get
    if _newclass:arg6 = _swig_property(_irods.userAdminInp_t_arg6_get, _irods.userAdminInp_t_arg6_set)
    __swig_setmethods__["arg7"] = _irods.userAdminInp_t_arg7_set
    __swig_getmethods__["arg7"] = _irods.userAdminInp_t_arg7_get
    if _newclass:arg7 = _swig_property(_irods.userAdminInp_t_arg7_get, _irods.userAdminInp_t_arg7_set)
    __swig_setmethods__["arg8"] = _irods.userAdminInp_t_arg8_set
    __swig_getmethods__["arg8"] = _irods.userAdminInp_t_arg8_get
    if _newclass:arg8 = _swig_property(_irods.userAdminInp_t_arg8_get, _irods.userAdminInp_t_arg8_set)
    __swig_setmethods__["arg9"] = _irods.userAdminInp_t_arg9_set
    __swig_getmethods__["arg9"] = _irods.userAdminInp_t_arg9_get
    if _newclass:arg9 = _swig_property(_irods.userAdminInp_t_arg9_get, _irods.userAdminInp_t_arg9_set)
    def __init__(self): 
        this = _irods.new_userAdminInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_userAdminInp_t
    __del__ = lambda self : None;
userAdminInp_t_swigregister = _irods.userAdminInp_t_swigregister
userAdminInp_t_swigregister(userAdminInp_t)


def rcGeneralAdmin(*args):
  return _irods.rcGeneralAdmin(*args)
rcGeneralAdmin = _irods.rcGeneralAdmin

def rcUserAdmin(*args):
  return _irods.rcUserAdmin(*args)
rcUserAdmin = _irods.rcUserAdmin
class bytesBuf_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bytesBuf_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bytesBuf_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _irods.bytesBuf_t_len_set
    __swig_getmethods__["len"] = _irods.bytesBuf_t_len_get
    if _newclass:len = _swig_property(_irods.bytesBuf_t_len_get, _irods.bytesBuf_t_len_set)
    __swig_setmethods__["buf"] = _irods.bytesBuf_t_buf_set
    __swig_getmethods__["buf"] = _irods.bytesBuf_t_buf_get
    if _newclass:buf = _swig_property(_irods.bytesBuf_t_buf_get, _irods.bytesBuf_t_buf_set)
    def malloc(self, *args): return _irods.bytesBuf_t_malloc(self, *args)
    __swig_destroy__ = _irods.delete_bytesBuf_t
    __del__ = lambda self : None;
    def setBuf(self, *args): return _irods.bytesBuf_t_setBuf(self, *args)
    def getBuf(self): return _irods.bytesBuf_t_getBuf(self)
    def getBufAsChar(self): return _irods.bytesBuf_t_getBufAsChar(self)
    def __init__(self): 
        this = _irods.new_bytesBuf_t()
        try: self.this.append(this)
        except: self.this = this
bytesBuf_t_swigregister = _irods.bytesBuf_t_swigregister
bytesBuf_t_swigregister(bytesBuf_t)

class getTempPasswordOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, getTempPasswordOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, getTempPasswordOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stringToHashWith"] = _irods.getTempPasswordOut_t_stringToHashWith_set
    __swig_getmethods__["stringToHashWith"] = _irods.getTempPasswordOut_t_stringToHashWith_get
    if _newclass:stringToHashWith = _swig_property(_irods.getTempPasswordOut_t_stringToHashWith_get, _irods.getTempPasswordOut_t_stringToHashWith_set)
    def __init__(self): 
        this = _irods.new_getTempPasswordOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_getTempPasswordOut_t
    __del__ = lambda self : None;
getTempPasswordOut_t_swigregister = _irods.getTempPasswordOut_t_swigregister
getTempPasswordOut_t_swigregister(getTempPasswordOut_t)

UNKNOWN_ST = _irods.UNKNOWN_ST
NOT_EXIST_ST = _irods.NOT_EXIST_ST
EXIST_ST = _irods.EXIST_ST
UNKNOWN_OBJ_T = _irods.UNKNOWN_OBJ_T
DATA_OBJ_T = _irods.DATA_OBJ_T
COLL_OBJ_T = _irods.COLL_OBJ_T
UNKNOWN_FILE_T = _irods.UNKNOWN_FILE_T
LOCAL_FILE_T = _irods.LOCAL_FILE_T
LOCAL_DIR_T = _irods.LOCAL_DIR_T
NO_INPUT_T = _irods.NO_INPUT_T
class rodsDirent_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rodsDirent_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rodsDirent_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["d_offset"] = _irods.rodsDirent_t_d_offset_set
    __swig_getmethods__["d_offset"] = _irods.rodsDirent_t_d_offset_get
    if _newclass:d_offset = _swig_property(_irods.rodsDirent_t_d_offset_get, _irods.rodsDirent_t_d_offset_set)
    __swig_setmethods__["d_ino"] = _irods.rodsDirent_t_d_ino_set
    __swig_getmethods__["d_ino"] = _irods.rodsDirent_t_d_ino_get
    if _newclass:d_ino = _swig_property(_irods.rodsDirent_t_d_ino_get, _irods.rodsDirent_t_d_ino_set)
    __swig_setmethods__["d_reclen"] = _irods.rodsDirent_t_d_reclen_set
    __swig_getmethods__["d_reclen"] = _irods.rodsDirent_t_d_reclen_get
    if _newclass:d_reclen = _swig_property(_irods.rodsDirent_t_d_reclen_get, _irods.rodsDirent_t_d_reclen_set)
    __swig_setmethods__["d_namlen"] = _irods.rodsDirent_t_d_namlen_set
    __swig_getmethods__["d_namlen"] = _irods.rodsDirent_t_d_namlen_get
    if _newclass:d_namlen = _swig_property(_irods.rodsDirent_t_d_namlen_get, _irods.rodsDirent_t_d_namlen_set)
    __swig_setmethods__["d_name"] = _irods.rodsDirent_t_d_name_set
    __swig_getmethods__["d_name"] = _irods.rodsDirent_t_d_name_get
    if _newclass:d_name = _swig_property(_irods.rodsDirent_t_d_name_get, _irods.rodsDirent_t_d_name_set)
    def __init__(self): 
        this = _irods.new_rodsDirent_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rodsDirent_t
    __del__ = lambda self : None;
rodsDirent_t_swigregister = _irods.rodsDirent_t_swigregister
rodsDirent_t_swigregister(rodsDirent_t)

class rodsHostAddr_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rodsHostAddr_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rodsHostAddr_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hostAddr"] = _irods.rodsHostAddr_t_hostAddr_set
    __swig_getmethods__["hostAddr"] = _irods.rodsHostAddr_t_hostAddr_get
    if _newclass:hostAddr = _swig_property(_irods.rodsHostAddr_t_hostAddr_get, _irods.rodsHostAddr_t_hostAddr_set)
    __swig_setmethods__["zoneName"] = _irods.rodsHostAddr_t_zoneName_set
    __swig_getmethods__["zoneName"] = _irods.rodsHostAddr_t_zoneName_get
    if _newclass:zoneName = _swig_property(_irods.rodsHostAddr_t_zoneName_get, _irods.rodsHostAddr_t_zoneName_set)
    __swig_setmethods__["portNum"] = _irods.rodsHostAddr_t_portNum_set
    __swig_getmethods__["portNum"] = _irods.rodsHostAddr_t_portNum_get
    if _newclass:portNum = _swig_property(_irods.rodsHostAddr_t_portNum_get, _irods.rodsHostAddr_t_portNum_set)
    __swig_setmethods__["dummyInt"] = _irods.rodsHostAddr_t_dummyInt_set
    __swig_getmethods__["dummyInt"] = _irods.rodsHostAddr_t_dummyInt_get
    if _newclass:dummyInt = _swig_property(_irods.rodsHostAddr_t_dummyInt_get, _irods.rodsHostAddr_t_dummyInt_set)
    def __init__(self): 
        this = _irods.new_rodsHostAddr_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rodsHostAddr_t
    __del__ = lambda self : None;
rodsHostAddr_t_swigregister = _irods.rodsHostAddr_t_swigregister
rodsHostAddr_t_swigregister(rodsHostAddr_t)

class rodsRestart_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rodsRestart_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rodsRestart_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["restartFile"] = _irods.rodsRestart_t_restartFile_set
    __swig_getmethods__["restartFile"] = _irods.rodsRestart_t_restartFile_get
    if _newclass:restartFile = _swig_property(_irods.rodsRestart_t_restartFile_get, _irods.rodsRestart_t_restartFile_set)
    __swig_setmethods__["fd"] = _irods.rodsRestart_t_fd_set
    __swig_getmethods__["fd"] = _irods.rodsRestart_t_fd_get
    if _newclass:fd = _swig_property(_irods.rodsRestart_t_fd_get, _irods.rodsRestart_t_fd_set)
    __swig_setmethods__["doneCnt"] = _irods.rodsRestart_t_doneCnt_set
    __swig_getmethods__["doneCnt"] = _irods.rodsRestart_t_doneCnt_get
    if _newclass:doneCnt = _swig_property(_irods.rodsRestart_t_doneCnt_get, _irods.rodsRestart_t_doneCnt_set)
    __swig_setmethods__["collection"] = _irods.rodsRestart_t_collection_set
    __swig_getmethods__["collection"] = _irods.rodsRestart_t_collection_get
    if _newclass:collection = _swig_property(_irods.rodsRestart_t_collection_get, _irods.rodsRestart_t_collection_set)
    __swig_setmethods__["lastDonePath"] = _irods.rodsRestart_t_lastDonePath_set
    __swig_getmethods__["lastDonePath"] = _irods.rodsRestart_t_lastDonePath_get
    if _newclass:lastDonePath = _swig_property(_irods.rodsRestart_t_lastDonePath_get, _irods.rodsRestart_t_lastDonePath_set)
    __swig_setmethods__["oprType"] = _irods.rodsRestart_t_oprType_set
    __swig_getmethods__["oprType"] = _irods.rodsRestart_t_oprType_get
    if _newclass:oprType = _swig_property(_irods.rodsRestart_t_oprType_get, _irods.rodsRestart_t_oprType_set)
    __swig_setmethods__["curCnt"] = _irods.rodsRestart_t_curCnt_set
    __swig_getmethods__["curCnt"] = _irods.rodsRestart_t_curCnt_get
    if _newclass:curCnt = _swig_property(_irods.rodsRestart_t_curCnt_get, _irods.rodsRestart_t_curCnt_set)
    __swig_setmethods__["restartState"] = _irods.rodsRestart_t_restartState_set
    __swig_getmethods__["restartState"] = _irods.rodsRestart_t_restartState_get
    if _newclass:restartState = _swig_property(_irods.rodsRestart_t_restartState_get, _irods.rodsRestart_t_restartState_set)
    def __init__(self): 
        this = _irods.new_rodsRestart_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rodsRestart_t
    __del__ = lambda self : None;
rodsRestart_t_swigregister = _irods.rodsRestart_t_swigregister
rodsRestart_t_swigregister(rodsRestart_t)

class rodsStat_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rodsStat_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rodsStat_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["st_size"] = _irods.rodsStat_t_st_size_set
    __swig_getmethods__["st_size"] = _irods.rodsStat_t_st_size_get
    if _newclass:st_size = _swig_property(_irods.rodsStat_t_st_size_get, _irods.rodsStat_t_st_size_set)
    __swig_setmethods__["st_dev"] = _irods.rodsStat_t_st_dev_set
    __swig_getmethods__["st_dev"] = _irods.rodsStat_t_st_dev_get
    if _newclass:st_dev = _swig_property(_irods.rodsStat_t_st_dev_get, _irods.rodsStat_t_st_dev_set)
    __swig_setmethods__["st_ino"] = _irods.rodsStat_t_st_ino_set
    __swig_getmethods__["st_ino"] = _irods.rodsStat_t_st_ino_get
    if _newclass:st_ino = _swig_property(_irods.rodsStat_t_st_ino_get, _irods.rodsStat_t_st_ino_set)
    __swig_setmethods__["st_mode"] = _irods.rodsStat_t_st_mode_set
    __swig_getmethods__["st_mode"] = _irods.rodsStat_t_st_mode_get
    if _newclass:st_mode = _swig_property(_irods.rodsStat_t_st_mode_get, _irods.rodsStat_t_st_mode_set)
    __swig_setmethods__["st_nlink"] = _irods.rodsStat_t_st_nlink_set
    __swig_getmethods__["st_nlink"] = _irods.rodsStat_t_st_nlink_get
    if _newclass:st_nlink = _swig_property(_irods.rodsStat_t_st_nlink_get, _irods.rodsStat_t_st_nlink_set)
    __swig_setmethods__["st_uid"] = _irods.rodsStat_t_st_uid_set
    __swig_getmethods__["st_uid"] = _irods.rodsStat_t_st_uid_get
    if _newclass:st_uid = _swig_property(_irods.rodsStat_t_st_uid_get, _irods.rodsStat_t_st_uid_set)
    __swig_setmethods__["st_gid"] = _irods.rodsStat_t_st_gid_set
    __swig_getmethods__["st_gid"] = _irods.rodsStat_t_st_gid_get
    if _newclass:st_gid = _swig_property(_irods.rodsStat_t_st_gid_get, _irods.rodsStat_t_st_gid_set)
    __swig_setmethods__["st_rdev"] = _irods.rodsStat_t_st_rdev_set
    __swig_getmethods__["st_rdev"] = _irods.rodsStat_t_st_rdev_get
    if _newclass:st_rdev = _swig_property(_irods.rodsStat_t_st_rdev_get, _irods.rodsStat_t_st_rdev_set)
    __swig_setmethods__["st_atim"] = _irods.rodsStat_t_st_atim_set
    __swig_getmethods__["st_atim"] = _irods.rodsStat_t_st_atim_get
    if _newclass:st_atim = _swig_property(_irods.rodsStat_t_st_atim_get, _irods.rodsStat_t_st_atim_set)
    __swig_setmethods__["st_mtim"] = _irods.rodsStat_t_st_mtim_set
    __swig_getmethods__["st_mtim"] = _irods.rodsStat_t_st_mtim_get
    if _newclass:st_mtim = _swig_property(_irods.rodsStat_t_st_mtim_get, _irods.rodsStat_t_st_mtim_set)
    __swig_setmethods__["st_ctim"] = _irods.rodsStat_t_st_ctim_set
    __swig_getmethods__["st_ctim"] = _irods.rodsStat_t_st_ctim_get
    if _newclass:st_ctim = _swig_property(_irods.rodsStat_t_st_ctim_get, _irods.rodsStat_t_st_ctim_set)
    __swig_setmethods__["st_blksize"] = _irods.rodsStat_t_st_blksize_set
    __swig_getmethods__["st_blksize"] = _irods.rodsStat_t_st_blksize_get
    if _newclass:st_blksize = _swig_property(_irods.rodsStat_t_st_blksize_get, _irods.rodsStat_t_st_blksize_set)
    __swig_setmethods__["st_blocks"] = _irods.rodsStat_t_st_blocks_set
    __swig_getmethods__["st_blocks"] = _irods.rodsStat_t_st_blocks_get
    if _newclass:st_blocks = _swig_property(_irods.rodsStat_t_st_blocks_get, _irods.rodsStat_t_st_blocks_set)
    def __init__(self): 
        this = _irods.new_rodsStat_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rodsStat_t
    __del__ = lambda self : None;
rodsStat_t_swigregister = _irods.rodsStat_t_swigregister
rodsStat_t_swigregister(rodsStat_t)

class version_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, version_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, version_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _irods.version_t_status_set
    __swig_getmethods__["status"] = _irods.version_t_status_get
    if _newclass:status = _swig_property(_irods.version_t_status_get, _irods.version_t_status_set)
    __swig_setmethods__["relVersion"] = _irods.version_t_relVersion_set
    __swig_getmethods__["relVersion"] = _irods.version_t_relVersion_get
    if _newclass:relVersion = _swig_property(_irods.version_t_relVersion_get, _irods.version_t_relVersion_set)
    __swig_setmethods__["apiVersion"] = _irods.version_t_apiVersion_set
    __swig_getmethods__["apiVersion"] = _irods.version_t_apiVersion_get
    if _newclass:apiVersion = _swig_property(_irods.version_t_apiVersion_get, _irods.version_t_apiVersion_set)
    __swig_setmethods__["reconnPort"] = _irods.version_t_reconnPort_set
    __swig_getmethods__["reconnPort"] = _irods.version_t_reconnPort_get
    if _newclass:reconnPort = _swig_property(_irods.version_t_reconnPort_get, _irods.version_t_reconnPort_set)
    __swig_setmethods__["reconnAddr"] = _irods.version_t_reconnAddr_set
    __swig_getmethods__["reconnAddr"] = _irods.version_t_reconnAddr_get
    if _newclass:reconnAddr = _swig_property(_irods.version_t_reconnAddr_get, _irods.version_t_reconnAddr_set)
    __swig_setmethods__["cookie"] = _irods.version_t_cookie_set
    __swig_getmethods__["cookie"] = _irods.version_t_cookie_get
    if _newclass:cookie = _swig_property(_irods.version_t_cookie_get, _irods.version_t_cookie_set)
    def __init__(self): 
        this = _irods.new_version_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_version_t
    __del__ = lambda self : None;
version_t_swigregister = _irods.version_t_swigregister
version_t_swigregister(version_t)

class rErrMsg_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rErrMsg_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rErrMsg_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _irods.rErrMsg_t_status_set
    __swig_getmethods__["status"] = _irods.rErrMsg_t_status_get
    if _newclass:status = _swig_property(_irods.rErrMsg_t_status_get, _irods.rErrMsg_t_status_set)
    __swig_setmethods__["msg"] = _irods.rErrMsg_t_msg_set
    __swig_getmethods__["msg"] = _irods.rErrMsg_t_msg_get
    if _newclass:msg = _swig_property(_irods.rErrMsg_t_msg_get, _irods.rErrMsg_t_msg_set)
    def __init__(self): 
        this = _irods.new_rErrMsg_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rErrMsg_t
    __del__ = lambda self : None;
rErrMsg_t_swigregister = _irods.rErrMsg_t_swigregister
rErrMsg_t_swigregister(rErrMsg_t)

SYS_SOCK_OPEN_ERR = _irods.SYS_SOCK_OPEN_ERR
SYS_SOCK_BIND_ERR = _irods.SYS_SOCK_BIND_ERR
SYS_SOCK_ACCEPT_ERR = _irods.SYS_SOCK_ACCEPT_ERR
SYS_HEADER_READ_LEN_ERR = _irods.SYS_HEADER_READ_LEN_ERR
SYS_HEADER_WRITE_LEN_ERR = _irods.SYS_HEADER_WRITE_LEN_ERR
SYS_HEADER_TPYE_LEN_ERR = _irods.SYS_HEADER_TPYE_LEN_ERR
SYS_CAUGHT_SIGNAL = _irods.SYS_CAUGHT_SIGNAL
SYS_GETSTARTUP_PACK_ERR = _irods.SYS_GETSTARTUP_PACK_ERR
SYS_EXCEED_CONNECT_CNT = _irods.SYS_EXCEED_CONNECT_CNT
SYS_USER_NOT_ALLOWED_TO_CONN = _irods.SYS_USER_NOT_ALLOWED_TO_CONN
SYS_READ_MSG_BODY_INPUT_ERR = _irods.SYS_READ_MSG_BODY_INPUT_ERR
SYS_UNMATCHED_API_NUM = _irods.SYS_UNMATCHED_API_NUM
SYS_NO_API_PRIV = _irods.SYS_NO_API_PRIV
SYS_API_INPUT_ERR = _irods.SYS_API_INPUT_ERR
SYS_PACK_INSTRUCT_FORMAT_ERR = _irods.SYS_PACK_INSTRUCT_FORMAT_ERR
SYS_MALLOC_ERR = _irods.SYS_MALLOC_ERR
SYS_GET_HOSTNAME_ERR = _irods.SYS_GET_HOSTNAME_ERR
SYS_OUT_OF_FILE_DESC = _irods.SYS_OUT_OF_FILE_DESC
SYS_FILE_DESC_OUT_OF_RANGE = _irods.SYS_FILE_DESC_OUT_OF_RANGE
SYS_UNRECOGNIZED_REMOTE_FLAG = _irods.SYS_UNRECOGNIZED_REMOTE_FLAG
SYS_INVALID_SERVER_HOST = _irods.SYS_INVALID_SERVER_HOST
SYS_SVR_TO_SVR_CONNECT_FAILED = _irods.SYS_SVR_TO_SVR_CONNECT_FAILED
SYS_BAD_FILE_DESCRIPTOR = _irods.SYS_BAD_FILE_DESCRIPTOR
SYS_INTERNAL_NULL_INPUT_ERR = _irods.SYS_INTERNAL_NULL_INPUT_ERR
SYS_CONFIG_FILE_ERR = _irods.SYS_CONFIG_FILE_ERR
SYS_INVALID_ZONE_NAME = _irods.SYS_INVALID_ZONE_NAME
SYS_COPY_LEN_ERR = _irods.SYS_COPY_LEN_ERR
SYS_PORT_COOKIE_ERR = _irods.SYS_PORT_COOKIE_ERR
SYS_KEY_VAL_TABLE_ERR = _irods.SYS_KEY_VAL_TABLE_ERR
SYS_INVALID_RESC_TYPE = _irods.SYS_INVALID_RESC_TYPE
SYS_INVALID_FILE_PATH = _irods.SYS_INVALID_FILE_PATH
SYS_INVALID_RESC_INPUT = _irods.SYS_INVALID_RESC_INPUT
SYS_INVALID_PORTAL_OPR = _irods.SYS_INVALID_PORTAL_OPR
SYS_PARA_OPR_NO_SUPPORT = _irods.SYS_PARA_OPR_NO_SUPPORT
SYS_INVALID_OPR_TYPE = _irods.SYS_INVALID_OPR_TYPE
SYS_NO_PATH_PERMISSION = _irods.SYS_NO_PATH_PERMISSION
SYS_NO_ICAT_SERVER_ERR = _irods.SYS_NO_ICAT_SERVER_ERR
SYS_AGENT_INIT_ERR = _irods.SYS_AGENT_INIT_ERR
SYS_PROXYUSER_NO_PRIV = _irods.SYS_PROXYUSER_NO_PRIV
SYS_NO_DATA_OBJ_PERMISSION = _irods.SYS_NO_DATA_OBJ_PERMISSION
SYS_DELETE_DISALLOWED = _irods.SYS_DELETE_DISALLOWED
SYS_OPEN_REI_FILE_ERR = _irods.SYS_OPEN_REI_FILE_ERR
SYS_NO_RCAT_SERVER_ERR = _irods.SYS_NO_RCAT_SERVER_ERR
SYS_UNMATCH_PACK_INSTRUCTI_NAME = _irods.SYS_UNMATCH_PACK_INSTRUCTI_NAME
SYS_SVR_TO_CLI_MSI_NO_EXIST = _irods.SYS_SVR_TO_CLI_MSI_NO_EXIST
SYS_COPY_ALREADY_IN_RESC = _irods.SYS_COPY_ALREADY_IN_RESC
SYS_RECONN_OPR_MISMATCH = _irods.SYS_RECONN_OPR_MISMATCH
SYS_INPUT_PERM_OUT_OF_RANGE = _irods.SYS_INPUT_PERM_OUT_OF_RANGE
SYS_FORK_ERROR = _irods.SYS_FORK_ERROR
SYS_PIPE_ERROR = _irods.SYS_PIPE_ERROR
SYS_EXEC_CMD_STATUS_SZ_ERROR = _irods.SYS_EXEC_CMD_STATUS_SZ_ERROR
SYS_PATH_IS_NOT_A_FILE = _irods.SYS_PATH_IS_NOT_A_FILE
SYS_UNMATCHED_SPEC_COLL_TYPE = _irods.SYS_UNMATCHED_SPEC_COLL_TYPE
SYS_TOO_MANY_QUERY_RESULT = _irods.SYS_TOO_MANY_QUERY_RESULT
SYS_SPEC_COLL_NOT_IN_CACHE = _irods.SYS_SPEC_COLL_NOT_IN_CACHE
SYS_SPEC_COLL_OBJ_NOT_EXIST = _irods.SYS_SPEC_COLL_OBJ_NOT_EXIST
SYS_REG_OBJ_IN_SPEC_COLL = _irods.SYS_REG_OBJ_IN_SPEC_COLL
SYS_DEST_SPEC_COLL_SUB_EXIST = _irods.SYS_DEST_SPEC_COLL_SUB_EXIST
SYS_SRC_DEST_SPEC_COLL_CONFLICT = _irods.SYS_SRC_DEST_SPEC_COLL_CONFLICT
SYS_UNKNOWN_SPEC_COLL_CLASS = _irods.SYS_UNKNOWN_SPEC_COLL_CLASS
SYS_DUPLICATE_XMSG_TICKET = _irods.SYS_DUPLICATE_XMSG_TICKET
SYS_UNMATCHED_XMSG_TICKET = _irods.SYS_UNMATCHED_XMSG_TICKET
SYS_NO_XMSG_FOR_MSG_NUMBER = _irods.SYS_NO_XMSG_FOR_MSG_NUMBER
SYS_COLLINFO_2_FORMAT_ERR = _irods.SYS_COLLINFO_2_FORMAT_ERR
SYS_CACHE_STRUCT_FILE_RESC_ERR = _irods.SYS_CACHE_STRUCT_FILE_RESC_ERR
SYS_NOT_SUPPORTED = _irods.SYS_NOT_SUPPORTED
SYS_TAR_STRUCT_FILE_EXTRACT_ERR = _irods.SYS_TAR_STRUCT_FILE_EXTRACT_ERR
SYS_STRUCT_FILE_DESC_ERR = _irods.SYS_STRUCT_FILE_DESC_ERR
SYS_TAR_OPEN_ERR = _irods.SYS_TAR_OPEN_ERR
SYS_TAR_EXTRACT_ALL_ERR = _irods.SYS_TAR_EXTRACT_ALL_ERR
SYS_TAR_CLOSE_ERR = _irods.SYS_TAR_CLOSE_ERR
SYS_STRUCT_FILE_PATH_ERR = _irods.SYS_STRUCT_FILE_PATH_ERR
SYS_MOUNT_MOUNTED_COLL_ERR = _irods.SYS_MOUNT_MOUNTED_COLL_ERR
SYS_COLL_NOT_MOUNTED_ERR = _irods.SYS_COLL_NOT_MOUNTED_ERR
SYS_STRUCT_FILE_BUSY_ERR = _irods.SYS_STRUCT_FILE_BUSY_ERR
SYS_STRUCT_FILE_INMOUNTED_COLL = _irods.SYS_STRUCT_FILE_INMOUNTED_COLL
SYS_COPY_NOT_EXIST_IN_RESC = _irods.SYS_COPY_NOT_EXIST_IN_RESC
SYS_RESC_DOES_NOT_EXIST = _irods.SYS_RESC_DOES_NOT_EXIST
SYS_COLLECTION_NOT_EMPTY = _irods.SYS_COLLECTION_NOT_EMPTY
SYS_OBJ_TYPE_NOT_STRUCT_FILE = _irods.SYS_OBJ_TYPE_NOT_STRUCT_FILE
SYS_WRONG_RESC_POLICY_FOR_BUN_OPR = _irods.SYS_WRONG_RESC_POLICY_FOR_BUN_OPR
SYS_DIR_IN_VAULT_NOT_EMPTY = _irods.SYS_DIR_IN_VAULT_NOT_EMPTY
SYS_OPR_FLAG_NOT_SUPPORT = _irods.SYS_OPR_FLAG_NOT_SUPPORT
SYS_TAR_APPEND_ERR = _irods.SYS_TAR_APPEND_ERR
SYS_INVALID_PROTOCOL_TYPE = _irods.SYS_INVALID_PROTOCOL_TYPE
SYS_UDP_CONNECT_ERR = _irods.SYS_UDP_CONNECT_ERR
SYS_UDP_TRANSFER_ERR = _irods.SYS_UDP_TRANSFER_ERR
SYS_UDP_NO_SUPPORT_ERR = _irods.SYS_UDP_NO_SUPPORT_ERR
SYS_READ_MSG_BODY_LEN_ERR = _irods.SYS_READ_MSG_BODY_LEN_ERR
CROSS_ZONE_SOCK_CONNECT_ERR = _irods.CROSS_ZONE_SOCK_CONNECT_ERR
SYS_NO_FREE_RE_THREAD = _irods.SYS_NO_FREE_RE_THREAD
SYS_BAD_RE_THREAD_INX = _irods.SYS_BAD_RE_THREAD_INX
SYS_CANT_DIRECTLY_ACC_COMPOUND_RESC = _irods.SYS_CANT_DIRECTLY_ACC_COMPOUND_RESC
SYS_SRC_DEST_RESC_COMPOUND_TYPE = _irods.SYS_SRC_DEST_RESC_COMPOUND_TYPE
SYS_CACHE_RESC_NOT_ON_SAME_HOST = _irods.SYS_CACHE_RESC_NOT_ON_SAME_HOST
SYS_NO_CACHE_RESC_IN_GRP = _irods.SYS_NO_CACHE_RESC_IN_GRP
SYS_UNMATCHED_RESC_IN_RESC_GRP = _irods.SYS_UNMATCHED_RESC_IN_RESC_GRP
SYS_CANT_MV_BUNDLE_DATA_TO_TRASH = _irods.SYS_CANT_MV_BUNDLE_DATA_TO_TRASH
SYS_CANT_MV_BUNDLE_DATA_BY_COPY = _irods.SYS_CANT_MV_BUNDLE_DATA_BY_COPY
SYS_EXEC_TAR_ERR = _irods.SYS_EXEC_TAR_ERR
SYS_CANT_CHKSUM_COMP_RESC_DATA = _irods.SYS_CANT_CHKSUM_COMP_RESC_DATA
SYS_CANT_CHKSUM_BUNDLED_DATA = _irods.SYS_CANT_CHKSUM_BUNDLED_DATA
SYS_RESC_IS_DOWN = _irods.SYS_RESC_IS_DOWN
SYS_UPDATE_REPL_INFO_ERR = _irods.SYS_UPDATE_REPL_INFO_ERR
SYS_COLL_LINK_PATH_ERR = _irods.SYS_COLL_LINK_PATH_ERR
SYS_LINK_CNT_EXCEEDED_ERR = _irods.SYS_LINK_CNT_EXCEEDED_ERR
SYS_CROSS_ZONE_MV_NOT_SUPPORTED = _irods.SYS_CROSS_ZONE_MV_NOT_SUPPORTED
SYS_RESC_QUOTA_EXCEEDED = _irods.SYS_RESC_QUOTA_EXCEEDED
SYS_RENAME_STRUCT_COUNT_EXCEEDED = _irods.SYS_RENAME_STRUCT_COUNT_EXCEEDED
SYS_BULK_REG_COUNT_EXCEEDED = _irods.SYS_BULK_REG_COUNT_EXCEEDED
SYS_REQUESTED_BUF_TOO_LARGE = _irods.SYS_REQUESTED_BUF_TOO_LARGE
SYS_INVALID_RESC_FOR_BULK_OPR = _irods.SYS_INVALID_RESC_FOR_BULK_OPR
SYS_SOCK_READ_TIMEDOUT = _irods.SYS_SOCK_READ_TIMEDOUT
SYS_SOCK_READ_ERR = _irods.SYS_SOCK_READ_ERR
SYS_CONNECT_CONTROL_CONFIG_ERR = _irods.SYS_CONNECT_CONTROL_CONFIG_ERR
SYS_MAX_CONNECT_COUNT_EXCEEDED = _irods.SYS_MAX_CONNECT_COUNT_EXCEEDED
SYS_STRUCT_ELEMENT_MISMATCH = _irods.SYS_STRUCT_ELEMENT_MISMATCH
SYS_PHY_PATH_INUSE = _irods.SYS_PHY_PATH_INUSE
SYS_USER_NO_PERMISSION = _irods.SYS_USER_NO_PERMISSION
SYS_USER_RETRIEVE_ERR = _irods.SYS_USER_RETRIEVE_ERR
SYS_FS_LOCK_ERR = _irods.SYS_FS_LOCK_ERR
SYS_LOCK_TYPE_INP_ERR = _irods.SYS_LOCK_TYPE_INP_ERR
SYS_LOCK_CMD_INP_ERR = _irods.SYS_LOCK_CMD_INP_ERR
SYS_ZIP_FORMAT_NOT_SUPPORTED = _irods.SYS_ZIP_FORMAT_NOT_SUPPORTED
SYS_ADD_TO_ARCH_OPR_NOT_SUPPORTED = _irods.SYS_ADD_TO_ARCH_OPR_NOT_SUPPORTED
CANT_REG_IN_VAULT_FILE = _irods.CANT_REG_IN_VAULT_FILE
PATH_REG_NOT_ALLOWED = _irods.PATH_REG_NOT_ALLOWED
SYS_INVALID_INPUT_PARAM = _irods.SYS_INVALID_INPUT_PARAM
SYS_GROUP_RETRIEVE_ERR = _irods.SYS_GROUP_RETRIEVE_ERR
SYS_MSSO_APPEND_ERR = _irods.SYS_MSSO_APPEND_ERR
SYS_MSSO_STRUCT_FILE_EXTRACT_ERR = _irods.SYS_MSSO_STRUCT_FILE_EXTRACT_ERR
SYS_MSSO_EXTRACT_ALL_ERR = _irods.SYS_MSSO_EXTRACT_ALL_ERR
SYS_MSSO_OPEN_ERR = _irods.SYS_MSSO_OPEN_ERR
SYS_MSSO_CLOSE_ERR = _irods.SYS_MSSO_CLOSE_ERR
USER_AUTH_SCHEME_ERR = _irods.USER_AUTH_SCHEME_ERR
USER_AUTH_STRING_EMPTY = _irods.USER_AUTH_STRING_EMPTY
USER_RODS_HOST_EMPTY = _irods.USER_RODS_HOST_EMPTY
USER_RODS_HOSTNAME_ERR = _irods.USER_RODS_HOSTNAME_ERR
USER_SOCK_OPEN_ERR = _irods.USER_SOCK_OPEN_ERR
USER_SOCK_CONNECT_ERR = _irods.USER_SOCK_CONNECT_ERR
USER_STRLEN_TOOLONG = _irods.USER_STRLEN_TOOLONG
USER_API_INPUT_ERR = _irods.USER_API_INPUT_ERR
USER_PACKSTRUCT_INPUT_ERR = _irods.USER_PACKSTRUCT_INPUT_ERR
USER_NO_SUPPORT_ERR = _irods.USER_NO_SUPPORT_ERR
USER_FILE_DOES_NOT_EXIST = _irods.USER_FILE_DOES_NOT_EXIST
USER_FILE_TOO_LARGE = _irods.USER_FILE_TOO_LARGE
OVERWRITE_WITHOUT_FORCE_FLAG = _irods.OVERWRITE_WITHOUT_FORCE_FLAG
UNMATCHED_KEY_OR_INDEX = _irods.UNMATCHED_KEY_OR_INDEX
USER_CHKSUM_MISMATCH = _irods.USER_CHKSUM_MISMATCH
USER_BAD_KEYWORD_ERR = _irods.USER_BAD_KEYWORD_ERR
USER__NULL_INPUT_ERR = _irods.USER__NULL_INPUT_ERR
USER_INPUT_PATH_ERR = _irods.USER_INPUT_PATH_ERR
USER_INPUT_OPTION_ERR = _irods.USER_INPUT_OPTION_ERR
USER_INVALID_USERNAME_FORMAT = _irods.USER_INVALID_USERNAME_FORMAT
USER_DIRECT_RESC_INPUT_ERR = _irods.USER_DIRECT_RESC_INPUT_ERR
USER_NO_RESC_INPUT_ERR = _irods.USER_NO_RESC_INPUT_ERR
USER_PARAM_LABEL_ERR = _irods.USER_PARAM_LABEL_ERR
USER_PARAM_TYPE_ERR = _irods.USER_PARAM_TYPE_ERR
BASE64_BUFFER_OVERFLOW = _irods.BASE64_BUFFER_OVERFLOW
BASE64_INVALID_PACKET = _irods.BASE64_INVALID_PACKET
USER_MSG_TYPE_NO_SUPPORT = _irods.USER_MSG_TYPE_NO_SUPPORT
USER_RSYNC_NO_MODE_INPUT_ERR = _irods.USER_RSYNC_NO_MODE_INPUT_ERR
USER_OPTION_INPUT_ERR = _irods.USER_OPTION_INPUT_ERR
SAME_SRC_DEST_PATHS_ERR = _irods.SAME_SRC_DEST_PATHS_ERR
USER_RESTART_FILE_INPUT_ERR = _irods.USER_RESTART_FILE_INPUT_ERR
RESTART_OPR_FAILED = _irods.RESTART_OPR_FAILED
BAD_EXEC_CMD_PATH = _irods.BAD_EXEC_CMD_PATH
EXEC_CMD_OUTPUT_TOO_LARGE = _irods.EXEC_CMD_OUTPUT_TOO_LARGE
EXEC_CMD_ERROR = _irods.EXEC_CMD_ERROR
BAD_INPUT_DESC_INDEX = _irods.BAD_INPUT_DESC_INDEX
USER_PATH_EXCEEDS_MAX = _irods.USER_PATH_EXCEEDS_MAX
USER_SOCK_CONNECT_TIMEDOUT = _irods.USER_SOCK_CONNECT_TIMEDOUT
USER_API_VERSION_MISMATCH = _irods.USER_API_VERSION_MISMATCH
USER_INPUT_FORMAT_ERR = _irods.USER_INPUT_FORMAT_ERR
USER_ACCESS_DENIED = _irods.USER_ACCESS_DENIED
CANT_RM_MV_BUNDLE_TYPE = _irods.CANT_RM_MV_BUNDLE_TYPE
NO_MORE_RESULT = _irods.NO_MORE_RESULT
NO_KEY_WD_IN_MS_INP_STR = _irods.NO_KEY_WD_IN_MS_INP_STR
CANT_RM_NON_EMPTY_HOME_COLL = _irods.CANT_RM_NON_EMPTY_HOME_COLL
CANT_UNREG_IN_VAULT_FILE = _irods.CANT_UNREG_IN_VAULT_FILE
NO_LOCAL_FILE_RSYNC_IN_MSI = _irods.NO_LOCAL_FILE_RSYNC_IN_MSI
BULK_OPR_MISMATCH_FOR_RESTART = _irods.BULK_OPR_MISMATCH_FOR_RESTART
OBJ_PATH_DOES_NOT_EXIST = _irods.OBJ_PATH_DOES_NOT_EXIST
SYMLINKED_BUNFILE_NOT_ALLOWED = _irods.SYMLINKED_BUNFILE_NOT_ALLOWED
USER_INPUT_STRING_ERR = _irods.USER_INPUT_STRING_ERR
FILE_INDEX_LOOKUP_ERR = _irods.FILE_INDEX_LOOKUP_ERR
UNIX_FILE_OPEN_ERR = _irods.UNIX_FILE_OPEN_ERR
UNIX_FILE_CREATE_ERR = _irods.UNIX_FILE_CREATE_ERR
UNIX_FILE_READ_ERR = _irods.UNIX_FILE_READ_ERR
UNIX_FILE_WRITE_ERR = _irods.UNIX_FILE_WRITE_ERR
UNIX_FILE_CLOSE_ERR = _irods.UNIX_FILE_CLOSE_ERR
UNIX_FILE_UNLINK_ERR = _irods.UNIX_FILE_UNLINK_ERR
UNIX_FILE_STAT_ERR = _irods.UNIX_FILE_STAT_ERR
UNIX_FILE_FSTAT_ERR = _irods.UNIX_FILE_FSTAT_ERR
UNIX_FILE_LSEEK_ERR = _irods.UNIX_FILE_LSEEK_ERR
UNIX_FILE_FSYNC_ERR = _irods.UNIX_FILE_FSYNC_ERR
UNIX_FILE_MKDIR_ERR = _irods.UNIX_FILE_MKDIR_ERR
UNIX_FILE_RMDIR_ERR = _irods.UNIX_FILE_RMDIR_ERR
UNIX_FILE_OPENDIR_ERR = _irods.UNIX_FILE_OPENDIR_ERR
UNIX_FILE_CLOSEDIR_ERR = _irods.UNIX_FILE_CLOSEDIR_ERR
UNIX_FILE_READDIR_ERR = _irods.UNIX_FILE_READDIR_ERR
UNIX_FILE_STAGE_ERR = _irods.UNIX_FILE_STAGE_ERR
UNIX_FILE_GET_FS_FREESPACE_ERR = _irods.UNIX_FILE_GET_FS_FREESPACE_ERR
UNIX_FILE_CHMOD_ERR = _irods.UNIX_FILE_CHMOD_ERR
UNIX_FILE_RENAME_ERR = _irods.UNIX_FILE_RENAME_ERR
UNIX_FILE_TRUNCATE_ERR = _irods.UNIX_FILE_TRUNCATE_ERR
UNIX_FILE_LINK_ERR = _irods.UNIX_FILE_LINK_ERR
UNIX_FILE_OPR_TIMEOUT_ERR = _irods.UNIX_FILE_OPR_TIMEOUT_ERR
UNIV_MSS_SYNCTOARCH_ERR = _irods.UNIV_MSS_SYNCTOARCH_ERR
UNIV_MSS_STAGETOCACHE_ERR = _irods.UNIV_MSS_STAGETOCACHE_ERR
UNIV_MSS_UNLINK_ERR = _irods.UNIV_MSS_UNLINK_ERR
UNIV_MSS_MKDIR_ERR = _irods.UNIV_MSS_MKDIR_ERR
UNIV_MSS_CHMOD_ERR = _irods.UNIV_MSS_CHMOD_ERR
UNIV_MSS_STAT_ERR = _irods.UNIV_MSS_STAT_ERR
UNIV_MSS_RENAME_ERR = _irods.UNIV_MSS_RENAME_ERR
HPSS_AUTH_NOT_SUPPORTED = _irods.HPSS_AUTH_NOT_SUPPORTED
HPSS_FILE_OPEN_ERR = _irods.HPSS_FILE_OPEN_ERR
HPSS_FILE_CREATE_ERR = _irods.HPSS_FILE_CREATE_ERR
HPSS_FILE_READ_ERR = _irods.HPSS_FILE_READ_ERR
HPSS_FILE_WRITE_ERR = _irods.HPSS_FILE_WRITE_ERR
HPSS_FILE_CLOSE_ERR = _irods.HPSS_FILE_CLOSE_ERR
HPSS_FILE_UNLINK_ERR = _irods.HPSS_FILE_UNLINK_ERR
HPSS_FILE_STAT_ERR = _irods.HPSS_FILE_STAT_ERR
HPSS_FILE_FSTAT_ERR = _irods.HPSS_FILE_FSTAT_ERR
HPSS_FILE_LSEEK_ERR = _irods.HPSS_FILE_LSEEK_ERR
HPSS_FILE_FSYNC_ERR = _irods.HPSS_FILE_FSYNC_ERR
HPSS_FILE_MKDIR_ERR = _irods.HPSS_FILE_MKDIR_ERR
HPSS_FILE_RMDIR_ERR = _irods.HPSS_FILE_RMDIR_ERR
HPSS_FILE_OPENDIR_ERR = _irods.HPSS_FILE_OPENDIR_ERR
HPSS_FILE_CLOSEDIR_ERR = _irods.HPSS_FILE_CLOSEDIR_ERR
HPSS_FILE_READDIR_ERR = _irods.HPSS_FILE_READDIR_ERR
HPSS_FILE_STAGE_ERR = _irods.HPSS_FILE_STAGE_ERR
HPSS_FILE_GET_FS_FREESPACE_ERR = _irods.HPSS_FILE_GET_FS_FREESPACE_ERR
HPSS_FILE_CHMOD_ERR = _irods.HPSS_FILE_CHMOD_ERR
HPSS_FILE_RENAME_ERR = _irods.HPSS_FILE_RENAME_ERR
HPSS_FILE_TRUNCATE_ERR = _irods.HPSS_FILE_TRUNCATE_ERR
HPSS_FILE_LINK_ERR = _irods.HPSS_FILE_LINK_ERR
HPSS_AUTH_ERR = _irods.HPSS_AUTH_ERR
HPSS_WRITE_LIST_ERR = _irods.HPSS_WRITE_LIST_ERR
HPSS_READ_LIST_ERR = _irods.HPSS_READ_LIST_ERR
HPSS_TRANSFER_ERR = _irods.HPSS_TRANSFER_ERR
HPSS_MOVER_PROT_ERR = _irods.HPSS_MOVER_PROT_ERR
S3_INIT_ERROR = _irods.S3_INIT_ERROR
S3_PUT_ERROR = _irods.S3_PUT_ERROR
S3_GET_ERROR = _irods.S3_GET_ERROR
S3_FILE_UNLINK_ERR = _irods.S3_FILE_UNLINK_ERR
S3_FILE_STAT_ERR = _irods.S3_FILE_STAT_ERR
S3_FILE_COPY_ERR = _irods.S3_FILE_COPY_ERR
WOS_PUT_ERR = _irods.WOS_PUT_ERR
WOS_STREAM_PUT_ERR = _irods.WOS_STREAM_PUT_ERR
WOS_STREAM_CLOSE_ERR = _irods.WOS_STREAM_CLOSE_ERR
WOS_GET_ERR = _irods.WOS_GET_ERR
WOS_STREAM_GET_ERR = _irods.WOS_STREAM_GET_ERR
WOS_UNLINK_ERR = _irods.WOS_UNLINK_ERR
WOS_STAT_ERR = _irods.WOS_STAT_ERR
WOS_CONNECT_ERR = _irods.WOS_CONNECT_ERR
DIRECT_ACCESS_FILE_USER_INVALID_ERR = _irods.DIRECT_ACCESS_FILE_USER_INVALID_ERR
CATALOG_NOT_CONNECTED = _irods.CATALOG_NOT_CONNECTED
CAT_ENV_ERR = _irods.CAT_ENV_ERR
CAT_CONNECT_ERR = _irods.CAT_CONNECT_ERR
CAT_DISCONNECT_ERR = _irods.CAT_DISCONNECT_ERR
CAT_CLOSE_ENV_ERR = _irods.CAT_CLOSE_ENV_ERR
CAT_SQL_ERR = _irods.CAT_SQL_ERR
CAT_GET_ROW_ERR = _irods.CAT_GET_ROW_ERR
CAT_NO_ROWS_FOUND = _irods.CAT_NO_ROWS_FOUND
CATALOG_ALREADY_HAS_ITEM_BY_THAT_NAME = _irods.CATALOG_ALREADY_HAS_ITEM_BY_THAT_NAME
CAT_INVALID_RESOURCE_TYPE = _irods.CAT_INVALID_RESOURCE_TYPE
CAT_INVALID_RESOURCE_CLASS = _irods.CAT_INVALID_RESOURCE_CLASS
CAT_INVALID_RESOURCE_NET_ADDR = _irods.CAT_INVALID_RESOURCE_NET_ADDR
CAT_INVALID_RESOURCE_VAULT_PATH = _irods.CAT_INVALID_RESOURCE_VAULT_PATH
CAT_UNKNOWN_COLLECTION = _irods.CAT_UNKNOWN_COLLECTION
CAT_INVALID_DATA_TYPE = _irods.CAT_INVALID_DATA_TYPE
CAT_INVALID_ARGUMENT = _irods.CAT_INVALID_ARGUMENT
CAT_UNKNOWN_FILE = _irods.CAT_UNKNOWN_FILE
CAT_NO_ACCESS_PERMISSION = _irods.CAT_NO_ACCESS_PERMISSION
CAT_SUCCESS_BUT_WITH_NO_INFO = _irods.CAT_SUCCESS_BUT_WITH_NO_INFO
CAT_INVALID_USER_TYPE = _irods.CAT_INVALID_USER_TYPE
CAT_COLLECTION_NOT_EMPTY = _irods.CAT_COLLECTION_NOT_EMPTY
CAT_TOO_MANY_TABLES = _irods.CAT_TOO_MANY_TABLES
CAT_UNKNOWN_TABLE = _irods.CAT_UNKNOWN_TABLE
CAT_NOT_OPEN = _irods.CAT_NOT_OPEN
CAT_FAILED_TO_LINK_TABLES = _irods.CAT_FAILED_TO_LINK_TABLES
CAT_INVALID_AUTHENTICATION = _irods.CAT_INVALID_AUTHENTICATION
CAT_INVALID_USER = _irods.CAT_INVALID_USER
CAT_INVALID_ZONE = _irods.CAT_INVALID_ZONE
CAT_INVALID_GROUP = _irods.CAT_INVALID_GROUP
CAT_INSUFFICIENT_PRIVILEGE_LEVEL = _irods.CAT_INSUFFICIENT_PRIVILEGE_LEVEL
CAT_INVALID_RESOURCE = _irods.CAT_INVALID_RESOURCE
CAT_INVALID_CLIENT_USER = _irods.CAT_INVALID_CLIENT_USER
CAT_NAME_EXISTS_AS_COLLECTION = _irods.CAT_NAME_EXISTS_AS_COLLECTION
CAT_NAME_EXISTS_AS_DATAOBJ = _irods.CAT_NAME_EXISTS_AS_DATAOBJ
CAT_RESOURCE_NOT_EMPTY = _irods.CAT_RESOURCE_NOT_EMPTY
CAT_NOT_A_DATAOBJ_AND_NOT_A_COLLECTION = _irods.CAT_NOT_A_DATAOBJ_AND_NOT_A_COLLECTION
CAT_RECURSIVE_MOVE = _irods.CAT_RECURSIVE_MOVE
CAT_LAST_REPLICA = _irods.CAT_LAST_REPLICA
CAT_OCI_ERROR = _irods.CAT_OCI_ERROR
CAT_PASSWORD_EXPIRED = _irods.CAT_PASSWORD_EXPIRED
CAT_PASSWORD_ENCODING_ERROR = _irods.CAT_PASSWORD_ENCODING_ERROR
CAT_TABLE_ACCESS_DENIED = _irods.CAT_TABLE_ACCESS_DENIED
CAT_UNKNOWN_RESOURCE = _irods.CAT_UNKNOWN_RESOURCE
CAT_UNKNOWN_SPECIFIC_QUERY = _irods.CAT_UNKNOWN_SPECIFIC_QUERY
CAT_PSEUDO_RESC_MODIFY_DISALLOWED = _irods.CAT_PSEUDO_RESC_MODIFY_DISALLOWED
CAT_HOSTNAME_INVALID = _irods.CAT_HOSTNAME_INVALID
CAT_BIND_VARIABLE_LIMIT_EXCEEDED = _irods.CAT_BIND_VARIABLE_LIMIT_EXCEEDED
RDA_NOT_COMPILED_IN = _irods.RDA_NOT_COMPILED_IN
RDA_NOT_CONNECTED = _irods.RDA_NOT_CONNECTED
RDA_ENV_ERR = _irods.RDA_ENV_ERR
RDA_CONNECT_ERR = _irods.RDA_CONNECT_ERR
RDA_DISCONNECT_ERR = _irods.RDA_DISCONNECT_ERR
RDA_CLOSE_ENV_ERR = _irods.RDA_CLOSE_ENV_ERR
RDA_SQL_ERR = _irods.RDA_SQL_ERR
RDA_CONFIG_FILE_ERR = _irods.RDA_CONFIG_FILE_ERR
RDA_ACCESS_PROHIBITED = _irods.RDA_ACCESS_PROHIBITED
RDA_NAME_NOT_FOUND = _irods.RDA_NAME_NOT_FOUND
CAT_TICKET_INVALID = _irods.CAT_TICKET_INVALID
CAT_TICKET_EXPIRED = _irods.CAT_TICKET_EXPIRED
CAT_TICKET_USES_EXCEEDED = _irods.CAT_TICKET_USES_EXCEEDED
CAT_TICKET_USER_EXCLUDED = _irods.CAT_TICKET_USER_EXCLUDED
CAT_TICKET_HOST_EXCLUDED = _irods.CAT_TICKET_HOST_EXCLUDED
CAT_TICKET_GROUP_EXCLUDED = _irods.CAT_TICKET_GROUP_EXCLUDED
CAT_TICKET_WRITE_USES_EXCEEDED = _irods.CAT_TICKET_WRITE_USES_EXCEEDED
CAT_TICKET_WRITE_BYTES_EXCEEDED = _irods.CAT_TICKET_WRITE_BYTES_EXCEEDED
FILE_OPEN_ERR = _irods.FILE_OPEN_ERR
FILE_READ_ERR = _irods.FILE_READ_ERR
FILE_WRITE_ERR = _irods.FILE_WRITE_ERR
PASSWORD_EXCEEDS_MAX_SIZE = _irods.PASSWORD_EXCEEDS_MAX_SIZE
ENVIRONMENT_VAR_HOME_NOT_DEFINED = _irods.ENVIRONMENT_VAR_HOME_NOT_DEFINED
UNABLE_TO_STAT_FILE = _irods.UNABLE_TO_STAT_FILE
AUTH_FILE_NOT_ENCRYPTED = _irods.AUTH_FILE_NOT_ENCRYPTED
AUTH_FILE_DOES_NOT_EXIST = _irods.AUTH_FILE_DOES_NOT_EXIST
UNLINK_FAILED = _irods.UNLINK_FAILED
NO_PASSWORD_ENTERED = _irods.NO_PASSWORD_ENTERED
REMOTE_SERVER_AUTHENTICATION_FAILURE = _irods.REMOTE_SERVER_AUTHENTICATION_FAILURE
REMOTE_SERVER_AUTH_NOT_PROVIDED = _irods.REMOTE_SERVER_AUTH_NOT_PROVIDED
REMOTE_SERVER_AUTH_EMPTY = _irods.REMOTE_SERVER_AUTH_EMPTY
REMOTE_SERVER_SID_NOT_DEFINED = _irods.REMOTE_SERVER_SID_NOT_DEFINED
GSI_NOT_COMPILED_IN = _irods.GSI_NOT_COMPILED_IN
GSI_NOT_BUILT_INTO_CLIENT = _irods.GSI_NOT_BUILT_INTO_CLIENT
GSI_NOT_BUILT_INTO_SERVER = _irods.GSI_NOT_BUILT_INTO_SERVER
GSI_ERROR_IMPORT_NAME = _irods.GSI_ERROR_IMPORT_NAME
GSI_ERROR_INIT_SECURITY_CONTEXT = _irods.GSI_ERROR_INIT_SECURITY_CONTEXT
GSI_ERROR_SENDING_TOKEN_LENGTH = _irods.GSI_ERROR_SENDING_TOKEN_LENGTH
GSI_ERROR_READING_TOKEN_LENGTH = _irods.GSI_ERROR_READING_TOKEN_LENGTH
GSI_ERROR_TOKEN_TOO_LARGE = _irods.GSI_ERROR_TOKEN_TOO_LARGE
GSI_ERROR_BAD_TOKEN_RCVED = _irods.GSI_ERROR_BAD_TOKEN_RCVED
GSI_SOCKET_READ_ERROR = _irods.GSI_SOCKET_READ_ERROR
GSI_PARTIAL_TOKEN_READ = _irods.GSI_PARTIAL_TOKEN_READ
GSI_SOCKET_WRITE_ERROR = _irods.GSI_SOCKET_WRITE_ERROR
GSI_ERROR_FROM_GSI_LIBRARY = _irods.GSI_ERROR_FROM_GSI_LIBRARY
GSI_ERROR_IMPORTING_NAME = _irods.GSI_ERROR_IMPORTING_NAME
GSI_ERROR_ACQUIRING_CREDS = _irods.GSI_ERROR_ACQUIRING_CREDS
GSI_ACCEPT_SEC_CONTEXT_ERROR = _irods.GSI_ACCEPT_SEC_CONTEXT_ERROR
GSI_ERROR_DISPLAYING_NAME = _irods.GSI_ERROR_DISPLAYING_NAME
GSI_ERROR_RELEASING_NAME = _irods.GSI_ERROR_RELEASING_NAME
GSI_DN_DOES_NOT_MATCH_USER = _irods.GSI_DN_DOES_NOT_MATCH_USER
GSI_QUERY_INTERNAL_ERROR = _irods.GSI_QUERY_INTERNAL_ERROR
GSI_NO_MATCHING_DN_FOUND = _irods.GSI_NO_MATCHING_DN_FOUND
GSI_MULTIPLE_MATCHING_DN_FOUND = _irods.GSI_MULTIPLE_MATCHING_DN_FOUND
KRB_NOT_COMPILED_IN = _irods.KRB_NOT_COMPILED_IN
KRB_NOT_BUILT_INTO_CLIENT = _irods.KRB_NOT_BUILT_INTO_CLIENT
KRB_NOT_BUILT_INTO_SERVER = _irods.KRB_NOT_BUILT_INTO_SERVER
KRB_ERROR_IMPORT_NAME = _irods.KRB_ERROR_IMPORT_NAME
KRB_ERROR_INIT_SECURITY_CONTEXT = _irods.KRB_ERROR_INIT_SECURITY_CONTEXT
KRB_ERROR_SENDING_TOKEN_LENGTH = _irods.KRB_ERROR_SENDING_TOKEN_LENGTH
KRB_ERROR_READING_TOKEN_LENGTH = _irods.KRB_ERROR_READING_TOKEN_LENGTH
KRB_ERROR_TOKEN_TOO_LARGE = _irods.KRB_ERROR_TOKEN_TOO_LARGE
KRB_ERROR_BAD_TOKEN_RCVED = _irods.KRB_ERROR_BAD_TOKEN_RCVED
KRB_SOCKET_READ_ERROR = _irods.KRB_SOCKET_READ_ERROR
KRB_PARTIAL_TOKEN_READ = _irods.KRB_PARTIAL_TOKEN_READ
KRB_SOCKET_WRITE_ERROR = _irods.KRB_SOCKET_WRITE_ERROR
KRB_ERROR_FROM_KRB_LIBRARY = _irods.KRB_ERROR_FROM_KRB_LIBRARY
KRB_ERROR_IMPORTING_NAME = _irods.KRB_ERROR_IMPORTING_NAME
KRB_ERROR_ACQUIRING_CREDS = _irods.KRB_ERROR_ACQUIRING_CREDS
KRB_ACCEPT_SEC_CONTEXT_ERROR = _irods.KRB_ACCEPT_SEC_CONTEXT_ERROR
KRB_ERROR_DISPLAYING_NAME = _irods.KRB_ERROR_DISPLAYING_NAME
KRB_ERROR_RELEASING_NAME = _irods.KRB_ERROR_RELEASING_NAME
KRB_USER_DN_NOT_FOUND = _irods.KRB_USER_DN_NOT_FOUND
KRB_NAME_MATCHES_MULTIPLE_USERS = _irods.KRB_NAME_MATCHES_MULTIPLE_USERS
KRB_QUERY_INTERNAL_ERROR = _irods.KRB_QUERY_INTERNAL_ERROR
OSAUTH_NOT_BUILT_INTO_CLIENT = _irods.OSAUTH_NOT_BUILT_INTO_CLIENT
OSAUTH_NOT_BUILT_INTO_SERVER = _irods.OSAUTH_NOT_BUILT_INTO_SERVER
PAM_AUTH_NOT_BUILT_INTO_CLIENT = _irods.PAM_AUTH_NOT_BUILT_INTO_CLIENT
PAM_AUTH_NOT_BUILT_INTO_SERVER = _irods.PAM_AUTH_NOT_BUILT_INTO_SERVER
PAM_AUTH_PASSWORD_FAILED = _irods.PAM_AUTH_PASSWORD_FAILED
OBJPATH_EMPTY_IN_STRUCT_ERR = _irods.OBJPATH_EMPTY_IN_STRUCT_ERR
RESCNAME_EMPTY_IN_STRUCT_ERR = _irods.RESCNAME_EMPTY_IN_STRUCT_ERR
DATATYPE_EMPTY_IN_STRUCT_ERR = _irods.DATATYPE_EMPTY_IN_STRUCT_ERR
DATASIZE_EMPTY_IN_STRUCT_ERR = _irods.DATASIZE_EMPTY_IN_STRUCT_ERR
CHKSUM_EMPTY_IN_STRUCT_ERR = _irods.CHKSUM_EMPTY_IN_STRUCT_ERR
VERSION_EMPTY_IN_STRUCT_ERR = _irods.VERSION_EMPTY_IN_STRUCT_ERR
FILEPATH_EMPTY_IN_STRUCT_ERR = _irods.FILEPATH_EMPTY_IN_STRUCT_ERR
REPLNUM_EMPTY_IN_STRUCT_ERR = _irods.REPLNUM_EMPTY_IN_STRUCT_ERR
REPLSTATUS_EMPTY_IN_STRUCT_ERR = _irods.REPLSTATUS_EMPTY_IN_STRUCT_ERR
DATAOWNER_EMPTY_IN_STRUCT_ERR = _irods.DATAOWNER_EMPTY_IN_STRUCT_ERR
DATAOWNERZONE_EMPTY_IN_STRUCT_ERR = _irods.DATAOWNERZONE_EMPTY_IN_STRUCT_ERR
DATAEXPIRY_EMPTY_IN_STRUCT_ERR = _irods.DATAEXPIRY_EMPTY_IN_STRUCT_ERR
DATACOMMENTS_EMPTY_IN_STRUCT_ERR = _irods.DATACOMMENTS_EMPTY_IN_STRUCT_ERR
DATACREATE_EMPTY_IN_STRUCT_ERR = _irods.DATACREATE_EMPTY_IN_STRUCT_ERR
DATAMODIFY_EMPTY_IN_STRUCT_ERR = _irods.DATAMODIFY_EMPTY_IN_STRUCT_ERR
DATAACCESS_EMPTY_IN_STRUCT_ERR = _irods.DATAACCESS_EMPTY_IN_STRUCT_ERR
DATAACCESSINX_EMPTY_IN_STRUCT_ERR = _irods.DATAACCESSINX_EMPTY_IN_STRUCT_ERR
NO_RULE_FOUND_ERR = _irods.NO_RULE_FOUND_ERR
NO_MORE_RULES_ERR = _irods.NO_MORE_RULES_ERR
UNMATCHED_ACTION_ERR = _irods.UNMATCHED_ACTION_ERR
RULES_FILE_READ_ERROR = _irods.RULES_FILE_READ_ERROR
ACTION_ARG_COUNT_MISMATCH = _irods.ACTION_ARG_COUNT_MISMATCH
MAX_NUM_OF_ARGS_IN_ACTION_EXCEEDED = _irods.MAX_NUM_OF_ARGS_IN_ACTION_EXCEEDED
UNKNOWN_PARAM_IN_RULE_ERR = _irods.UNKNOWN_PARAM_IN_RULE_ERR
DESTRESCNAME_EMPTY_IN_STRUCT_ERR = _irods.DESTRESCNAME_EMPTY_IN_STRUCT_ERR
BACKUPRESCNAME_EMPTY_IN_STRUCT_ERR = _irods.BACKUPRESCNAME_EMPTY_IN_STRUCT_ERR
DATAID_EMPTY_IN_STRUCT_ERR = _irods.DATAID_EMPTY_IN_STRUCT_ERR
COLLID_EMPTY_IN_STRUCT_ERR = _irods.COLLID_EMPTY_IN_STRUCT_ERR
RESCGROUPNAME_EMPTY_IN_STRUCT_ERR = _irods.RESCGROUPNAME_EMPTY_IN_STRUCT_ERR
STATUSSTRING_EMPTY_IN_STRUCT_ERR = _irods.STATUSSTRING_EMPTY_IN_STRUCT_ERR
DATAMAPID_EMPTY_IN_STRUCT_ERR = _irods.DATAMAPID_EMPTY_IN_STRUCT_ERR
USERNAMECLIENT_EMPTY_IN_STRUCT_ERR = _irods.USERNAMECLIENT_EMPTY_IN_STRUCT_ERR
RODSZONECLIENT_EMPTY_IN_STRUCT_ERR = _irods.RODSZONECLIENT_EMPTY_IN_STRUCT_ERR
USERTYPECLIENT_EMPTY_IN_STRUCT_ERR = _irods.USERTYPECLIENT_EMPTY_IN_STRUCT_ERR
HOSTCLIENT_EMPTY_IN_STRUCT_ERR = _irods.HOSTCLIENT_EMPTY_IN_STRUCT_ERR
AUTHSTRCLIENT_EMPTY_IN_STRUCT_ERR = _irods.AUTHSTRCLIENT_EMPTY_IN_STRUCT_ERR
USERAUTHSCHEMECLIENT_EMPTY_IN_STRUCT_ERR = _irods.USERAUTHSCHEMECLIENT_EMPTY_IN_STRUCT_ERR
USERINFOCLIENT_EMPTY_IN_STRUCT_ERR = _irods.USERINFOCLIENT_EMPTY_IN_STRUCT_ERR
USERCOMMENTCLIENT_EMPTY_IN_STRUCT_ERR = _irods.USERCOMMENTCLIENT_EMPTY_IN_STRUCT_ERR
USERCREATECLIENT_EMPTY_IN_STRUCT_ERR = _irods.USERCREATECLIENT_EMPTY_IN_STRUCT_ERR
USERMODIFYCLIENT_EMPTY_IN_STRUCT_ERR = _irods.USERMODIFYCLIENT_EMPTY_IN_STRUCT_ERR
USERNAMEPROXY_EMPTY_IN_STRUCT_ERR = _irods.USERNAMEPROXY_EMPTY_IN_STRUCT_ERR
RODSZONEPROXY_EMPTY_IN_STRUCT_ERR = _irods.RODSZONEPROXY_EMPTY_IN_STRUCT_ERR
USERTYPEPROXY_EMPTY_IN_STRUCT_ERR = _irods.USERTYPEPROXY_EMPTY_IN_STRUCT_ERR
HOSTPROXY_EMPTY_IN_STRUCT_ERR = _irods.HOSTPROXY_EMPTY_IN_STRUCT_ERR
AUTHSTRPROXY_EMPTY_IN_STRUCT_ERR = _irods.AUTHSTRPROXY_EMPTY_IN_STRUCT_ERR
USERAUTHSCHEMEPROXY_EMPTY_IN_STRUCT_ERR = _irods.USERAUTHSCHEMEPROXY_EMPTY_IN_STRUCT_ERR
USERINFOPROXY_EMPTY_IN_STRUCT_ERR = _irods.USERINFOPROXY_EMPTY_IN_STRUCT_ERR
USERCOMMENTPROXY_EMPTY_IN_STRUCT_ERR = _irods.USERCOMMENTPROXY_EMPTY_IN_STRUCT_ERR
USERCREATEPROXY_EMPTY_IN_STRUCT_ERR = _irods.USERCREATEPROXY_EMPTY_IN_STRUCT_ERR
USERMODIFYPROXY_EMPTY_IN_STRUCT_ERR = _irods.USERMODIFYPROXY_EMPTY_IN_STRUCT_ERR
COLLNAME_EMPTY_IN_STRUCT_ERR = _irods.COLLNAME_EMPTY_IN_STRUCT_ERR
COLLPARENTNAME_EMPTY_IN_STRUCT_ERR = _irods.COLLPARENTNAME_EMPTY_IN_STRUCT_ERR
COLLOWNERNAME_EMPTY_IN_STRUCT_ERR = _irods.COLLOWNERNAME_EMPTY_IN_STRUCT_ERR
COLLOWNERZONE_EMPTY_IN_STRUCT_ERR = _irods.COLLOWNERZONE_EMPTY_IN_STRUCT_ERR
COLLEXPIRY_EMPTY_IN_STRUCT_ERR = _irods.COLLEXPIRY_EMPTY_IN_STRUCT_ERR
COLLCOMMENTS_EMPTY_IN_STRUCT_ERR = _irods.COLLCOMMENTS_EMPTY_IN_STRUCT_ERR
COLLCREATE_EMPTY_IN_STRUCT_ERR = _irods.COLLCREATE_EMPTY_IN_STRUCT_ERR
COLLMODIFY_EMPTY_IN_STRUCT_ERR = _irods.COLLMODIFY_EMPTY_IN_STRUCT_ERR
COLLACCESS_EMPTY_IN_STRUCT_ERR = _irods.COLLACCESS_EMPTY_IN_STRUCT_ERR
COLLACCESSINX_EMPTY_IN_STRUCT_ERR = _irods.COLLACCESSINX_EMPTY_IN_STRUCT_ERR
COLLMAPID_EMPTY_IN_STRUCT_ERR = _irods.COLLMAPID_EMPTY_IN_STRUCT_ERR
COLLINHERITANCE_EMPTY_IN_STRUCT_ERR = _irods.COLLINHERITANCE_EMPTY_IN_STRUCT_ERR
RESCZONE_EMPTY_IN_STRUCT_ERR = _irods.RESCZONE_EMPTY_IN_STRUCT_ERR
RESCLOC_EMPTY_IN_STRUCT_ERR = _irods.RESCLOC_EMPTY_IN_STRUCT_ERR
RESCTYPE_EMPTY_IN_STRUCT_ERR = _irods.RESCTYPE_EMPTY_IN_STRUCT_ERR
RESCTYPEINX_EMPTY_IN_STRUCT_ERR = _irods.RESCTYPEINX_EMPTY_IN_STRUCT_ERR
RESCCLASS_EMPTY_IN_STRUCT_ERR = _irods.RESCCLASS_EMPTY_IN_STRUCT_ERR
RESCCLASSINX_EMPTY_IN_STRUCT_ERR = _irods.RESCCLASSINX_EMPTY_IN_STRUCT_ERR
RESCVAULTPATH_EMPTY_IN_STRUCT_ERR = _irods.RESCVAULTPATH_EMPTY_IN_STRUCT_ERR
NUMOPEN_ORTS_EMPTY_IN_STRUCT_ERR = _irods.NUMOPEN_ORTS_EMPTY_IN_STRUCT_ERR
PARAOPR_EMPTY_IN_STRUCT_ERR = _irods.PARAOPR_EMPTY_IN_STRUCT_ERR
RESCID_EMPTY_IN_STRUCT_ERR = _irods.RESCID_EMPTY_IN_STRUCT_ERR
GATEWAYADDR_EMPTY_IN_STRUCT_ERR = _irods.GATEWAYADDR_EMPTY_IN_STRUCT_ERR
RESCMAX_BJSIZE_EMPTY_IN_STRUCT_ERR = _irods.RESCMAX_BJSIZE_EMPTY_IN_STRUCT_ERR
FREESPACE_EMPTY_IN_STRUCT_ERR = _irods.FREESPACE_EMPTY_IN_STRUCT_ERR
FREESPACETIME_EMPTY_IN_STRUCT_ERR = _irods.FREESPACETIME_EMPTY_IN_STRUCT_ERR
FREESPACETIMESTAMP_EMPTY_IN_STRUCT_ERR = _irods.FREESPACETIMESTAMP_EMPTY_IN_STRUCT_ERR
RESCINFO_EMPTY_IN_STRUCT_ERR = _irods.RESCINFO_EMPTY_IN_STRUCT_ERR
RESCCOMMENTS_EMPTY_IN_STRUCT_ERR = _irods.RESCCOMMENTS_EMPTY_IN_STRUCT_ERR
RESCCREATE_EMPTY_IN_STRUCT_ERR = _irods.RESCCREATE_EMPTY_IN_STRUCT_ERR
RESCMODIFY_EMPTY_IN_STRUCT_ERR = _irods.RESCMODIFY_EMPTY_IN_STRUCT_ERR
INPUT_ARG_NOT_WELL_FORMED_ERR = _irods.INPUT_ARG_NOT_WELL_FORMED_ERR
INPUT_ARG_OUT_OF_ARGC_RANGE_ERR = _irods.INPUT_ARG_OUT_OF_ARGC_RANGE_ERR
INSUFFICIENT_INPUT_ARG_ERR = _irods.INSUFFICIENT_INPUT_ARG_ERR
INPUT_ARG_DOES_NOT_MATCH_ERR = _irods.INPUT_ARG_DOES_NOT_MATCH_ERR
RETRY_WITHOUT_RECOVERY_ERR = _irods.RETRY_WITHOUT_RECOVERY_ERR
CUT_ACTION_PROCESSED_ERR = _irods.CUT_ACTION_PROCESSED_ERR
ACTION_FAILED_ERR = _irods.ACTION_FAILED_ERR
FAIL_ACTION_ENCOUNTERED_ERR = _irods.FAIL_ACTION_ENCOUNTERED_ERR
VARIABLE_NAME_TOO_LONG_ERR = _irods.VARIABLE_NAME_TOO_LONG_ERR
UNKNOWN_VARIABLE_MAP_ERR = _irods.UNKNOWN_VARIABLE_MAP_ERR
UNDEFINED_VARIABLE_MAP_ERR = _irods.UNDEFINED_VARIABLE_MAP_ERR
NULL_VALUE_ERR = _irods.NULL_VALUE_ERR
DVARMAP_FILE_READ_ERROR = _irods.DVARMAP_FILE_READ_ERROR
NO_RULE_OR_MSI_FUNCTION_FOUND_ERR = _irods.NO_RULE_OR_MSI_FUNCTION_FOUND_ERR
FILE_CREATE_ERROR = _irods.FILE_CREATE_ERROR
FMAP_FILE_READ_ERROR = _irods.FMAP_FILE_READ_ERROR
DATE_FORMAT_ERR = _irods.DATE_FORMAT_ERR
RULE_FAILED_ERR = _irods.RULE_FAILED_ERR
NO_MICROSERVICE_FOUND_ERR = _irods.NO_MICROSERVICE_FOUND_ERR
INVALID_REGEXP = _irods.INVALID_REGEXP
INVALID_OBJECT_NAME = _irods.INVALID_OBJECT_NAME
INVALID_OBJECT_TYPE = _irods.INVALID_OBJECT_TYPE
NO_VALUES_FOUND = _irods.NO_VALUES_FOUND
NO_COLUMN_NAME_FOUND = _irods.NO_COLUMN_NAME_FOUND
BREAK_ACTION_ENCOUNTERED_ERR = _irods.BREAK_ACTION_ENCOUNTERED_ERR
CUT_ACTION_ON_SUCCESS_PROCESSED_ERR = _irods.CUT_ACTION_ON_SUCCESS_PROCESSED_ERR
MSI_OPERATION_NOT_ALLOWED = _irods.MSI_OPERATION_NOT_ALLOWED
MAX_NUM_OF_ACTION_IN_RULE_EXCEEDED = _irods.MAX_NUM_OF_ACTION_IN_RULE_EXCEEDED
MSRVC_FILE_READ_ERROR = _irods.MSRVC_FILE_READ_ERROR
MSRVC_VERSION_MISMATCH = _irods.MSRVC_VERSION_MISMATCH
MICRO_SERVICE_OBJECT_TYPE_UNDEFINED = _irods.MICRO_SERVICE_OBJECT_TYPE_UNDEFINED
MSO_OBJ_GET_FAILED = _irods.MSO_OBJ_GET_FAILED
REMOTE_IRODS_CONNECT_ERR = _irods.REMOTE_IRODS_CONNECT_ERR
REMOTE_SRB_CONNECT_ERR = _irods.REMOTE_SRB_CONNECT_ERR
RE_PARSER_ERROR = _irods.RE_PARSER_ERROR
RE_UNPARSED_SUFFIX = _irods.RE_UNPARSED_SUFFIX
RE_POINTER_ERROR = _irods.RE_POINTER_ERROR
RE_RUNTIME_ERROR = _irods.RE_RUNTIME_ERROR
RE_DIVISION_BY_ZERO = _irods.RE_DIVISION_BY_ZERO
RE_BUFFER_OVERFLOW = _irods.RE_BUFFER_OVERFLOW
RE_UNSUPPORTED_OP_OR_TYPE = _irods.RE_UNSUPPORTED_OP_OR_TYPE
RE_UNSUPPORTED_SESSION_VAR = _irods.RE_UNSUPPORTED_SESSION_VAR
RE_UNABLE_TO_WRITE_LOCAL_VAR = _irods.RE_UNABLE_TO_WRITE_LOCAL_VAR
RE_UNABLE_TO_READ_LOCAL_VAR = _irods.RE_UNABLE_TO_READ_LOCAL_VAR
RE_UNABLE_TO_WRITE_SESSION_VAR = _irods.RE_UNABLE_TO_WRITE_SESSION_VAR
RE_UNABLE_TO_READ_SESSION_VAR = _irods.RE_UNABLE_TO_READ_SESSION_VAR
RE_UNABLE_TO_WRITE_VAR = _irods.RE_UNABLE_TO_WRITE_VAR
RE_UNABLE_TO_READ_VAR = _irods.RE_UNABLE_TO_READ_VAR
RE_PATTERN_NOT_MATCHED = _irods.RE_PATTERN_NOT_MATCHED
RE_STRING_OVERFLOW = _irods.RE_STRING_OVERFLOW
RE_UNKNOWN_ERROR = _irods.RE_UNKNOWN_ERROR
RE_OUT_OF_MEMORY = _irods.RE_OUT_OF_MEMORY
RE_SHM_UNLINK_ERROR = _irods.RE_SHM_UNLINK_ERROR
RE_FILE_STAT_ERROR = _irods.RE_FILE_STAT_ERROR
RE_UNSUPPORTED_AST_NODE_TYPE = _irods.RE_UNSUPPORTED_AST_NODE_TYPE
RE_UNSUPPORTED_SESSION_VAR_TYPE = _irods.RE_UNSUPPORTED_SESSION_VAR_TYPE
RE_TYPE_ERROR = _irods.RE_TYPE_ERROR
RE_FUNCTION_REDEFINITION = _irods.RE_FUNCTION_REDEFINITION
RE_DYNAMIC_TYPE_ERROR = _irods.RE_DYNAMIC_TYPE_ERROR
RE_DYNAMIC_COERCION_ERROR = _irods.RE_DYNAMIC_COERCION_ERROR
RE_PACKING_ERROR = _irods.RE_PACKING_ERROR
PHP_EXEC_SCRIPT_ERR = _irods.PHP_EXEC_SCRIPT_ERR
PHP_REQUEST_STARTUP_ERR = _irods.PHP_REQUEST_STARTUP_ERR
PHP_OPEN_SCRIPT_FILE_ERR = _irods.PHP_OPEN_SCRIPT_FILE_ERR
DBR_NOT_COMPILED_IN = _irods.DBR_NOT_COMPILED_IN
DBR_ENV_ERR = _irods.DBR_ENV_ERR
DBR_CONNECT_ERR = _irods.DBR_CONNECT_ERR
DBR_DISCONNECT_ERR = _irods.DBR_DISCONNECT_ERR
DBR_CLOSE_ENV_ERR = _irods.DBR_CLOSE_ENV_ERR
DBO_SQL_ERR = _irods.DBO_SQL_ERR
DBR_CONFIG_FILE_ERR = _irods.DBR_CONFIG_FILE_ERR
DBR_MAX_SESSIONS_REACHED = _irods.DBR_MAX_SESSIONS_REACHED
DBR_NOT_OPEN = _irods.DBR_NOT_OPEN
DBR_NAME_NOT_FOUND = _irods.DBR_NAME_NOT_FOUND
DBO_INVALID_CONTROL_OPTION = _irods.DBO_INVALID_CONTROL_OPTION
DBR_ALREADY_OPEN = _irods.DBR_ALREADY_OPEN
DBO_DOES_NOT_EXIST = _irods.DBO_DOES_NOT_EXIST
DBR_ACCESS_PROHIBITED = _irods.DBR_ACCESS_PROHIBITED
DBO_NOT_VALID_DATATYPE = _irods.DBO_NOT_VALID_DATATYPE
DBR_WRITABLE_BY_TOO_MANY = _irods.DBR_WRITABLE_BY_TOO_MANY
DBO_WRITABLE_BY_TOO_MANY = _irods.DBO_WRITABLE_BY_TOO_MANY
DBO_WRITABLE_BY_NON_PRIVILEGED = _irods.DBO_WRITABLE_BY_NON_PRIVILEGED
NETCDF_OPEN_ERR = _irods.NETCDF_OPEN_ERR
NETCDF_CREATE_ERR = _irods.NETCDF_CREATE_ERR
NETCDF_CLOSE_ERR = _irods.NETCDF_CLOSE_ERR
NETCDF_INVALID_PARAM_TYPE = _irods.NETCDF_INVALID_PARAM_TYPE
NETCDF_INQ_ID_ERR = _irods.NETCDF_INQ_ID_ERR
NETCDF_GET_VARS_ERR = _irods.NETCDF_GET_VARS_ERR
NETCDF_INVALID_DATA_TYPE = _irods.NETCDF_INVALID_DATA_TYPE
NETCDF_INQ_VARS_ERR = _irods.NETCDF_INQ_VARS_ERR
NETCDF_VARS_DATA_TOO_BIG = _irods.NETCDF_VARS_DATA_TOO_BIG
NETCDF_DIM_MISMATCH_ERR = _irods.NETCDF_DIM_MISMATCH_ERR
NETCDF_INQ_ERR = _irods.NETCDF_INQ_ERR
NETCDF_INQ_FORMAT_ERR = _irods.NETCDF_INQ_FORMAT_ERR
NETCDF_INQ_DIM_ERR = _irods.NETCDF_INQ_DIM_ERR
NETCDF_INQ_ATT_ERR = _irods.NETCDF_INQ_ATT_ERR
NETCDF_GET_ATT_ERR = _irods.NETCDF_GET_ATT_ERR
NETCDF_VAR_COUNT_OUT_OF_RANGE = _irods.NETCDF_VAR_COUNT_OUT_OF_RANGE
NETCDF_UNMATCHED_NAME_ERR = _irods.NETCDF_UNMATCHED_NAME_ERR
NETCDF_NO_UNLIMITED_DIM = _irods.NETCDF_NO_UNLIMITED_DIM
NETCDF_PUT_ATT_ERR = _irods.NETCDF_PUT_ATT_ERR
NETCDF_DEF_DIM_ERR = _irods.NETCDF_DEF_DIM_ERR
NETCDF_DEF_VAR_ERR = _irods.NETCDF_DEF_VAR_ERR
NETCDF_PUT_VARS_ERR = _irods.NETCDF_PUT_VARS_ERR
SSL_NOT_BUILT_INTO_CLIENT = _irods.SSL_NOT_BUILT_INTO_CLIENT
SSL_NOT_BUILT_INTO_SERVER = _irods.SSL_NOT_BUILT_INTO_SERVER
SSL_INIT_ERROR = _irods.SSL_INIT_ERROR
SSL_HANDSHAKE_ERROR = _irods.SSL_HANDSHAKE_ERROR
SSL_SHUTDOWN_ERROR = _irods.SSL_SHUTDOWN_ERROR
SSL_CERT_ERROR = _irods.SSL_CERT_ERROR
OOI_CURL_EASY_INIT_ERR = _irods.OOI_CURL_EASY_INIT_ERR
OOI_JSON_OBJ_SET_ERR = _irods.OOI_JSON_OBJ_SET_ERR
OOI_DICT_TYPE_NOT_SUPPORTED = _irods.OOI_DICT_TYPE_NOT_SUPPORTED
OOI_JSON_PACK_ERR = _irods.OOI_JSON_PACK_ERR
OOI_JSON_DUMP_ERR = _irods.OOI_JSON_DUMP_ERR
OOI_CURL_EASY_PERFORM_ERR = _irods.OOI_CURL_EASY_PERFORM_ERR
OOI_JSON_LOAD_ERR = _irods.OOI_JSON_LOAD_ERR
OOI_JSON_GET_ERR = _irods.OOI_JSON_GET_ERR
OOI_JSON_NO_ANSWER_ERR = _irods.OOI_JSON_NO_ANSWER_ERR
OOI_JSON_TYPE_ERR = _irods.OOI_JSON_TYPE_ERR
OOI_JSON_INX_OUT_OF_RANGE = _irods.OOI_JSON_INX_OUT_OF_RANGE
OOI_REVID_NOT_FOUND = _irods.OOI_REVID_NOT_FOUND
XML_PARSING_ERR = _irods.XML_PARSING_ERR
OUT_OF_URL_PATH = _irods.OUT_OF_URL_PATH
URL_PATH_INX_OUT_OF_RANGE = _irods.URL_PATH_INX_OUT_OF_RANGE
SYS_NULL_INPUT = _irods.SYS_NULL_INPUT
SYS_HANDLER_DONE_WITH_ERROR = _irods.SYS_HANDLER_DONE_WITH_ERROR
SYS_HANDLER_DONE_NO_ERROR = _irods.SYS_HANDLER_DONE_NO_ERROR
SYS_NO_HANDLER_REPLY_MSG = _irods.SYS_NO_HANDLER_REPLY_MSG
class execCmd_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, execCmd_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, execCmd_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmd"] = _irods.execCmd_t_cmd_set
    __swig_getmethods__["cmd"] = _irods.execCmd_t_cmd_get
    if _newclass:cmd = _swig_property(_irods.execCmd_t_cmd_get, _irods.execCmd_t_cmd_set)
    __swig_setmethods__["cmdArgv"] = _irods.execCmd_t_cmdArgv_set
    __swig_getmethods__["cmdArgv"] = _irods.execCmd_t_cmdArgv_get
    if _newclass:cmdArgv = _swig_property(_irods.execCmd_t_cmdArgv_get, _irods.execCmd_t_cmdArgv_set)
    __swig_setmethods__["execAddr"] = _irods.execCmd_t_execAddr_set
    __swig_getmethods__["execAddr"] = _irods.execCmd_t_execAddr_get
    if _newclass:execAddr = _swig_property(_irods.execCmd_t_execAddr_get, _irods.execCmd_t_execAddr_set)
    __swig_setmethods__["hintPath"] = _irods.execCmd_t_hintPath_set
    __swig_getmethods__["hintPath"] = _irods.execCmd_t_hintPath_get
    if _newclass:hintPath = _swig_property(_irods.execCmd_t_hintPath_get, _irods.execCmd_t_hintPath_set)
    __swig_setmethods__["addPathToArgv"] = _irods.execCmd_t_addPathToArgv_set
    __swig_getmethods__["addPathToArgv"] = _irods.execCmd_t_addPathToArgv_get
    if _newclass:addPathToArgv = _swig_property(_irods.execCmd_t_addPathToArgv_get, _irods.execCmd_t_addPathToArgv_set)
    __swig_setmethods__["dummy"] = _irods.execCmd_t_dummy_set
    __swig_getmethods__["dummy"] = _irods.execCmd_t_dummy_get
    if _newclass:dummy = _swig_property(_irods.execCmd_t_dummy_get, _irods.execCmd_t_dummy_set)
    __swig_setmethods__["condInput"] = _irods.execCmd_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.execCmd_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.execCmd_t_condInput_get, _irods.execCmd_t_condInput_set)
    def __init__(self): 
        this = _irods.new_execCmd_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_execCmd_t
    __del__ = lambda self : None;
execCmd_t_swigregister = _irods.execCmd_t_swigregister
execCmd_t_swigregister(execCmd_t)

class execCmdOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, execCmdOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, execCmdOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stdoutBuf"] = _irods.execCmdOut_t_stdoutBuf_set
    __swig_getmethods__["stdoutBuf"] = _irods.execCmdOut_t_stdoutBuf_get
    if _newclass:stdoutBuf = _swig_property(_irods.execCmdOut_t_stdoutBuf_get, _irods.execCmdOut_t_stdoutBuf_set)
    __swig_setmethods__["stderrBuf"] = _irods.execCmdOut_t_stderrBuf_set
    __swig_getmethods__["stderrBuf"] = _irods.execCmdOut_t_stderrBuf_get
    if _newclass:stderrBuf = _swig_property(_irods.execCmdOut_t_stderrBuf_get, _irods.execCmdOut_t_stderrBuf_set)
    __swig_setmethods__["status"] = _irods.execCmdOut_t_status_set
    __swig_getmethods__["status"] = _irods.execCmdOut_t_status_get
    if _newclass:status = _swig_property(_irods.execCmdOut_t_status_get, _irods.execCmdOut_t_status_set)
    def __init__(self): 
        this = _irods.new_execCmdOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_execCmdOut_t
    __del__ = lambda self : None;
execCmdOut_t_swigregister = _irods.execCmdOut_t_swigregister
execCmdOut_t_swigregister(execCmdOut_t)

class execMyRuleInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, execMyRuleInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, execMyRuleInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["myRule"] = _irods.execMyRuleInp_t_myRule_set
    __swig_getmethods__["myRule"] = _irods.execMyRuleInp_t_myRule_get
    if _newclass:myRule = _swig_property(_irods.execMyRuleInp_t_myRule_get, _irods.execMyRuleInp_t_myRule_set)
    __swig_setmethods__["addr"] = _irods.execMyRuleInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.execMyRuleInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.execMyRuleInp_t_addr_get, _irods.execMyRuleInp_t_addr_set)
    __swig_setmethods__["condInput"] = _irods.execMyRuleInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.execMyRuleInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.execMyRuleInp_t_condInput_get, _irods.execMyRuleInp_t_condInput_set)
    __swig_setmethods__["outParamDesc"] = _irods.execMyRuleInp_t_outParamDesc_set
    __swig_getmethods__["outParamDesc"] = _irods.execMyRuleInp_t_outParamDesc_get
    if _newclass:outParamDesc = _swig_property(_irods.execMyRuleInp_t_outParamDesc_get, _irods.execMyRuleInp_t_outParamDesc_set)
    __swig_setmethods__["inpParamArray"] = _irods.execMyRuleInp_t_inpParamArray_set
    __swig_getmethods__["inpParamArray"] = _irods.execMyRuleInp_t_inpParamArray_get
    if _newclass:inpParamArray = _swig_property(_irods.execMyRuleInp_t_inpParamArray_get, _irods.execMyRuleInp_t_inpParamArray_set)
    def __init__(self): 
        this = _irods.new_execMyRuleInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_execMyRuleInp_t
    __del__ = lambda self : None;
execMyRuleInp_t_swigregister = _irods.execMyRuleInp_t_swigregister
execMyRuleInp_t_swigregister(execMyRuleInp_t)

class ruleExecDelInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ruleExecDelInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ruleExecDelInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ruleExecId"] = _irods.ruleExecDelInp_t_ruleExecId_set
    __swig_getmethods__["ruleExecId"] = _irods.ruleExecDelInp_t_ruleExecId_get
    if _newclass:ruleExecId = _swig_property(_irods.ruleExecDelInp_t_ruleExecId_get, _irods.ruleExecDelInp_t_ruleExecId_set)
    def __init__(self): 
        this = _irods.new_ruleExecDelInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_ruleExecDelInp_t
    __del__ = lambda self : None;
ruleExecDelInp_t_swigregister = _irods.ruleExecDelInp_t_swigregister
ruleExecDelInp_t_swigregister(ruleExecDelInp_t)

class ruleExecModInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ruleExecModInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ruleExecModInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ruleId"] = _irods.ruleExecModInp_t_ruleId_set
    __swig_getmethods__["ruleId"] = _irods.ruleExecModInp_t_ruleId_get
    if _newclass:ruleId = _swig_property(_irods.ruleExecModInp_t_ruleId_get, _irods.ruleExecModInp_t_ruleId_set)
    __swig_setmethods__["condInput"] = _irods.ruleExecModInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.ruleExecModInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.ruleExecModInp_t_condInput_get, _irods.ruleExecModInp_t_condInput_set)
    def __init__(self): 
        this = _irods.new_ruleExecModInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_ruleExecModInp_t
    __del__ = lambda self : None;
ruleExecModInp_t_swigregister = _irods.ruleExecModInp_t_swigregister
ruleExecModInp_t_swigregister(ruleExecModInp_t)

class ruleExecSubmitInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ruleExecSubmitInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ruleExecSubmitInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ruleName"] = _irods.ruleExecSubmitInp_t_ruleName_set
    __swig_getmethods__["ruleName"] = _irods.ruleExecSubmitInp_t_ruleName_get
    if _newclass:ruleName = _swig_property(_irods.ruleExecSubmitInp_t_ruleName_get, _irods.ruleExecSubmitInp_t_ruleName_set)
    __swig_setmethods__["reiFilePath"] = _irods.ruleExecSubmitInp_t_reiFilePath_set
    __swig_getmethods__["reiFilePath"] = _irods.ruleExecSubmitInp_t_reiFilePath_get
    if _newclass:reiFilePath = _swig_property(_irods.ruleExecSubmitInp_t_reiFilePath_get, _irods.ruleExecSubmitInp_t_reiFilePath_set)
    __swig_setmethods__["userName"] = _irods.ruleExecSubmitInp_t_userName_set
    __swig_getmethods__["userName"] = _irods.ruleExecSubmitInp_t_userName_get
    if _newclass:userName = _swig_property(_irods.ruleExecSubmitInp_t_userName_get, _irods.ruleExecSubmitInp_t_userName_set)
    __swig_setmethods__["exeAddress"] = _irods.ruleExecSubmitInp_t_exeAddress_set
    __swig_getmethods__["exeAddress"] = _irods.ruleExecSubmitInp_t_exeAddress_get
    if _newclass:exeAddress = _swig_property(_irods.ruleExecSubmitInp_t_exeAddress_get, _irods.ruleExecSubmitInp_t_exeAddress_set)
    __swig_setmethods__["exeTime"] = _irods.ruleExecSubmitInp_t_exeTime_set
    __swig_getmethods__["exeTime"] = _irods.ruleExecSubmitInp_t_exeTime_get
    if _newclass:exeTime = _swig_property(_irods.ruleExecSubmitInp_t_exeTime_get, _irods.ruleExecSubmitInp_t_exeTime_set)
    __swig_setmethods__["exeFrequency"] = _irods.ruleExecSubmitInp_t_exeFrequency_set
    __swig_getmethods__["exeFrequency"] = _irods.ruleExecSubmitInp_t_exeFrequency_get
    if _newclass:exeFrequency = _swig_property(_irods.ruleExecSubmitInp_t_exeFrequency_get, _irods.ruleExecSubmitInp_t_exeFrequency_set)
    __swig_setmethods__["priority"] = _irods.ruleExecSubmitInp_t_priority_set
    __swig_getmethods__["priority"] = _irods.ruleExecSubmitInp_t_priority_get
    if _newclass:priority = _swig_property(_irods.ruleExecSubmitInp_t_priority_get, _irods.ruleExecSubmitInp_t_priority_set)
    __swig_setmethods__["lastExecTime"] = _irods.ruleExecSubmitInp_t_lastExecTime_set
    __swig_getmethods__["lastExecTime"] = _irods.ruleExecSubmitInp_t_lastExecTime_get
    if _newclass:lastExecTime = _swig_property(_irods.ruleExecSubmitInp_t_lastExecTime_get, _irods.ruleExecSubmitInp_t_lastExecTime_set)
    __swig_setmethods__["exeStatus"] = _irods.ruleExecSubmitInp_t_exeStatus_set
    __swig_getmethods__["exeStatus"] = _irods.ruleExecSubmitInp_t_exeStatus_get
    if _newclass:exeStatus = _swig_property(_irods.ruleExecSubmitInp_t_exeStatus_get, _irods.ruleExecSubmitInp_t_exeStatus_set)
    __swig_setmethods__["estimateExeTime"] = _irods.ruleExecSubmitInp_t_estimateExeTime_set
    __swig_getmethods__["estimateExeTime"] = _irods.ruleExecSubmitInp_t_estimateExeTime_get
    if _newclass:estimateExeTime = _swig_property(_irods.ruleExecSubmitInp_t_estimateExeTime_get, _irods.ruleExecSubmitInp_t_estimateExeTime_set)
    __swig_setmethods__["notificationAddr"] = _irods.ruleExecSubmitInp_t_notificationAddr_set
    __swig_getmethods__["notificationAddr"] = _irods.ruleExecSubmitInp_t_notificationAddr_get
    if _newclass:notificationAddr = _swig_property(_irods.ruleExecSubmitInp_t_notificationAddr_get, _irods.ruleExecSubmitInp_t_notificationAddr_set)
    __swig_setmethods__["condInput"] = _irods.ruleExecSubmitInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.ruleExecSubmitInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.ruleExecSubmitInp_t_condInput_get, _irods.ruleExecSubmitInp_t_condInput_set)
    __swig_setmethods__["packedReiAndArgBBuf"] = _irods.ruleExecSubmitInp_t_packedReiAndArgBBuf_set
    __swig_getmethods__["packedReiAndArgBBuf"] = _irods.ruleExecSubmitInp_t_packedReiAndArgBBuf_get
    if _newclass:packedReiAndArgBBuf = _swig_property(_irods.ruleExecSubmitInp_t_packedReiAndArgBBuf_get, _irods.ruleExecSubmitInp_t_packedReiAndArgBBuf_set)
    __swig_setmethods__["ruleExecId"] = _irods.ruleExecSubmitInp_t_ruleExecId_set
    __swig_getmethods__["ruleExecId"] = _irods.ruleExecSubmitInp_t_ruleExecId_get
    if _newclass:ruleExecId = _swig_property(_irods.ruleExecSubmitInp_t_ruleExecId_get, _irods.ruleExecSubmitInp_t_ruleExecId_set)
    def __init__(self): 
        this = _irods.new_ruleExecSubmitInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_ruleExecSubmitInp_t
    __del__ = lambda self : None;
ruleExecSubmitInp_t_swigregister = _irods.ruleExecSubmitInp_t_swigregister
ruleExecSubmitInp_t_swigregister(ruleExecSubmitInp_t)


def rcExecCmd(*args):
  return _irods.rcExecCmd(*args)
rcExecCmd = _irods.rcExecCmd

def rcExecMyRule(*args):
  return _irods.rcExecMyRule(*args)
rcExecMyRule = _irods.rcExecMyRule

def rcRuleExecDel(*args):
  return _irods.rcRuleExecDel(*args)
rcRuleExecDel = _irods.rcRuleExecDel

def rcRuleExecMod(*args):
  return _irods.rcRuleExecMod(*args)
rcRuleExecMod = _irods.rcRuleExecMod

def rcRuleExecSubmit(*args):
  return _irods.rcRuleExecSubmit(*args)
rcRuleExecSubmit = _irods.rcRuleExecSubmit
class fileChmodInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileChmodInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileChmodInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileChmodInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileChmodInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileChmodInp_t_fileType_get, _irods.fileChmodInp_t_fileType_set)
    __swig_setmethods__["addr"] = _irods.fileChmodInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileChmodInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileChmodInp_t_addr_get, _irods.fileChmodInp_t_addr_set)
    __swig_setmethods__["fileName"] = _irods.fileChmodInp_t_fileName_set
    __swig_getmethods__["fileName"] = _irods.fileChmodInp_t_fileName_get
    if _newclass:fileName = _swig_property(_irods.fileChmodInp_t_fileName_get, _irods.fileChmodInp_t_fileName_set)
    __swig_setmethods__["mode"] = _irods.fileChmodInp_t_mode_set
    __swig_getmethods__["mode"] = _irods.fileChmodInp_t_mode_get
    if _newclass:mode = _swig_property(_irods.fileChmodInp_t_mode_get, _irods.fileChmodInp_t_mode_set)
    def __init__(self): 
        this = _irods.new_fileChmodInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileChmodInp_t
    __del__ = lambda self : None;
fileChmodInp_t_swigregister = _irods.fileChmodInp_t_swigregister
fileChmodInp_t_swigregister(fileChmodInp_t)

class fileChksumInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileChksumInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileChksumInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileChksumInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileChksumInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileChksumInp_t_fileType_get, _irods.fileChksumInp_t_fileType_set)
    __swig_setmethods__["addr"] = _irods.fileChksumInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileChksumInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileChksumInp_t_addr_get, _irods.fileChksumInp_t_addr_set)
    __swig_setmethods__["fileName"] = _irods.fileChksumInp_t_fileName_set
    __swig_getmethods__["fileName"] = _irods.fileChksumInp_t_fileName_get
    if _newclass:fileName = _swig_property(_irods.fileChksumInp_t_fileName_get, _irods.fileChksumInp_t_fileName_set)
    __swig_setmethods__["flag"] = _irods.fileChksumInp_t_flag_set
    __swig_getmethods__["flag"] = _irods.fileChksumInp_t_flag_get
    if _newclass:flag = _swig_property(_irods.fileChksumInp_t_flag_get, _irods.fileChksumInp_t_flag_set)
    def __init__(self): 
        this = _irods.new_fileChksumInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileChksumInp_t
    __del__ = lambda self : None;
fileChksumInp_t_swigregister = _irods.fileChksumInp_t_swigregister
fileChksumInp_t_swigregister(fileChksumInp_t)

class fileCloseInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileCloseInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileCloseInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileInx"] = _irods.fileCloseInp_t_fileInx_set
    __swig_getmethods__["fileInx"] = _irods.fileCloseInp_t_fileInx_get
    if _newclass:fileInx = _swig_property(_irods.fileCloseInp_t_fileInx_get, _irods.fileCloseInp_t_fileInx_set)
    def __init__(self): 
        this = _irods.new_fileCloseInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileCloseInp_t
    __del__ = lambda self : None;
fileCloseInp_t_swigregister = _irods.fileCloseInp_t_swigregister
fileCloseInp_t_swigregister(fileCloseInp_t)

class fileClosedirInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileClosedirInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileClosedirInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileInx"] = _irods.fileClosedirInp_t_fileInx_set
    __swig_getmethods__["fileInx"] = _irods.fileClosedirInp_t_fileInx_get
    if _newclass:fileInx = _swig_property(_irods.fileClosedirInp_t_fileInx_get, _irods.fileClosedirInp_t_fileInx_set)
    def __init__(self): 
        this = _irods.new_fileClosedirInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileClosedirInp_t
    __del__ = lambda self : None;
fileClosedirInp_t_swigregister = _irods.fileClosedirInp_t_swigregister
fileClosedirInp_t_swigregister(fileClosedirInp_t)

class fileFstatInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileFstatInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileFstatInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileInx"] = _irods.fileFstatInp_t_fileInx_set
    __swig_getmethods__["fileInx"] = _irods.fileFstatInp_t_fileInx_get
    if _newclass:fileInx = _swig_property(_irods.fileFstatInp_t_fileInx_get, _irods.fileFstatInp_t_fileInx_set)
    def __init__(self): 
        this = _irods.new_fileFstatInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileFstatInp_t
    __del__ = lambda self : None;
fileFstatInp_t_swigregister = _irods.fileFstatInp_t_swigregister
fileFstatInp_t_swigregister(fileFstatInp_t)

class fileFsyncInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileFsyncInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileFsyncInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileInx"] = _irods.fileFsyncInp_t_fileInx_set
    __swig_getmethods__["fileInx"] = _irods.fileFsyncInp_t_fileInx_get
    if _newclass:fileInx = _swig_property(_irods.fileFsyncInp_t_fileInx_get, _irods.fileFsyncInp_t_fileInx_set)
    def __init__(self): 
        this = _irods.new_fileFsyncInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileFsyncInp_t
    __del__ = lambda self : None;
fileFsyncInp_t_swigregister = _irods.fileFsyncInp_t_swigregister
fileFsyncInp_t_swigregister(fileFsyncInp_t)

class fileGetFsFreeSpaceInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileGetFsFreeSpaceInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileGetFsFreeSpaceInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileGetFsFreeSpaceInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileGetFsFreeSpaceInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileGetFsFreeSpaceInp_t_fileType_get, _irods.fileGetFsFreeSpaceInp_t_fileType_set)
    __swig_setmethods__["addr"] = _irods.fileGetFsFreeSpaceInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileGetFsFreeSpaceInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileGetFsFreeSpaceInp_t_addr_get, _irods.fileGetFsFreeSpaceInp_t_addr_set)
    __swig_setmethods__["fileName"] = _irods.fileGetFsFreeSpaceInp_t_fileName_set
    __swig_getmethods__["fileName"] = _irods.fileGetFsFreeSpaceInp_t_fileName_get
    if _newclass:fileName = _swig_property(_irods.fileGetFsFreeSpaceInp_t_fileName_get, _irods.fileGetFsFreeSpaceInp_t_fileName_set)
    __swig_setmethods__["flag"] = _irods.fileGetFsFreeSpaceInp_t_flag_set
    __swig_getmethods__["flag"] = _irods.fileGetFsFreeSpaceInp_t_flag_get
    if _newclass:flag = _swig_property(_irods.fileGetFsFreeSpaceInp_t_flag_get, _irods.fileGetFsFreeSpaceInp_t_flag_set)
    def __init__(self): 
        this = _irods.new_fileGetFsFreeSpaceInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileGetFsFreeSpaceInp_t
    __del__ = lambda self : None;
fileGetFsFreeSpaceInp_t_swigregister = _irods.fileGetFsFreeSpaceInp_t_swigregister
fileGetFsFreeSpaceInp_t_swigregister(fileGetFsFreeSpaceInp_t)

class fileGetFsFreeSpaceOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileGetFsFreeSpaceOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileGetFsFreeSpaceOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _irods.fileGetFsFreeSpaceOut_t_size_set
    __swig_getmethods__["size"] = _irods.fileGetFsFreeSpaceOut_t_size_get
    if _newclass:size = _swig_property(_irods.fileGetFsFreeSpaceOut_t_size_get, _irods.fileGetFsFreeSpaceOut_t_size_set)
    def __init__(self): 
        this = _irods.new_fileGetFsFreeSpaceOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileGetFsFreeSpaceOut_t
    __del__ = lambda self : None;
fileGetFsFreeSpaceOut_t_swigregister = _irods.fileGetFsFreeSpaceOut_t_swigregister
fileGetFsFreeSpaceOut_t_swigregister(fileGetFsFreeSpaceOut_t)

class fileLseekInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileLseekInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileLseekInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileInx"] = _irods.fileLseekInp_t_fileInx_set
    __swig_getmethods__["fileInx"] = _irods.fileLseekInp_t_fileInx_get
    if _newclass:fileInx = _swig_property(_irods.fileLseekInp_t_fileInx_get, _irods.fileLseekInp_t_fileInx_set)
    __swig_setmethods__["offset"] = _irods.fileLseekInp_t_offset_set
    __swig_getmethods__["offset"] = _irods.fileLseekInp_t_offset_get
    if _newclass:offset = _swig_property(_irods.fileLseekInp_t_offset_get, _irods.fileLseekInp_t_offset_set)
    __swig_setmethods__["whence"] = _irods.fileLseekInp_t_whence_set
    __swig_getmethods__["whence"] = _irods.fileLseekInp_t_whence_get
    if _newclass:whence = _swig_property(_irods.fileLseekInp_t_whence_get, _irods.fileLseekInp_t_whence_set)
    def __init__(self): 
        this = _irods.new_fileLseekInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileLseekInp_t
    __del__ = lambda self : None;
fileLseekInp_t_swigregister = _irods.fileLseekInp_t_swigregister
fileLseekInp_t_swigregister(fileLseekInp_t)

class fileLseekOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileLseekOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileLseekOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["offset"] = _irods.fileLseekOut_t_offset_set
    __swig_getmethods__["offset"] = _irods.fileLseekOut_t_offset_get
    if _newclass:offset = _swig_property(_irods.fileLseekOut_t_offset_get, _irods.fileLseekOut_t_offset_set)
    def __init__(self): 
        this = _irods.new_fileLseekOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileLseekOut_t
    __del__ = lambda self : None;
fileLseekOut_t_swigregister = _irods.fileLseekOut_t_swigregister
fileLseekOut_t_swigregister(fileLseekOut_t)

class fileMkdirInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileMkdirInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileMkdirInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileMkdirInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileMkdirInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileMkdirInp_t_fileType_get, _irods.fileMkdirInp_t_fileType_set)
    __swig_setmethods__["addr"] = _irods.fileMkdirInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileMkdirInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileMkdirInp_t_addr_get, _irods.fileMkdirInp_t_addr_set)
    __swig_setmethods__["dirName"] = _irods.fileMkdirInp_t_dirName_set
    __swig_getmethods__["dirName"] = _irods.fileMkdirInp_t_dirName_get
    if _newclass:dirName = _swig_property(_irods.fileMkdirInp_t_dirName_get, _irods.fileMkdirInp_t_dirName_set)
    __swig_setmethods__["mode"] = _irods.fileMkdirInp_t_mode_set
    __swig_getmethods__["mode"] = _irods.fileMkdirInp_t_mode_get
    if _newclass:mode = _swig_property(_irods.fileMkdirInp_t_mode_get, _irods.fileMkdirInp_t_mode_set)
    __swig_setmethods__["condInput"] = _irods.fileMkdirInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.fileMkdirInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.fileMkdirInp_t_condInput_get, _irods.fileMkdirInp_t_condInput_set)
    def __init__(self): 
        this = _irods.new_fileMkdirInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileMkdirInp_t
    __del__ = lambda self : None;
fileMkdirInp_t_swigregister = _irods.fileMkdirInp_t_swigregister
fileMkdirInp_t_swigregister(fileMkdirInp_t)

class fileOpenInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileOpenInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileOpenInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileOpenInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileOpenInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileOpenInp_t_fileType_get, _irods.fileOpenInp_t_fileType_set)
    __swig_setmethods__["otherFlags"] = _irods.fileOpenInp_t_otherFlags_set
    __swig_getmethods__["otherFlags"] = _irods.fileOpenInp_t_otherFlags_get
    if _newclass:otherFlags = _swig_property(_irods.fileOpenInp_t_otherFlags_get, _irods.fileOpenInp_t_otherFlags_set)
    __swig_setmethods__["addr"] = _irods.fileOpenInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileOpenInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileOpenInp_t_addr_get, _irods.fileOpenInp_t_addr_set)
    __swig_setmethods__["fileName"] = _irods.fileOpenInp_t_fileName_set
    __swig_getmethods__["fileName"] = _irods.fileOpenInp_t_fileName_get
    if _newclass:fileName = _swig_property(_irods.fileOpenInp_t_fileName_get, _irods.fileOpenInp_t_fileName_set)
    __swig_setmethods__["flags"] = _irods.fileOpenInp_t_flags_set
    __swig_getmethods__["flags"] = _irods.fileOpenInp_t_flags_get
    if _newclass:flags = _swig_property(_irods.fileOpenInp_t_flags_get, _irods.fileOpenInp_t_flags_set)
    __swig_setmethods__["mode"] = _irods.fileOpenInp_t_mode_set
    __swig_getmethods__["mode"] = _irods.fileOpenInp_t_mode_get
    if _newclass:mode = _swig_property(_irods.fileOpenInp_t_mode_get, _irods.fileOpenInp_t_mode_set)
    __swig_setmethods__["dataSize"] = _irods.fileOpenInp_t_dataSize_set
    __swig_getmethods__["dataSize"] = _irods.fileOpenInp_t_dataSize_get
    if _newclass:dataSize = _swig_property(_irods.fileOpenInp_t_dataSize_get, _irods.fileOpenInp_t_dataSize_set)
    __swig_setmethods__["condInput"] = _irods.fileOpenInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.fileOpenInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.fileOpenInp_t_condInput_get, _irods.fileOpenInp_t_condInput_set)
    def __init__(self): 
        this = _irods.new_fileOpenInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileOpenInp_t
    __del__ = lambda self : None;
fileOpenInp_t_swigregister = _irods.fileOpenInp_t_swigregister
fileOpenInp_t_swigregister(fileOpenInp_t)

class fileOpendirInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileOpendirInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileOpendirInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileOpendirInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileOpendirInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileOpendirInp_t_fileType_get, _irods.fileOpendirInp_t_fileType_set)
    __swig_setmethods__["addr"] = _irods.fileOpendirInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileOpendirInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileOpendirInp_t_addr_get, _irods.fileOpendirInp_t_addr_set)
    __swig_setmethods__["dirName"] = _irods.fileOpendirInp_t_dirName_set
    __swig_getmethods__["dirName"] = _irods.fileOpendirInp_t_dirName_get
    if _newclass:dirName = _swig_property(_irods.fileOpendirInp_t_dirName_get, _irods.fileOpendirInp_t_dirName_set)
    def __init__(self): 
        this = _irods.new_fileOpendirInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileOpendirInp_t
    __del__ = lambda self : None;
fileOpendirInp_t_swigregister = _irods.fileOpendirInp_t_swigregister
fileOpendirInp_t_swigregister(fileOpendirInp_t)

class fileReadInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileReadInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileReadInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileInx"] = _irods.fileReadInp_t_fileInx_set
    __swig_getmethods__["fileInx"] = _irods.fileReadInp_t_fileInx_get
    if _newclass:fileInx = _swig_property(_irods.fileReadInp_t_fileInx_get, _irods.fileReadInp_t_fileInx_set)
    __swig_setmethods__["len"] = _irods.fileReadInp_t_len_set
    __swig_getmethods__["len"] = _irods.fileReadInp_t_len_get
    if _newclass:len = _swig_property(_irods.fileReadInp_t_len_get, _irods.fileReadInp_t_len_set)
    def __init__(self): 
        this = _irods.new_fileReadInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileReadInp_t
    __del__ = lambda self : None;
fileReadInp_t_swigregister = _irods.fileReadInp_t_swigregister
fileReadInp_t_swigregister(fileReadInp_t)

class fileRenameInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileRenameInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileRenameInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileRenameInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileRenameInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileRenameInp_t_fileType_get, _irods.fileRenameInp_t_fileType_set)
    __swig_setmethods__["addr"] = _irods.fileRenameInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileRenameInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileRenameInp_t_addr_get, _irods.fileRenameInp_t_addr_set)
    __swig_setmethods__["oldFileName"] = _irods.fileRenameInp_t_oldFileName_set
    __swig_getmethods__["oldFileName"] = _irods.fileRenameInp_t_oldFileName_get
    if _newclass:oldFileName = _swig_property(_irods.fileRenameInp_t_oldFileName_get, _irods.fileRenameInp_t_oldFileName_set)
    __swig_setmethods__["newFileName"] = _irods.fileRenameInp_t_newFileName_set
    __swig_getmethods__["newFileName"] = _irods.fileRenameInp_t_newFileName_get
    if _newclass:newFileName = _swig_property(_irods.fileRenameInp_t_newFileName_get, _irods.fileRenameInp_t_newFileName_set)
    def __init__(self): 
        this = _irods.new_fileRenameInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileRenameInp_t
    __del__ = lambda self : None;
fileRenameInp_t_swigregister = _irods.fileRenameInp_t_swigregister
fileRenameInp_t_swigregister(fileRenameInp_t)

class fileRmdirInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileRmdirInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileRmdirInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileRmdirInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileRmdirInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileRmdirInp_t_fileType_get, _irods.fileRmdirInp_t_fileType_set)
    __swig_setmethods__["flags"] = _irods.fileRmdirInp_t_flags_set
    __swig_getmethods__["flags"] = _irods.fileRmdirInp_t_flags_get
    if _newclass:flags = _swig_property(_irods.fileRmdirInp_t_flags_get, _irods.fileRmdirInp_t_flags_set)
    __swig_setmethods__["addr"] = _irods.fileRmdirInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileRmdirInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileRmdirInp_t_addr_get, _irods.fileRmdirInp_t_addr_set)
    __swig_setmethods__["dirName"] = _irods.fileRmdirInp_t_dirName_set
    __swig_getmethods__["dirName"] = _irods.fileRmdirInp_t_dirName_get
    if _newclass:dirName = _swig_property(_irods.fileRmdirInp_t_dirName_get, _irods.fileRmdirInp_t_dirName_set)
    def __init__(self): 
        this = _irods.new_fileRmdirInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileRmdirInp_t
    __del__ = lambda self : None;
fileRmdirInp_t_swigregister = _irods.fileRmdirInp_t_swigregister
fileRmdirInp_t_swigregister(fileRmdirInp_t)

class fileStageInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileStageInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileStageInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileStageInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileStageInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileStageInp_t_fileType_get, _irods.fileStageInp_t_fileType_set)
    __swig_setmethods__["addr"] = _irods.fileStageInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileStageInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileStageInp_t_addr_get, _irods.fileStageInp_t_addr_set)
    __swig_setmethods__["fileName"] = _irods.fileStageInp_t_fileName_set
    __swig_getmethods__["fileName"] = _irods.fileStageInp_t_fileName_get
    if _newclass:fileName = _swig_property(_irods.fileStageInp_t_fileName_get, _irods.fileStageInp_t_fileName_set)
    __swig_setmethods__["flag"] = _irods.fileStageInp_t_flag_set
    __swig_getmethods__["flag"] = _irods.fileStageInp_t_flag_get
    if _newclass:flag = _swig_property(_irods.fileStageInp_t_flag_get, _irods.fileStageInp_t_flag_set)
    def __init__(self): 
        this = _irods.new_fileStageInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileStageInp_t
    __del__ = lambda self : None;
fileStageInp_t_swigregister = _irods.fileStageInp_t_swigregister
fileStageInp_t_swigregister(fileStageInp_t)

class fileStatInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileStatInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileStatInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileStatInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileStatInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileStatInp_t_fileType_get, _irods.fileStatInp_t_fileType_set)
    __swig_setmethods__["addr"] = _irods.fileStatInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileStatInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileStatInp_t_addr_get, _irods.fileStatInp_t_addr_set)
    __swig_setmethods__["fileName"] = _irods.fileStatInp_t_fileName_set
    __swig_getmethods__["fileName"] = _irods.fileStatInp_t_fileName_get
    if _newclass:fileName = _swig_property(_irods.fileStatInp_t_fileName_get, _irods.fileStatInp_t_fileName_set)
    def __init__(self): 
        this = _irods.new_fileStatInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileStatInp_t
    __del__ = lambda self : None;
fileStatInp_t_swigregister = _irods.fileStatInp_t_swigregister
fileStatInp_t_swigregister(fileStatInp_t)

class fileUnlinkInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileUnlinkInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileUnlinkInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileType"] = _irods.fileUnlinkInp_t_fileType_set
    __swig_getmethods__["fileType"] = _irods.fileUnlinkInp_t_fileType_get
    if _newclass:fileType = _swig_property(_irods.fileUnlinkInp_t_fileType_get, _irods.fileUnlinkInp_t_fileType_set)
    __swig_setmethods__["addr"] = _irods.fileUnlinkInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.fileUnlinkInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.fileUnlinkInp_t_addr_get, _irods.fileUnlinkInp_t_addr_set)
    __swig_setmethods__["fileName"] = _irods.fileUnlinkInp_t_fileName_set
    __swig_getmethods__["fileName"] = _irods.fileUnlinkInp_t_fileName_get
    if _newclass:fileName = _swig_property(_irods.fileUnlinkInp_t_fileName_get, _irods.fileUnlinkInp_t_fileName_set)
    def __init__(self): 
        this = _irods.new_fileUnlinkInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileUnlinkInp_t
    __del__ = lambda self : None;
fileUnlinkInp_t_swigregister = _irods.fileUnlinkInp_t_swigregister
fileUnlinkInp_t_swigregister(fileUnlinkInp_t)

class fileWriteInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fileWriteInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fileWriteInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fileInx"] = _irods.fileWriteInp_t_fileInx_set
    __swig_getmethods__["fileInx"] = _irods.fileWriteInp_t_fileInx_get
    if _newclass:fileInx = _swig_property(_irods.fileWriteInp_t_fileInx_get, _irods.fileWriteInp_t_fileInx_set)
    __swig_setmethods__["len"] = _irods.fileWriteInp_t_len_set
    __swig_getmethods__["len"] = _irods.fileWriteInp_t_len_get
    if _newclass:len = _swig_property(_irods.fileWriteInp_t_len_get, _irods.fileWriteInp_t_len_set)
    def __init__(self): 
        this = _irods.new_fileWriteInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_fileWriteInp_t
    __del__ = lambda self : None;
fileWriteInp_t_swigregister = _irods.fileWriteInp_t_swigregister
fileWriteInp_t_swigregister(fileWriteInp_t)


def rcFileChmod(*args):
  return _irods.rcFileChmod(*args)
rcFileChmod = _irods.rcFileChmod

def rcFileChksum(*args):
  return _irods.rcFileChksum(*args)
rcFileChksum = _irods.rcFileChksum

def rcFileClose(*args):
  return _irods.rcFileClose(*args)
rcFileClose = _irods.rcFileClose

def rcFileClosedir(*args):
  return _irods.rcFileClosedir(*args)
rcFileClosedir = _irods.rcFileClosedir

def rcFileCreate(*args):
  return _irods.rcFileCreate(*args)
rcFileCreate = _irods.rcFileCreate

def rcFileFstat(*args):
  return _irods.rcFileFstat(*args)
rcFileFstat = _irods.rcFileFstat

def rcFileFsync(*args):
  return _irods.rcFileFsync(*args)
rcFileFsync = _irods.rcFileFsync

def rcFileGet(*args):
  return _irods.rcFileGet(*args)
rcFileGet = _irods.rcFileGet

def rcFileGetFsFreeSpace(*args):
  return _irods.rcFileGetFsFreeSpace(*args)
rcFileGetFsFreeSpace = _irods.rcFileGetFsFreeSpace

def rcFileLseek(*args):
  return _irods.rcFileLseek(*args)
rcFileLseek = _irods.rcFileLseek

def rcFileMkdir(*args):
  return _irods.rcFileMkdir(*args)
rcFileMkdir = _irods.rcFileMkdir

def rcFileOpen(*args):
  return _irods.rcFileOpen(*args)
rcFileOpen = _irods.rcFileOpen

def rcFileOpendir(*args):
  return _irods.rcFileOpendir(*args)
rcFileOpendir = _irods.rcFileOpendir

def rcFilePut(*args):
  return _irods.rcFilePut(*args)
rcFilePut = _irods.rcFilePut

def rcFileRead(*args):
  return _irods.rcFileRead(*args)
rcFileRead = _irods.rcFileRead

def rcFileReaddir(*args):
  return _irods.rcFileReaddir(*args)
rcFileReaddir = _irods.rcFileReaddir

def rcFileRename(*args):
  return _irods.rcFileRename(*args)
rcFileRename = _irods.rcFileRename

def rcFileRmdir(*args):
  return _irods.rcFileRmdir(*args)
rcFileRmdir = _irods.rcFileRmdir

def rcFileStage(*args):
  return _irods.rcFileStage(*args)
rcFileStage = _irods.rcFileStage

def rcFileStat(*args):
  return _irods.rcFileStat(*args)
rcFileStat = _irods.rcFileStat

def rcFileTruncate(*args):
  return _irods.rcFileTruncate(*args)
rcFileTruncate = _irods.rcFileTruncate

def rcFileUnlink(*args):
  return _irods.rcFileUnlink(*args)
rcFileUnlink = _irods.rcFileUnlink

def rcFileWrite(*args):
  return _irods.rcFileWrite(*args)
rcFileWrite = _irods.rcFileWrite

def rcL3FileGetSingleBuf(*args):
  return _irods.rcL3FileGetSingleBuf(*args)
rcL3FileGetSingleBuf = _irods.rcL3FileGetSingleBuf

def rcL3FilePutSingleBuf(*args):
  return _irods.rcL3FilePutSingleBuf(*args)
rcL3FilePutSingleBuf = _irods.rcL3FilePutSingleBuf
class dataObjInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dataObjInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dataObjInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["objPath"] = _irods.dataObjInfo_t_objPath_set
    __swig_getmethods__["objPath"] = _irods.dataObjInfo_t_objPath_get
    if _newclass:objPath = _swig_property(_irods.dataObjInfo_t_objPath_get, _irods.dataObjInfo_t_objPath_set)
    __swig_setmethods__["rescName"] = _irods.dataObjInfo_t_rescName_set
    __swig_getmethods__["rescName"] = _irods.dataObjInfo_t_rescName_get
    if _newclass:rescName = _swig_property(_irods.dataObjInfo_t_rescName_get, _irods.dataObjInfo_t_rescName_set)
    __swig_setmethods__["rescGroupName"] = _irods.dataObjInfo_t_rescGroupName_set
    __swig_getmethods__["rescGroupName"] = _irods.dataObjInfo_t_rescGroupName_get
    if _newclass:rescGroupName = _swig_property(_irods.dataObjInfo_t_rescGroupName_get, _irods.dataObjInfo_t_rescGroupName_set)
    __swig_setmethods__["dataType"] = _irods.dataObjInfo_t_dataType_set
    __swig_getmethods__["dataType"] = _irods.dataObjInfo_t_dataType_get
    if _newclass:dataType = _swig_property(_irods.dataObjInfo_t_dataType_get, _irods.dataObjInfo_t_dataType_set)
    __swig_setmethods__["dataSize"] = _irods.dataObjInfo_t_dataSize_set
    __swig_getmethods__["dataSize"] = _irods.dataObjInfo_t_dataSize_get
    if _newclass:dataSize = _swig_property(_irods.dataObjInfo_t_dataSize_get, _irods.dataObjInfo_t_dataSize_set)
    __swig_setmethods__["chksum"] = _irods.dataObjInfo_t_chksum_set
    __swig_getmethods__["chksum"] = _irods.dataObjInfo_t_chksum_get
    if _newclass:chksum = _swig_property(_irods.dataObjInfo_t_chksum_get, _irods.dataObjInfo_t_chksum_set)
    __swig_setmethods__["version"] = _irods.dataObjInfo_t_version_set
    __swig_getmethods__["version"] = _irods.dataObjInfo_t_version_get
    if _newclass:version = _swig_property(_irods.dataObjInfo_t_version_get, _irods.dataObjInfo_t_version_set)
    __swig_setmethods__["filePath"] = _irods.dataObjInfo_t_filePath_set
    __swig_getmethods__["filePath"] = _irods.dataObjInfo_t_filePath_get
    if _newclass:filePath = _swig_property(_irods.dataObjInfo_t_filePath_get, _irods.dataObjInfo_t_filePath_set)
    __swig_setmethods__["rescInfo"] = _irods.dataObjInfo_t_rescInfo_set
    __swig_getmethods__["rescInfo"] = _irods.dataObjInfo_t_rescInfo_get
    if _newclass:rescInfo = _swig_property(_irods.dataObjInfo_t_rescInfo_get, _irods.dataObjInfo_t_rescInfo_set)
    __swig_setmethods__["dataOwnerName"] = _irods.dataObjInfo_t_dataOwnerName_set
    __swig_getmethods__["dataOwnerName"] = _irods.dataObjInfo_t_dataOwnerName_get
    if _newclass:dataOwnerName = _swig_property(_irods.dataObjInfo_t_dataOwnerName_get, _irods.dataObjInfo_t_dataOwnerName_set)
    __swig_setmethods__["dataOwnerZone"] = _irods.dataObjInfo_t_dataOwnerZone_set
    __swig_getmethods__["dataOwnerZone"] = _irods.dataObjInfo_t_dataOwnerZone_get
    if _newclass:dataOwnerZone = _swig_property(_irods.dataObjInfo_t_dataOwnerZone_get, _irods.dataObjInfo_t_dataOwnerZone_set)
    __swig_setmethods__["replNum"] = _irods.dataObjInfo_t_replNum_set
    __swig_getmethods__["replNum"] = _irods.dataObjInfo_t_replNum_get
    if _newclass:replNum = _swig_property(_irods.dataObjInfo_t_replNum_get, _irods.dataObjInfo_t_replNum_set)
    __swig_setmethods__["replStatus"] = _irods.dataObjInfo_t_replStatus_set
    __swig_getmethods__["replStatus"] = _irods.dataObjInfo_t_replStatus_get
    if _newclass:replStatus = _swig_property(_irods.dataObjInfo_t_replStatus_get, _irods.dataObjInfo_t_replStatus_set)
    __swig_setmethods__["statusString"] = _irods.dataObjInfo_t_statusString_set
    __swig_getmethods__["statusString"] = _irods.dataObjInfo_t_statusString_get
    if _newclass:statusString = _swig_property(_irods.dataObjInfo_t_statusString_get, _irods.dataObjInfo_t_statusString_set)
    __swig_setmethods__["dataId"] = _irods.dataObjInfo_t_dataId_set
    __swig_getmethods__["dataId"] = _irods.dataObjInfo_t_dataId_get
    if _newclass:dataId = _swig_property(_irods.dataObjInfo_t_dataId_get, _irods.dataObjInfo_t_dataId_set)
    __swig_setmethods__["collId"] = _irods.dataObjInfo_t_collId_set
    __swig_getmethods__["collId"] = _irods.dataObjInfo_t_collId_get
    if _newclass:collId = _swig_property(_irods.dataObjInfo_t_collId_get, _irods.dataObjInfo_t_collId_set)
    __swig_setmethods__["dataMapId"] = _irods.dataObjInfo_t_dataMapId_set
    __swig_getmethods__["dataMapId"] = _irods.dataObjInfo_t_dataMapId_get
    if _newclass:dataMapId = _swig_property(_irods.dataObjInfo_t_dataMapId_get, _irods.dataObjInfo_t_dataMapId_set)
    __swig_setmethods__["flags"] = _irods.dataObjInfo_t_flags_set
    __swig_getmethods__["flags"] = _irods.dataObjInfo_t_flags_get
    if _newclass:flags = _swig_property(_irods.dataObjInfo_t_flags_get, _irods.dataObjInfo_t_flags_set)
    __swig_setmethods__["dataComments"] = _irods.dataObjInfo_t_dataComments_set
    __swig_getmethods__["dataComments"] = _irods.dataObjInfo_t_dataComments_get
    if _newclass:dataComments = _swig_property(_irods.dataObjInfo_t_dataComments_get, _irods.dataObjInfo_t_dataComments_set)
    __swig_setmethods__["dataMode"] = _irods.dataObjInfo_t_dataMode_set
    __swig_getmethods__["dataMode"] = _irods.dataObjInfo_t_dataMode_get
    if _newclass:dataMode = _swig_property(_irods.dataObjInfo_t_dataMode_get, _irods.dataObjInfo_t_dataMode_set)
    __swig_setmethods__["dataExpiry"] = _irods.dataObjInfo_t_dataExpiry_set
    __swig_getmethods__["dataExpiry"] = _irods.dataObjInfo_t_dataExpiry_get
    if _newclass:dataExpiry = _swig_property(_irods.dataObjInfo_t_dataExpiry_get, _irods.dataObjInfo_t_dataExpiry_set)
    __swig_setmethods__["dataCreate"] = _irods.dataObjInfo_t_dataCreate_set
    __swig_getmethods__["dataCreate"] = _irods.dataObjInfo_t_dataCreate_get
    if _newclass:dataCreate = _swig_property(_irods.dataObjInfo_t_dataCreate_get, _irods.dataObjInfo_t_dataCreate_set)
    __swig_setmethods__["dataModify"] = _irods.dataObjInfo_t_dataModify_set
    __swig_getmethods__["dataModify"] = _irods.dataObjInfo_t_dataModify_get
    if _newclass:dataModify = _swig_property(_irods.dataObjInfo_t_dataModify_get, _irods.dataObjInfo_t_dataModify_set)
    __swig_setmethods__["dataAccess"] = _irods.dataObjInfo_t_dataAccess_set
    __swig_getmethods__["dataAccess"] = _irods.dataObjInfo_t_dataAccess_get
    if _newclass:dataAccess = _swig_property(_irods.dataObjInfo_t_dataAccess_get, _irods.dataObjInfo_t_dataAccess_set)
    __swig_setmethods__["dataAccessInx"] = _irods.dataObjInfo_t_dataAccessInx_set
    __swig_getmethods__["dataAccessInx"] = _irods.dataObjInfo_t_dataAccessInx_get
    if _newclass:dataAccessInx = _swig_property(_irods.dataObjInfo_t_dataAccessInx_get, _irods.dataObjInfo_t_dataAccessInx_set)
    __swig_setmethods__["writeFlag"] = _irods.dataObjInfo_t_writeFlag_set
    __swig_getmethods__["writeFlag"] = _irods.dataObjInfo_t_writeFlag_get
    if _newclass:writeFlag = _swig_property(_irods.dataObjInfo_t_writeFlag_get, _irods.dataObjInfo_t_writeFlag_set)
    __swig_setmethods__["destRescName"] = _irods.dataObjInfo_t_destRescName_set
    __swig_getmethods__["destRescName"] = _irods.dataObjInfo_t_destRescName_get
    if _newclass:destRescName = _swig_property(_irods.dataObjInfo_t_destRescName_get, _irods.dataObjInfo_t_destRescName_set)
    __swig_setmethods__["backupRescName"] = _irods.dataObjInfo_t_backupRescName_set
    __swig_getmethods__["backupRescName"] = _irods.dataObjInfo_t_backupRescName_get
    if _newclass:backupRescName = _swig_property(_irods.dataObjInfo_t_backupRescName_get, _irods.dataObjInfo_t_backupRescName_set)
    __swig_setmethods__["subPath"] = _irods.dataObjInfo_t_subPath_set
    __swig_getmethods__["subPath"] = _irods.dataObjInfo_t_subPath_get
    if _newclass:subPath = _swig_property(_irods.dataObjInfo_t_subPath_get, _irods.dataObjInfo_t_subPath_set)
    __swig_setmethods__["specColl"] = _irods.dataObjInfo_t_specColl_set
    __swig_getmethods__["specColl"] = _irods.dataObjInfo_t_specColl_get
    if _newclass:specColl = _swig_property(_irods.dataObjInfo_t_specColl_get, _irods.dataObjInfo_t_specColl_set)
    __swig_setmethods__["regUid"] = _irods.dataObjInfo_t_regUid_set
    __swig_getmethods__["regUid"] = _irods.dataObjInfo_t_regUid_get
    if _newclass:regUid = _swig_property(_irods.dataObjInfo_t_regUid_get, _irods.dataObjInfo_t_regUid_set)
    __swig_setmethods__["otherFlags"] = _irods.dataObjInfo_t_otherFlags_set
    __swig_getmethods__["otherFlags"] = _irods.dataObjInfo_t_otherFlags_get
    if _newclass:otherFlags = _swig_property(_irods.dataObjInfo_t_otherFlags_get, _irods.dataObjInfo_t_otherFlags_set)
    __swig_setmethods__["condInput"] = _irods.dataObjInfo_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.dataObjInfo_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.dataObjInfo_t_condInput_get, _irods.dataObjInfo_t_condInput_set)
    __swig_setmethods__["next"] = _irods.dataObjInfo_t_next_set
    __swig_getmethods__["next"] = _irods.dataObjInfo_t_next_get
    if _newclass:next = _swig_property(_irods.dataObjInfo_t_next_get, _irods.dataObjInfo_t_next_set)
    def __init__(self): 
        this = _irods.new_dataObjInfo_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_dataObjInfo_t
    __del__ = lambda self : None;
dataObjInfo_t_swigregister = _irods.dataObjInfo_t_swigregister
dataObjInfo_t_swigregister(dataObjInfo_t)

class miscSvrInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, miscSvrInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, miscSvrInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["serverType"] = _irods.miscSvrInfo_t_serverType_set
    __swig_getmethods__["serverType"] = _irods.miscSvrInfo_t_serverType_get
    if _newclass:serverType = _swig_property(_irods.miscSvrInfo_t_serverType_get, _irods.miscSvrInfo_t_serverType_set)
    __swig_setmethods__["serverBootTime"] = _irods.miscSvrInfo_t_serverBootTime_set
    __swig_getmethods__["serverBootTime"] = _irods.miscSvrInfo_t_serverBootTime_get
    if _newclass:serverBootTime = _swig_property(_irods.miscSvrInfo_t_serverBootTime_get, _irods.miscSvrInfo_t_serverBootTime_set)
    __swig_setmethods__["relVersion"] = _irods.miscSvrInfo_t_relVersion_set
    __swig_getmethods__["relVersion"] = _irods.miscSvrInfo_t_relVersion_get
    if _newclass:relVersion = _swig_property(_irods.miscSvrInfo_t_relVersion_get, _irods.miscSvrInfo_t_relVersion_set)
    __swig_setmethods__["apiVersion"] = _irods.miscSvrInfo_t_apiVersion_set
    __swig_getmethods__["apiVersion"] = _irods.miscSvrInfo_t_apiVersion_get
    if _newclass:apiVersion = _swig_property(_irods.miscSvrInfo_t_apiVersion_get, _irods.miscSvrInfo_t_apiVersion_set)
    __swig_setmethods__["rodsZone"] = _irods.miscSvrInfo_t_rodsZone_set
    __swig_getmethods__["rodsZone"] = _irods.miscSvrInfo_t_rodsZone_get
    if _newclass:rodsZone = _swig_property(_irods.miscSvrInfo_t_rodsZone_get, _irods.miscSvrInfo_t_rodsZone_set)
    def __init__(self): 
        this = _irods.new_miscSvrInfo_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_miscSvrInfo_t
    __del__ = lambda self : None;
miscSvrInfo_t_swigregister = _irods.miscSvrInfo_t_swigregister
miscSvrInfo_t_swigregister(miscSvrInfo_t)

class rodsObjStat_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rodsObjStat_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rodsObjStat_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["objSize"] = _irods.rodsObjStat_t_objSize_set
    __swig_getmethods__["objSize"] = _irods.rodsObjStat_t_objSize_get
    if _newclass:objSize = _swig_property(_irods.rodsObjStat_t_objSize_get, _irods.rodsObjStat_t_objSize_set)
    __swig_setmethods__["objType"] = _irods.rodsObjStat_t_objType_set
    __swig_getmethods__["objType"] = _irods.rodsObjStat_t_objType_get
    if _newclass:objType = _swig_property(_irods.rodsObjStat_t_objType_get, _irods.rodsObjStat_t_objType_set)
    __swig_setmethods__["dataMode"] = _irods.rodsObjStat_t_dataMode_set
    __swig_getmethods__["dataMode"] = _irods.rodsObjStat_t_dataMode_get
    if _newclass:dataMode = _swig_property(_irods.rodsObjStat_t_dataMode_get, _irods.rodsObjStat_t_dataMode_set)
    __swig_setmethods__["dataId"] = _irods.rodsObjStat_t_dataId_set
    __swig_getmethods__["dataId"] = _irods.rodsObjStat_t_dataId_get
    if _newclass:dataId = _swig_property(_irods.rodsObjStat_t_dataId_get, _irods.rodsObjStat_t_dataId_set)
    __swig_setmethods__["chksum"] = _irods.rodsObjStat_t_chksum_set
    __swig_getmethods__["chksum"] = _irods.rodsObjStat_t_chksum_get
    if _newclass:chksum = _swig_property(_irods.rodsObjStat_t_chksum_get, _irods.rodsObjStat_t_chksum_set)
    __swig_setmethods__["ownerName"] = _irods.rodsObjStat_t_ownerName_set
    __swig_getmethods__["ownerName"] = _irods.rodsObjStat_t_ownerName_get
    if _newclass:ownerName = _swig_property(_irods.rodsObjStat_t_ownerName_get, _irods.rodsObjStat_t_ownerName_set)
    __swig_setmethods__["ownerZone"] = _irods.rodsObjStat_t_ownerZone_set
    __swig_getmethods__["ownerZone"] = _irods.rodsObjStat_t_ownerZone_get
    if _newclass:ownerZone = _swig_property(_irods.rodsObjStat_t_ownerZone_get, _irods.rodsObjStat_t_ownerZone_set)
    __swig_setmethods__["createTime"] = _irods.rodsObjStat_t_createTime_set
    __swig_getmethods__["createTime"] = _irods.rodsObjStat_t_createTime_get
    if _newclass:createTime = _swig_property(_irods.rodsObjStat_t_createTime_get, _irods.rodsObjStat_t_createTime_set)
    __swig_setmethods__["modifyTime"] = _irods.rodsObjStat_t_modifyTime_set
    __swig_getmethods__["modifyTime"] = _irods.rodsObjStat_t_modifyTime_get
    if _newclass:modifyTime = _swig_property(_irods.rodsObjStat_t_modifyTime_get, _irods.rodsObjStat_t_modifyTime_set)
    __swig_setmethods__["specColl"] = _irods.rodsObjStat_t_specColl_set
    __swig_getmethods__["specColl"] = _irods.rodsObjStat_t_specColl_get
    if _newclass:specColl = _swig_property(_irods.rodsObjStat_t_specColl_get, _irods.rodsObjStat_t_specColl_set)
    def __init__(self): 
        this = _irods.new_rodsObjStat_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rodsObjStat_t
    __del__ = lambda self : None;
rodsObjStat_t_swigregister = _irods.rodsObjStat_t_swigregister
rodsObjStat_t_swigregister(rodsObjStat_t)

class tagStruct_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tagStruct_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tagStruct_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _irods.tagStruct_t_len_set
    __swig_getmethods__["len"] = _irods.tagStruct_t_len_get
    if _newclass:len = _swig_property(_irods.tagStruct_t_len_get, _irods.tagStruct_t_len_set)
    def getPreTag(self, *args): return _irods.tagStruct_t_getPreTag(self, *args)
    def getPostTag(self, *args): return _irods.tagStruct_t_getPostTag(self, *args)
    def getKeyWord(self, *args): return _irods.tagStruct_t_getKeyWord(self, *args)
    def __init__(self): 
        this = _irods.new_tagStruct_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_tagStruct_t
    __del__ = lambda self : None;
tagStruct_t_swigregister = _irods.tagStruct_t_swigregister
tagStruct_t_swigregister(tagStruct_t)

class specColl_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, specColl_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, specColl_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["collClass"] = _irods.specColl_t_collClass_set
    __swig_getmethods__["collClass"] = _irods.specColl_t_collClass_get
    if _newclass:collClass = _swig_property(_irods.specColl_t_collClass_get, _irods.specColl_t_collClass_set)
    __swig_setmethods__["type"] = _irods.specColl_t_type_set
    __swig_getmethods__["type"] = _irods.specColl_t_type_get
    if _newclass:type = _swig_property(_irods.specColl_t_type_get, _irods.specColl_t_type_set)
    __swig_setmethods__["collection"] = _irods.specColl_t_collection_set
    __swig_getmethods__["collection"] = _irods.specColl_t_collection_get
    if _newclass:collection = _swig_property(_irods.specColl_t_collection_get, _irods.specColl_t_collection_set)
    __swig_setmethods__["objPath"] = _irods.specColl_t_objPath_set
    __swig_getmethods__["objPath"] = _irods.specColl_t_objPath_get
    if _newclass:objPath = _swig_property(_irods.specColl_t_objPath_get, _irods.specColl_t_objPath_set)
    __swig_setmethods__["resource"] = _irods.specColl_t_resource_set
    __swig_getmethods__["resource"] = _irods.specColl_t_resource_get
    if _newclass:resource = _swig_property(_irods.specColl_t_resource_get, _irods.specColl_t_resource_set)
    __swig_setmethods__["phyPath"] = _irods.specColl_t_phyPath_set
    __swig_getmethods__["phyPath"] = _irods.specColl_t_phyPath_get
    if _newclass:phyPath = _swig_property(_irods.specColl_t_phyPath_get, _irods.specColl_t_phyPath_set)
    __swig_setmethods__["cacheDir"] = _irods.specColl_t_cacheDir_set
    __swig_getmethods__["cacheDir"] = _irods.specColl_t_cacheDir_get
    if _newclass:cacheDir = _swig_property(_irods.specColl_t_cacheDir_get, _irods.specColl_t_cacheDir_set)
    __swig_setmethods__["cacheDirty"] = _irods.specColl_t_cacheDirty_set
    __swig_getmethods__["cacheDirty"] = _irods.specColl_t_cacheDirty_get
    if _newclass:cacheDirty = _swig_property(_irods.specColl_t_cacheDirty_get, _irods.specColl_t_cacheDirty_set)
    __swig_setmethods__["replNum"] = _irods.specColl_t_replNum_set
    __swig_getmethods__["replNum"] = _irods.specColl_t_replNum_get
    if _newclass:replNum = _swig_property(_irods.specColl_t_replNum_get, _irods.specColl_t_replNum_set)
    def __init__(self): 
        this = _irods.new_specColl_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_specColl_t
    __del__ = lambda self : None;
specColl_t_swigregister = _irods.specColl_t_swigregister
specColl_t_swigregister(specColl_t)

class subFile_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subFile_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subFile_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _irods.subFile_t_addr_set
    __swig_getmethods__["addr"] = _irods.subFile_t_addr_get
    if _newclass:addr = _swig_property(_irods.subFile_t_addr_get, _irods.subFile_t_addr_set)
    __swig_setmethods__["subFilePath"] = _irods.subFile_t_subFilePath_set
    __swig_getmethods__["subFilePath"] = _irods.subFile_t_subFilePath_get
    if _newclass:subFilePath = _swig_property(_irods.subFile_t_subFilePath_get, _irods.subFile_t_subFilePath_set)
    __swig_setmethods__["mode"] = _irods.subFile_t_mode_set
    __swig_getmethods__["mode"] = _irods.subFile_t_mode_get
    if _newclass:mode = _swig_property(_irods.subFile_t_mode_get, _irods.subFile_t_mode_set)
    __swig_setmethods__["flags"] = _irods.subFile_t_flags_set
    __swig_getmethods__["flags"] = _irods.subFile_t_flags_get
    if _newclass:flags = _swig_property(_irods.subFile_t_flags_get, _irods.subFile_t_flags_set)
    __swig_setmethods__["offset"] = _irods.subFile_t_offset_set
    __swig_getmethods__["offset"] = _irods.subFile_t_offset_get
    if _newclass:offset = _swig_property(_irods.subFile_t_offset_get, _irods.subFile_t_offset_set)
    __swig_setmethods__["specColl"] = _irods.subFile_t_specColl_set
    __swig_getmethods__["specColl"] = _irods.subFile_t_specColl_get
    if _newclass:specColl = _swig_property(_irods.subFile_t_specColl_get, _irods.subFile_t_specColl_set)
    def __init__(self): 
        this = _irods.new_subFile_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_subFile_t
    __del__ = lambda self : None;
subFile_t_swigregister = _irods.subFile_t_swigregister
subFile_t_swigregister(subFile_t)

class keyValPair_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, keyValPair_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, keyValPair_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _irods.keyValPair_t_len_set
    __swig_getmethods__["len"] = _irods.keyValPair_t_len_get
    if _newclass:len = _swig_property(_irods.keyValPair_t_len_get, _irods.keyValPair_t_len_set)
    def init(self, *args): return _irods.keyValPair_t_init(self, *args)
    def getLen(self): return _irods.keyValPair_t_getLen(self)
    def getKeyWord(self, *args): return _irods.keyValPair_t_getKeyWord(self, *args)
    def getValue(self, *args): return _irods.keyValPair_t_getValue(self, *args)
    def __str__(self): return _irods.keyValPair_t___str__(self)
    def __init__(self): 
        this = _irods.new_keyValPair_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_keyValPair_t
    __del__ = lambda self : None;
keyValPair_t_swigregister = _irods.keyValPair_t_swigregister
keyValPair_t_swigregister(keyValPair_t)

class inxIvalPair_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inxIvalPair_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inxIvalPair_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _irods.inxIvalPair_t_len_set
    __swig_getmethods__["len"] = _irods.inxIvalPair_t_len_get
    if _newclass:len = _swig_property(_irods.inxIvalPair_t_len_get, _irods.inxIvalPair_t_len_set)
    def init(self, *args): return _irods.inxIvalPair_t_init(self, *args)
    def getLen(self): return _irods.inxIvalPair_t_getLen(self)
    def getInx(self): return _irods.inxIvalPair_t_getInx(self)
    def getValue(self): return _irods.inxIvalPair_t_getValue(self)
    def __str__(self): return _irods.inxIvalPair_t___str__(self)
    def __init__(self): 
        this = _irods.new_inxIvalPair_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_inxIvalPair_t
    __del__ = lambda self : None;
inxIvalPair_t_swigregister = _irods.inxIvalPair_t_swigregister
inxIvalPair_t_swigregister(inxIvalPair_t)

class inxValPair_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, inxValPair_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, inxValPair_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _irods.inxValPair_t_len_set
    __swig_getmethods__["len"] = _irods.inxValPair_t_len_get
    if _newclass:len = _swig_property(_irods.inxValPair_t_len_get, _irods.inxValPair_t_len_set)
    def init(self, *args): return _irods.inxValPair_t_init(self, *args)
    def getLen(self): return _irods.inxValPair_t_getLen(self)
    def getInx(self): return _irods.inxValPair_t_getInx(self)
    def getValue(self): return _irods.inxValPair_t_getValue(self)
    def __str__(self): return _irods.inxValPair_t___str__(self)
    def __init__(self): 
        this = _irods.new_inxValPair_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_inxValPair_t
    __del__ = lambda self : None;
inxValPair_t_swigregister = _irods.inxValPair_t_swigregister
inxValPair_t_swigregister(inxValPair_t)


def rcGetMiscSvrInfo(*args):
  return _irods.rcGetMiscSvrInfo(*args)
rcGetMiscSvrInfo = _irods.rcGetMiscSvrInfo

def rcObjStat(*args):
  return _irods.rcObjStat(*args)
rcObjStat = _irods.rcObjStat
class irodsCollection:

    def __init__(self, conn, collName=None):
        status, myEnv = getRodsEnv()
        self._conn = conn
        
        if collName:
            # Remove the last '/', if len = 1 the user wants the root colection
            if len(collName) > 1 and collName[-1] == '/':
                collName = collName[:-1]
                
            if collName.startswith('/'):
                # If the path starts with '/' we assume a global path
                self.collName = collName
            else:
                # else we assume that it is local to the current working dir
                self.collName = myEnv.rodsCwd + '/' + collName
            
        else:
             ## If no collName, we use the current working directory
            self.collName = myEnv.rodsCwd

    def addUserMetadata(self, name, value, units=""):
        return addUserMetadata(self._conn, "-c", self.collName,
                               name, value, units)

    def create(self, dataName, resc_name=""):
        if not resc_name:
            status, myEnv = getRodsEnv()
            resc_name = myEnv.rodsDefResource
            
        return _irodsOpen(self._conn, self.collName, dataName, "w", resc_name)

    def createCollection(self, child_collName):
        global lastStatus
        collCreateInp = collInp_t()
        collCreateInp.collName = "%s/%s" % (self.collName, child_collName)
        lastStatus = rcCollCreate(self._conn, collCreateInp)
        return lastStatus

    def delete(self, dataName, resc_name=""):
        global lastStatus
        dataObjInp = dataObjInp_t()
        if resc_name:
            replNum = getDataObjReplicaNumber(self._conn, self.collName,
                                              dataName, resc_name);
        else:
            replNum = "0"
        if replNum:
            addKeyVal(dataObjInp.condInput, REPL_NUM_KW, replNum)
        dataObjInp.openFlags = O_RDONLY
        dataObjInp.objPath = "%s/%s" % (self.collName, dataName)
        lastStatus = rcDataObjUnlink(self._conn, dataObjInp)
        return lastStatus

    def deleteCollection(self, child_collName):
        global lastStatus
        collInp = collInp_t()
        collInp.collName = "%s/%s" % (self.collName, child_collName)
        addKeyVal(collInp.condInput, FORCE_FLAG_KW, "")
        addKeyVal(collInp.condInput, RECURSIVE_OPR__KW, "")
        lastStatus = rcRmColl(self._conn, collInp, 0)
        return lastStatus

    def getCollName(self):
        return self.collName

    def getId(self):
        return getCollId(self._conn, self.getCollName())

    def getLenObjects(self):
        queryFlags = DATA_QUERY_FIRST_FG | LONG_METADATA_FG | NO_TRIM_REPL_FG
        nb_el = 0
        
        status, collHandle = rclOpenCollection(self._conn, self.collName, queryFlags)
        status, collEnt = rclReadCollection(self._conn, collHandle)
        while status >= 0:
            if collEnt.objType == DATA_OBJ_T:
                nb_el += 1
            status, collEnt = rclReadCollection(self._conn, collHandle)
        rclCloseCollection(collHandle)
        return nb_el

    def getLenSubCollections(self):
        queryFlags = DATA_QUERY_FIRST_FG
        nb_el = 0
        
        status, collHandle = rclOpenCollection(self._conn, self.collName, queryFlags)
        status, collEnt = rclReadCollection(self._conn, collHandle)
        while status >= 0:
            if collEnt.objType == COLL_OBJ_T:
                nb_el += 1 
            status, collEnt = rclReadCollection(self._conn, collHandle)
        rclCloseCollection(collHandle)
        return nb_el

    def getObjects(self):
        queryFlags = DATA_QUERY_FIRST_FG | LONG_METADATA_FG | NO_TRIM_REPL_FG
        l = []
        
        status, collHandle = rclOpenCollection(self._conn, self.collName, queryFlags)
        status, collEnt = rclReadCollection(self._conn, collHandle)
        while status >= 0:
            if collEnt.objType == DATA_OBJ_T:
                status, srcElement = getLastPathElement(collEnt.dataName)
                if srcElement:
                    l.append((srcElement, collEnt.resource))
            status, collEnt = rclReadCollection(self._conn, collHandle)
        rclCloseCollection(collHandle)
        return l

    def getSubCollections(self):
        queryFlags = DATA_QUERY_FIRST_FG
        l = []
        
        status, collHandle = rclOpenCollection(self._conn, self.collName, queryFlags)
        status, collEnt = rclReadCollection(self._conn, collHandle)
        while status >= 0:
            if collEnt.objType == COLL_OBJ_T:
                status, myColl, myData = splitPathByKey(collEnt.collName, '/')
                if myData:
                    l.append(myData)
            status, collEnt = rclReadCollection(self._conn, collHandle)
        rclCloseCollection(collHandle)
        return l

    def getUserMetadata(self):
        sqlCondInp = inxValPair_t()
        selectInp = inxIvalPair_t()
        selectInp.init([COL_META_COLL_ATTR_NAME, COL_META_COLL_ATTR_VALUE,
                        COL_META_COLL_ATTR_UNITS],
                       [0, 0, 0], 3)
        sqlCondInp.init([COL_COLL_NAME], ["='%s'" % self.collName], 1)
        return queryToTupleList(self._conn, selectInp, sqlCondInp)

    def open(self, dataName, mode="r", resc_name=""):
        if not resc_name:
            status, myEnv = getRodsEnv()
            resc_name = myEnv.rodsDefResource
        return _irodsOpen(self._conn, self.collName, dataName, mode, resc_name)

    def openCollection(self, collName):
        global lastStatus
        lastStatus = CAT_UNKNOWN_COLLECTION
        if collName != '/':   
            collName = collName.rstrip('/')
        # If the path starts with '/' we assume a global path
        if (collName.startswith('/')):
           self.collName = collName
           lastStatus = 0
        else:
            ls_child = self.getSubCollections()
            if collName in ls_child:
                # Special case for the root dir
                if self.collName == '/':
                    fullName = '/' + collName
                else:
                    fullName = "%s/%s" % (self.collName, collName)
                self.collName = fullName
                lastStatus = 0
        return lastStatus

    def rmUserMetadata(self, name, value, units=""):
        return rmUserMetadata(self._conn, "-c", self.collName,
                               name, value, units) 

    def upCollection(self):
        status, myDir, myFile = splitPathByKey(self.collName, "/")
        self.collName = myDir

class irodsFile:

    def __init__(self, conn):
        self._conn = conn
        self.descInx = 0
        self.position = 0
        self.openFlag = O_RDONLY
        self.collName = ""
        self.dataName = ""
        self.resourceName = ""
        self.size = 0

    def __iter__(self):
        return self

    def addUserMetadata(self, name, value, units=""):
        fullName = self.fullPath()
        return addUserMetadata(self._conn, "-d", fullName, name, value, units)

    def copy(self, new_path, force=False, resc=None):
        return irodsCopy(self._conn, self.fullPath(), new_path, force, resc)

    def close(self):
        global lastStatus
        dataObjCloseInp = openedDataObjInp_t()
        dataObjCloseInp.l1descInx = self.descInx
        lastStatus = rcDataObjClose(self._conn, dataObjCloseInp)
        return lastStatus

    def delete(self, force=False):
        global lastStatus
        dataObjInp = dataObjInp_t()
        replNum = getDataObjReplicaNumber(self._conn,
                                          self.collName,
                                          self.dataName,
                                          self.resourceName)
        if replNum:
            addKeyVal(dataObjInp.condInput, REPL_NUM_KW, replNum)
            
        if force:
            addKeyVal(dataObjInp.condInput, FORCE_FLAG_KW, "")
        dataObjInp.openFlags = O_RDONLY
        dataObjInp.objPath = self.fullPath()
        lastStatus = rcDataObjUnlink(self._conn, dataObjInp)
        return lastStatus

    def fileno(self):
        return self.descInx

    def flush(self):
        pass

    def fullPath(self):
        return "%s/%s" % (self.collName, self.dataName)

    def getChecksum(self):
        d = self.getInfos();
        return d.get("data_checksum", "")

    def getCollId(self):
        d = self.getInfos();
        return d.get("coll_id", "")

    def getCollName(self):
        return self.collName

    def getComment(self):
        d = self.getInfos();
        return d.get("r_comment", "")

    def getCreateTs(self):
        d = self.getInfos();
        return d.get("create_ts", "")

    def getDescInx(self):
        return self.descInx

    def getExpiryTs(self):
        d = self.getInfos();
        return d.get("data_expiry_ts", "")

    def getId(self):
        d = self.getInfos();
        return d.get("data_id", "")

    def getInfos(self):
        return getFileInfo(self._conn, self.collName,
                           self.dataName, self.resourceName)

    def getMapId(self):
        d = self.getInfos();
        return d.get("data_map_id", "")

    def getMode(self):
        d = self.getInfos();
        return d.get("data_mode", "")

    def getModifyTs(self):
        d = self.getInfos();
        return d.get("modify_ts", "")

    def getName(self):
        return self.dataName

    def getOwnerName(self):
        d = self.getInfos();
        return d.get("data_owner_name", "")

    def getOwnerZone(self):
        d = self.getInfos();
        return d.get("data_owner_zone", "")

    def getPath(self):
        d = self.getInfos();
        return d.get("data_path", "")

    def getPosition(self):
        return self.position

    def getReplications(self):
        res_list = getDataObjRescNames(self._conn, self.collName,
                                       self.dataName)
        res = []
        for resc_name in res_list:
            if resc_name == self.resourceName:
                res.append(self)
            else:
                f = _irodsOpen(self._conn, self.collName, self.dataName, 
                               "r+", resc_name)
        return res

    def getReplNumber(self):
        d = self.getInfos();
        return d.get("data_repl_num", "")

    def getReplStatus(self):
        d = self.getInfos();
        return d.get("data_is_dirty", "")

    def getResourceGroupName(self):
        d = self.getInfos();
        return d.get("resc_group_name", "")

    def getResourceName(self):
        return self.resourceName

    def getTypeName(self):
        d = self.getInfos();
        return d.get("data_type_name", "")

    def getSize(self):
        d = self.getInfos();
        return int(d.get("data_size", "0"))

    def getStatus(self):
        d = self.getInfos();
        return d.get("data_status", "")

    def getUserMetadata(self):
        sqlCondInp = inxValPair_t()
        selectInp = inxIvalPair_t()
        selectInp.init([COL_META_DATA_ATTR_NAME, COL_META_DATA_ATTR_VALUE,
                        COL_META_DATA_ATTR_UNITS],
                       [0, 0, 0], 3)
        sqlCondInp.init([COL_COLL_NAME, COL_DATA_NAME], 
                        ["='%s'" % self.collName,
                         "='%s'" % self.dataName], 2)
        return queryToTupleList(self._conn, selectInp, sqlCondInp)

    def getVersion(self):
        d = self.getInfos();
        return d.get("data_version", "")

    def isatty(self):
        return false

    def move(self, new_path):
        global lastStatus
        dataObjRenameInp = dataObjCopyInp_t()
        dataObjRenameInp.srcDataObjInp.oprType = RENAME_DATA_OBJ
        dataObjRenameInp.srcDataObjInp.objPath = self.fullPath()
        dataObjRenameInp.destDataObjInp.oprType = RENAME_DATA_OBJ
        dataObjRenameInp.destDataObjInp.objPath = new_path
        lastStatus = rcDataObjRename(self._conn, dataObjRenameInp)
        return lastStatus

    def next(self):
        if self.position >= self.size:
            raise StopIteration
        return self.readline()

    # Optional parameter : number of bytes to read. if not present reads
    # TRANS_BUF_SZ bytes. If the size is greater it has to be refined...
    def read(self, buffSize=TRANS_BUF_SZ):
        if self.openFlag & O_WRONLY != 0:
            return ""
        else:
            dataObjReadInp = openedDataObjInp_t()
            dataObjLseekInp = openedDataObjInp_t()
            dataObjReadInp.len = buffSize
            dataObjReadInp.l1descInx = self.descInx
                
            ## If there are replication, there could be several position for the
            ## same file (due to the fact that irods consider that replications
            ## are the same files), so we ensure before reading that the position
            ## of the cursor for reading match the one we have for the replicate
            ## not 100% sure of that however
            
            dataObjLseekInp.l1descInx = self.descInx
            dataObjLseekInp.offset = self.position
            dataObjLseekInp.whence = SEEK_SET
            
            status, dataObjLseekOut = rcDataObjLseek(self._conn, dataObjLseekInp)
            readSize, outString = rcDataObjRead(self._conn, dataObjReadInp)
            
            self.position += readSize
            return outString

    def readline(self, size=None):
        res = ""
        end = False
        
        c = self.read(1)
        readsize = 1
        end = c == ''
    
        while not end:
            res += c
            c = self.read(1)
            readsize += 1
            if not c or c in ['\r', '\n']:
                res += c
                end = True
            if size:
                if readsize >= size:
                    res += c
                    end = True
    
        return res

    def replicate(self, rescName):
        global lastStatus
        dataObjInp = dataObjInp_t()
        dataObjInp.objPath = self.fullPath()
        addKeyVal(dataObjInp.condInput, RESC_NAME_KW, self.resourceName)
        replNum = getDataObjReplicaNumber(self._conn, self.collName,
                                          self.dataName, self.resourceName)
        if replNum:
            addKeyVal(dataObjInp.condInput, REPL_NUM_KW, replNum)
        addKeyVal(dataObjInp.condInput, DEST_RESC_NAME_KW, rescName)
        lastStatus = rcDataObjRepl(self._conn, dataObjInp)
        return lastStatus

    def rmUserMetadata(self, name, value, units=""):
        fullName = self.fullPath()
        return rmUserMetadata(self._conn, "-d", fullName, name, value, units)

    def seek(self, offset, whence=SEEK_SET):
        global lastStatus
        dataObjLseekInp = openedDataObjInp_t()
        dataObjLseekOut = fileLseekOut_t()
        dataObjLseekInp.l1descInx = self.descInx
        dataObjLseekInp.offset = offset
        dataObjLseekInp.whence = whence
        lastStatus, dataObjLseekOut = rcDataObjLseek(self._conn, dataObjLseekInp)
        if (whence == SEEK_SET):
            self.position = offset
        elif (whence == SEEK_CUR):
            self.position += offset
        elif (whence == SEEK_END):
            self.position = getDataObjSize(self._conn, self.collName, 
                                           self.dataName, self.resourceName) + offset
        return dataObjLseekOut

    def set_size(self):
        self.size = getDataObjSize(self._conn, self.collName, 
                                   self.dataName, self.resourceName)

    def tell(self):
        return self.getPosition()

    def update(self):
        global lastStatus
        dataObjInp = dataObjInp_t()
        dataObjInp.objPath = self.fullPath()
        addKeyVal(dataObjInp.condInput, UPDATE_REPL_KW, "")
        lastStatus = rcDataObjRepl(self._conn, dataObjInp)
        return lastStatus
    
    def write(self, inpBuff):
        global lastStatus
        if self.openFlag == O_RDONLY:
            # If the file is only open for reading and we try to write in it,
            # the call to rcDataObjRead will fail.
            return 0
        else:
            inpLen = len(inpBuff)
            dataObjWriteInpBBuf = bytesBuf_t()
            fileWriteInp = openedDataObjInp_t()
            fileWriteInp.l1descInx = self.descInx
            fileWriteInp.len = inpLen
            dataObjWriteInpBBuf.setBuf(inpBuff, inpLen)
            lastStatus = rcDataObjWrite(self._conn, fileWriteInp, dataObjWriteInpBBuf)
            if lastStatus > 0:
                self.position += lastStatus
                self.size += lastStatus
            return lastStatus


class regReplica_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, regReplica_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, regReplica_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["srcDataObjInfo"] = _irods.regReplica_t_srcDataObjInfo_set
    __swig_getmethods__["srcDataObjInfo"] = _irods.regReplica_t_srcDataObjInfo_get
    if _newclass:srcDataObjInfo = _swig_property(_irods.regReplica_t_srcDataObjInfo_get, _irods.regReplica_t_srcDataObjInfo_set)
    __swig_setmethods__["destDataObjInfo"] = _irods.regReplica_t_destDataObjInfo_set
    __swig_getmethods__["destDataObjInfo"] = _irods.regReplica_t_destDataObjInfo_get
    if _newclass:destDataObjInfo = _swig_property(_irods.regReplica_t_destDataObjInfo_get, _irods.regReplica_t_destDataObjInfo_set)
    __swig_setmethods__["condInput"] = _irods.regReplica_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.regReplica_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.regReplica_t_condInput_get, _irods.regReplica_t_condInput_set)
    def __init__(self): 
        this = _irods.new_regReplica_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_regReplica_t
    __del__ = lambda self : None;
regReplica_t_swigregister = _irods.regReplica_t_swigregister
regReplica_t_swigregister(regReplica_t)

class unregDataObj_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unregDataObj_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unregDataObj_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dataObjInfo"] = _irods.unregDataObj_t_dataObjInfo_set
    __swig_getmethods__["dataObjInfo"] = _irods.unregDataObj_t_dataObjInfo_get
    if _newclass:dataObjInfo = _swig_property(_irods.unregDataObj_t_dataObjInfo_get, _irods.unregDataObj_t_dataObjInfo_set)
    __swig_setmethods__["condInput"] = _irods.unregDataObj_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.unregDataObj_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.unregDataObj_t_condInput_get, _irods.unregDataObj_t_condInput_set)
    def __init__(self): 
        this = _irods.new_unregDataObj_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_unregDataObj_t
    __del__ = lambda self : None;
unregDataObj_t_swigregister = _irods.unregDataObj_t_swigregister
unregDataObj_t_swigregister(unregDataObj_t)


def clearRegReplicaInp(*args):
  return _irods.clearRegReplicaInp(*args)
clearRegReplicaInp = _irods.clearRegReplicaInp

def clearUnregDataObj(*args):
  return _irods.clearUnregDataObj(*args)
clearUnregDataObj = _irods.clearUnregDataObj

def rcCloseCollection(*args):
  return _irods.rcCloseCollection(*args)
rcCloseCollection = _irods.rcCloseCollection

def rcCollCreate(*args):
  return _irods.rcCollCreate(*args)
rcCollCreate = _irods.rcCollCreate

def rcCollRepl(*args):
  return _irods.rcCollRepl(*args)
rcCollRepl = _irods.rcCollRepl

def rcModColl(*args):
  return _irods.rcModColl(*args)
rcModColl = _irods.rcModColl

def rcOpenCollection(*args):
  return _irods.rcOpenCollection(*args)
rcOpenCollection = _irods.rcOpenCollection

def rcOprComplete(*args):
  return _irods.rcOprComplete(*args)
rcOprComplete = _irods.rcOprComplete

def rcPhyPathReg(*args):
  return _irods.rcPhyPathReg(*args)
rcPhyPathReg = _irods.rcPhyPathReg

def rcReadCollection(*args):
  return _irods.rcReadCollection(*args)
rcReadCollection = _irods.rcReadCollection

def rcRegColl(*args):
  return _irods.rcRegColl(*args)
rcRegColl = _irods.rcRegColl

def rcRegDataObj(*args):
  return _irods.rcRegDataObj(*args)
rcRegDataObj = _irods.rcRegDataObj

def rcSyncMountedColl(*args):
  return _irods.rcSyncMountedColl(*args)
rcSyncMountedColl = _irods.rcSyncMountedColl

def rcRegReplica(*args):
  return _irods.rcRegReplica(*args)
rcRegReplica = _irods.rcRegReplica

def rcUnregDataObj(*args):
  return _irods.rcUnregDataObj(*args)
rcUnregDataObj = _irods.rcUnregDataObj
ALL_KW = _irods.ALL_KW
COPIES_KW = _irods.COPIES_KW
EXEC_LOCALLY_KW = _irods.EXEC_LOCALLY_KW
FORCE_FLAG_KW = _irods.FORCE_FLAG_KW
CLI_IN_SVR_FIREWALL_KW = _irods.CLI_IN_SVR_FIREWALL_KW
REG_CHKSUM_KW = _irods.REG_CHKSUM_KW
VERIFY_CHKSUM_KW = _irods.VERIFY_CHKSUM_KW
VERIFY_BY_SIZE_KW = _irods.VERIFY_BY_SIZE_KW
OBJ_PATH_KW = _irods.OBJ_PATH_KW
RESC_NAME_KW = _irods.RESC_NAME_KW
DEST_RESC_NAME_KW = _irods.DEST_RESC_NAME_KW
DEF_RESC_NAME_KW = _irods.DEF_RESC_NAME_KW
BACKUP_RESC_NAME_KW = _irods.BACKUP_RESC_NAME_KW
DATA_TYPE_KW = _irods.DATA_TYPE_KW
DATA_SIZE_KW = _irods.DATA_SIZE_KW
CHKSUM_KW = _irods.CHKSUM_KW
VERSION_KW = _irods.VERSION_KW
FILE_PATH_KW = _irods.FILE_PATH_KW
BUN_FILE_PATH_KW = _irods.BUN_FILE_PATH_KW
REPL_NUM_KW = _irods.REPL_NUM_KW
WRITE_FLAG_KW = _irods.WRITE_FLAG_KW
REPL_STATUS_KW = _irods.REPL_STATUS_KW
ALL_REPL_STATUS_KW = _irods.ALL_REPL_STATUS_KW
DATA_INCLUDED_KW = _irods.DATA_INCLUDED_KW
DATA_OWNER_KW = _irods.DATA_OWNER_KW
DATA_OWNER_ZONE_KW = _irods.DATA_OWNER_ZONE_KW
DATA_EXPIRY_KW = _irods.DATA_EXPIRY_KW
DATA_COMMENTS_KW = _irods.DATA_COMMENTS_KW
DATA_CREATE_KW = _irods.DATA_CREATE_KW
DATA_MODIFY_KW = _irods.DATA_MODIFY_KW
DATA_ACCESS_KW = _irods.DATA_ACCESS_KW
DATA_ACCESS_INX_KW = _irods.DATA_ACCESS_INX_KW
NO_OPEN_FLAG_KW = _irods.NO_OPEN_FLAG_KW
PHYOPEN_BY_SIZE_KW = _irods.PHYOPEN_BY_SIZE_KW
STREAMING_KW = _irods.STREAMING_KW
DATA_ID_KW = _irods.DATA_ID_KW
COLL_ID_KW = _irods.COLL_ID_KW
RESC_GROUP_NAME_KW = _irods.RESC_GROUP_NAME_KW
DATA_MODE_KW = _irods.DATA_MODE_KW
STATUS_STRING_KW = _irods.STATUS_STRING_KW
DATA_MAP_ID_KW = _irods.DATA_MAP_ID_KW
NO_PARA_OP_KW = _irods.NO_PARA_OP_KW
LOCAL_PATH_KW = _irods.LOCAL_PATH_KW
RSYNC_MODE_KW = _irods.RSYNC_MODE_KW
RSYNC_DEST_PATH_KW = _irods.RSYNC_DEST_PATH_KW
RSYNC_CHKSUM_KW = _irods.RSYNC_CHKSUM_KW
CHKSUM_ALL_KW = _irods.CHKSUM_ALL_KW
FORCE_CHKSUM_KW = _irods.FORCE_CHKSUM_KW
COLLECTION_KW = _irods.COLLECTION_KW
IRODS_ADMIN_KW = _irods.IRODS_ADMIN_KW
IRODS_ADMIN_RMTRASH_KW = _irods.IRODS_ADMIN_RMTRASH_KW
IRODS_RMTRASH_KW = _irods.IRODS_RMTRASH_KW
UNREG_KW = _irods.UNREG_KW
RECURSIVE_OPR__KW = _irods.RECURSIVE_OPR__KW
COLLECTION_TYPE_KW = _irods.COLLECTION_TYPE_KW
COLLECTION_INFO1_KW = _irods.COLLECTION_INFO1_KW
COLLECTION_INFO2_KW = _irods.COLLECTION_INFO2_KW
SEL_OBJ_TYPE_KW = _irods.SEL_OBJ_TYPE_KW
STRUCT_FILE_OPR_KW = _irods.STRUCT_FILE_OPR_KW
ALL_MS_PARAM_KW = _irods.ALL_MS_PARAM_KW
UNREG_COLL_KW = _irods.UNREG_COLL_KW
UPDATE_REPL_KW = _irods.UPDATE_REPL_KW
RBUDP_TRANSFER_KW = _irods.RBUDP_TRANSFER_KW
VERY_VERBOSE_KW = _irods.VERY_VERBOSE_KW
RBUDP_SEND_RATE_KW = _irods.RBUDP_SEND_RATE_KW
RBUDP_PACK_SIZE_KW = _irods.RBUDP_PACK_SIZE_KW
ZONE_KW = _irods.ZONE_KW
REMOTE_ZONE_OPR_KW = _irods.REMOTE_ZONE_OPR_KW
REPL_DATA_OBJ_INP_KW = _irods.REPL_DATA_OBJ_INP_KW
CROSS_ZONE_CREATE_KW = _irods.CROSS_ZONE_CREATE_KW
QUERY_BY_DATA_ID_KW = _irods.QUERY_BY_DATA_ID_KW
SU_CLIENT_USER_KW = _irods.SU_CLIENT_USER_KW
RM_BUN_COPY_KW = _irods.RM_BUN_COPY_KW
KEY_WORD_KW = _irods.KEY_WORD_KW
CREATE_MODE_KW = _irods.CREATE_MODE_KW
OPEN_FLAGS_KW = _irods.OPEN_FLAGS_KW
OFFSET_KW = _irods.OFFSET_KW
NUM_THREADS_KW = _irods.NUM_THREADS_KW
OPR_TYPE_KW = _irods.OPR_TYPE_KW
COLL_FLAGS_KW = _irods.COLL_FLAGS_KW
TRANSLATED_PATH_KW = _irods.TRANSLATED_PATH_KW
NO_TRANSLATE_LINKPT_KW = _irods.NO_TRANSLATE_LINKPT_KW
BULK_OPR_KW = _irods.BULK_OPR_KW
NON_BULK_OPR_KW = _irods.NON_BULK_OPR_KW
EXEC_CMD_RULE_KW = _irods.EXEC_CMD_RULE_KW
EXEC_MY_RULE_KW = _irods.EXEC_MY_RULE_KW
STREAM_STDOUT_KW = _irods.STREAM_STDOUT_KW
REG_REPL_KW = _irods.REG_REPL_KW
AGE_KW = _irods.AGE_KW
DRYRUN_KW = _irods.DRYRUN_KW
ACL_COLLECTION_KW = _irods.ACL_COLLECTION_KW
NO_CHK_COPY_LEN_KW = _irods.NO_CHK_COPY_LEN_KW
TICKET_KW = _irods.TICKET_KW
PURGE_CACHE_KW = _irods.PURGE_CACHE_KW
EMPTY_BUNDLE_ONLY_KW = _irods.EMPTY_BUNDLE_ONLY_KW
LOCK_TYPE_KW = _irods.LOCK_TYPE_KW
LOCK_CMD_KW = _irods.LOCK_CMD_KW
LOCK_FD_KW = _irods.LOCK_FD_KW
NATIVE_NETCDF_CALL_KW = _irods.NATIVE_NETCDF_CALL_KW
MAX_SUB_FILE_KW = _irods.MAX_SUB_FILE_KW
NO_STAGING_KW = _irods.NO_STAGING_KW
FILE_UID_KW = _irods.FILE_UID_KW
FILE_OWNER_KW = _irods.FILE_OWNER_KW
FILE_GID_KW = _irods.FILE_GID_KW
FILE_GROUP_KW = _irods.FILE_GROUP_KW
FILE_MODE_KW = _irods.FILE_MODE_KW
FILE_CTIME_KW = _irods.FILE_CTIME_KW
FILE_MTIME_KW = _irods.FILE_MTIME_KW
FILE_SOURCE_PATH_KW = _irods.FILE_SOURCE_PATH_KW
EXCLUDE_FILE_KW = _irods.EXCLUDE_FILE_KW
RESC_ZONE_KW = _irods.RESC_ZONE_KW
RESC_LOC_KW = _irods.RESC_LOC_KW
RESC_TYPE_KW = _irods.RESC_TYPE_KW
RESC_CLASS_KW = _irods.RESC_CLASS_KW
RESC_VAULT_PATH_KW = _irods.RESC_VAULT_PATH_KW
RESC_STATUS_KW = _irods.RESC_STATUS_KW
PARA_OPR_KW = _irods.PARA_OPR_KW
GATEWAY_ADDR_KW = _irods.GATEWAY_ADDR_KW
RESC_MAX_OBJ_SIZE_KW = _irods.RESC_MAX_OBJ_SIZE_KW
FREE_SPACE_KW = _irods.FREE_SPACE_KW
FREE_SPACE_TIME_KW = _irods.FREE_SPACE_TIME_KW
FREE_SPACE_TIMESTAMP_KW = _irods.FREE_SPACE_TIMESTAMP_KW
RESC_TYPE_INX_KW = _irods.RESC_TYPE_INX_KW
RESC_CLASS_INX_KW = _irods.RESC_CLASS_INX_KW
RESC_ID_KW = _irods.RESC_ID_KW
RESC_INFO_KW = _irods.RESC_INFO_KW
RESC_COMMENTS_KW = _irods.RESC_COMMENTS_KW
RESC_CREATE_KW = _irods.RESC_CREATE_KW
RESC_MODIFY_KW = _irods.RESC_MODIFY_KW
USER_NAME_CLIENT_KW = _irods.USER_NAME_CLIENT_KW
RODS_ZONE_CLIENT_KW = _irods.RODS_ZONE_CLIENT_KW
HOST_CLIENT_KW = _irods.HOST_CLIENT_KW
CLIENT_ADDR_KW = _irods.CLIENT_ADDR_KW
USER_TYPE_CLIENT_KW = _irods.USER_TYPE_CLIENT_KW
AUTH_STR_CLIENT_KW = _irods.AUTH_STR_CLIENT_KW
USER_AUTH_SCHEME_CLIENT_KW = _irods.USER_AUTH_SCHEME_CLIENT_KW
USER_INFO_CLIENT_KW = _irods.USER_INFO_CLIENT_KW
USER_COMMENT_CLIENT_KW = _irods.USER_COMMENT_CLIENT_KW
USER_CREATE_CLIENT_KW = _irods.USER_CREATE_CLIENT_KW
USER_MODIFY_CLIENT_KW = _irods.USER_MODIFY_CLIENT_KW
USER_NAME_PROXY_KW = _irods.USER_NAME_PROXY_KW
RODS_ZONE_PROXY_KW = _irods.RODS_ZONE_PROXY_KW
HOST_PROXY_KW = _irods.HOST_PROXY_KW
USER_TYPE_PROXY_KW = _irods.USER_TYPE_PROXY_KW
AUTH_STR_PROXY_KW = _irods.AUTH_STR_PROXY_KW
USER_AUTH_SCHEME_PROXY_KW = _irods.USER_AUTH_SCHEME_PROXY_KW
USER_INFO_PROXY_KW = _irods.USER_INFO_PROXY_KW
USER_COMMENT_PROXY_KW = _irods.USER_COMMENT_PROXY_KW
USER_CREATE_PROXY_KW = _irods.USER_CREATE_PROXY_KW
USER_MODIFY_PROXY_KW = _irods.USER_MODIFY_PROXY_KW
ACCESS_PERMISSION_KW = _irods.ACCESS_PERMISSION_KW
NO_CHK_FILE_PERM_KW = _irods.NO_CHK_FILE_PERM_KW
COLL_NAME_KW = _irods.COLL_NAME_KW
COLL_PARENT_NAME_KW = _irods.COLL_PARENT_NAME_KW
COLL_OWNER_NAME_KW = _irods.COLL_OWNER_NAME_KW
COLL_OWNER_ZONE_KW = _irods.COLL_OWNER_ZONE_KW
COLL_MAP_ID_KW = _irods.COLL_MAP_ID_KW
COLL_INHERITANCE_KW = _irods.COLL_INHERITANCE_KW
COLL_COMMENTS_KW = _irods.COLL_COMMENTS_KW
COLL_EXPIRY_KW = _irods.COLL_EXPIRY_KW
COLL_CREATE_KW = _irods.COLL_CREATE_KW
COLL_MODIFY_KW = _irods.COLL_MODIFY_KW
COLL_ACCESS_KW = _irods.COLL_ACCESS_KW
COLL_ACCESS_INX_KW = _irods.COLL_ACCESS_INX_KW
RULE_NAME_KW = _irods.RULE_NAME_KW
RULE_REI_FILE_PATH_KW = _irods.RULE_REI_FILE_PATH_KW
RULE_USER_NAME_KW = _irods.RULE_USER_NAME_KW
RULE_EXE_ADDRESS_KW = _irods.RULE_EXE_ADDRESS_KW
RULE_EXE_TIME_KW = _irods.RULE_EXE_TIME_KW
RULE_EXE_FREQUENCY_KW = _irods.RULE_EXE_FREQUENCY_KW
RULE_PRIORITY_KW = _irods.RULE_PRIORITY_KW
RULE_ESTIMATE_EXE_TIME_KW = _irods.RULE_ESTIMATE_EXE_TIME_KW
RULE_NOTIFICATION_ADDR_KW = _irods.RULE_NOTIFICATION_ADDR_KW
RULE_LAST_EXE_TIME_KW = _irods.RULE_LAST_EXE_TIME_KW
RULE_EXE_STATUS_KW = _irods.RULE_EXE_STATUS_KW

def rodsErrorName(*args):
  return _irods.rodsErrorName(*args)
rodsErrorName = _irods.rodsErrorName

def rodsLog(*args):
  return _irods.rodsLog(*args)
rodsLog = _irods.rodsLog

def rodsLogError(*args):
  return _irods.rodsLogError(*args)
rodsLogError = _irods.rodsLogError

def rodsLogLevel(*args):
  return _irods.rodsLogLevel(*args)
rodsLogLevel = _irods.rodsLogLevel
class modDataObjMeta_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, modDataObjMeta_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, modDataObjMeta_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dataObjInfo"] = _irods.modDataObjMeta_t_dataObjInfo_set
    __swig_getmethods__["dataObjInfo"] = _irods.modDataObjMeta_t_dataObjInfo_get
    if _newclass:dataObjInfo = _swig_property(_irods.modDataObjMeta_t_dataObjInfo_get, _irods.modDataObjMeta_t_dataObjInfo_set)
    __swig_setmethods__["regParam"] = _irods.modDataObjMeta_t_regParam_set
    __swig_getmethods__["regParam"] = _irods.modDataObjMeta_t_regParam_get
    if _newclass:regParam = _swig_property(_irods.modDataObjMeta_t_regParam_get, _irods.modDataObjMeta_t_regParam_set)
    def __init__(self): 
        this = _irods.new_modDataObjMeta_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_modDataObjMeta_t
    __del__ = lambda self : None;
modDataObjMeta_t_swigregister = _irods.modDataObjMeta_t_swigregister
modDataObjMeta_t_swigregister(modDataObjMeta_t)

class modAVUMetadataInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, modAVUMetadataInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, modAVUMetadataInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arg0"] = _irods.modAVUMetadataInp_t_arg0_set
    __swig_getmethods__["arg0"] = _irods.modAVUMetadataInp_t_arg0_get
    if _newclass:arg0 = _swig_property(_irods.modAVUMetadataInp_t_arg0_get, _irods.modAVUMetadataInp_t_arg0_set)
    __swig_setmethods__["arg1"] = _irods.modAVUMetadataInp_t_arg1_set
    __swig_getmethods__["arg1"] = _irods.modAVUMetadataInp_t_arg1_get
    if _newclass:arg1 = _swig_property(_irods.modAVUMetadataInp_t_arg1_get, _irods.modAVUMetadataInp_t_arg1_set)
    __swig_setmethods__["arg2"] = _irods.modAVUMetadataInp_t_arg2_set
    __swig_getmethods__["arg2"] = _irods.modAVUMetadataInp_t_arg2_get
    if _newclass:arg2 = _swig_property(_irods.modAVUMetadataInp_t_arg2_get, _irods.modAVUMetadataInp_t_arg2_set)
    __swig_setmethods__["arg3"] = _irods.modAVUMetadataInp_t_arg3_set
    __swig_getmethods__["arg3"] = _irods.modAVUMetadataInp_t_arg3_get
    if _newclass:arg3 = _swig_property(_irods.modAVUMetadataInp_t_arg3_get, _irods.modAVUMetadataInp_t_arg3_set)
    __swig_setmethods__["arg4"] = _irods.modAVUMetadataInp_t_arg4_set
    __swig_getmethods__["arg4"] = _irods.modAVUMetadataInp_t_arg4_get
    if _newclass:arg4 = _swig_property(_irods.modAVUMetadataInp_t_arg4_get, _irods.modAVUMetadataInp_t_arg4_set)
    __swig_setmethods__["arg5"] = _irods.modAVUMetadataInp_t_arg5_set
    __swig_getmethods__["arg5"] = _irods.modAVUMetadataInp_t_arg5_get
    if _newclass:arg5 = _swig_property(_irods.modAVUMetadataInp_t_arg5_get, _irods.modAVUMetadataInp_t_arg5_set)
    __swig_setmethods__["arg6"] = _irods.modAVUMetadataInp_t_arg6_set
    __swig_getmethods__["arg6"] = _irods.modAVUMetadataInp_t_arg6_get
    if _newclass:arg6 = _swig_property(_irods.modAVUMetadataInp_t_arg6_get, _irods.modAVUMetadataInp_t_arg6_set)
    __swig_setmethods__["arg7"] = _irods.modAVUMetadataInp_t_arg7_set
    __swig_getmethods__["arg7"] = _irods.modAVUMetadataInp_t_arg7_get
    if _newclass:arg7 = _swig_property(_irods.modAVUMetadataInp_t_arg7_get, _irods.modAVUMetadataInp_t_arg7_set)
    __swig_setmethods__["arg8"] = _irods.modAVUMetadataInp_t_arg8_set
    __swig_getmethods__["arg8"] = _irods.modAVUMetadataInp_t_arg8_get
    if _newclass:arg8 = _swig_property(_irods.modAVUMetadataInp_t_arg8_get, _irods.modAVUMetadataInp_t_arg8_set)
    __swig_setmethods__["arg9"] = _irods.modAVUMetadataInp_t_arg9_set
    __swig_getmethods__["arg9"] = _irods.modAVUMetadataInp_t_arg9_get
    if _newclass:arg9 = _swig_property(_irods.modAVUMetadataInp_t_arg9_get, _irods.modAVUMetadataInp_t_arg9_set)
    def __init__(self): 
        this = _irods.new_modAVUMetadataInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_modAVUMetadataInp_t
    __del__ = lambda self : None;
modAVUMetadataInp_t_swigregister = _irods.modAVUMetadataInp_t_swigregister
modAVUMetadataInp_t_swigregister(modAVUMetadataInp_t)


def clearModAVUMetadataInp(*args):
  return _irods.clearModAVUMetadataInp(*args)
clearModAVUMetadataInp = _irods.clearModAVUMetadataInp

def clearModDataObjMetaInp(*args):
  return _irods.clearModDataObjMetaInp(*args)
clearModDataObjMetaInp = _irods.clearModDataObjMetaInp

def rcModAVUMetadata(*args):
  return _irods.rcModAVUMetadata(*args)
rcModAVUMetadata = _irods.rcModAVUMetadata

def rcModDataObjMeta(*args):
  return _irods.rcModDataObjMeta(*args)
rcModDataObjMeta = _irods.rcModDataObjMeta
class rodsPath_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rodsPath_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rodsPath_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["objType"] = _irods.rodsPath_t_objType_set
    __swig_getmethods__["objType"] = _irods.rodsPath_t_objType_get
    if _newclass:objType = _swig_property(_irods.rodsPath_t_objType_get, _irods.rodsPath_t_objType_set)
    __swig_setmethods__["objState"] = _irods.rodsPath_t_objState_set
    __swig_getmethods__["objState"] = _irods.rodsPath_t_objState_get
    if _newclass:objState = _swig_property(_irods.rodsPath_t_objState_get, _irods.rodsPath_t_objState_set)
    __swig_setmethods__["size"] = _irods.rodsPath_t_size_set
    __swig_getmethods__["size"] = _irods.rodsPath_t_size_get
    if _newclass:size = _swig_property(_irods.rodsPath_t_size_get, _irods.rodsPath_t_size_set)
    __swig_setmethods__["objMode"] = _irods.rodsPath_t_objMode_set
    __swig_getmethods__["objMode"] = _irods.rodsPath_t_objMode_get
    if _newclass:objMode = _swig_property(_irods.rodsPath_t_objMode_get, _irods.rodsPath_t_objMode_set)
    __swig_setmethods__["inPath"] = _irods.rodsPath_t_inPath_set
    __swig_getmethods__["inPath"] = _irods.rodsPath_t_inPath_get
    if _newclass:inPath = _swig_property(_irods.rodsPath_t_inPath_get, _irods.rodsPath_t_inPath_set)
    __swig_setmethods__["outPath"] = _irods.rodsPath_t_outPath_set
    __swig_getmethods__["outPath"] = _irods.rodsPath_t_outPath_get
    if _newclass:outPath = _swig_property(_irods.rodsPath_t_outPath_get, _irods.rodsPath_t_outPath_set)
    __swig_setmethods__["dataId"] = _irods.rodsPath_t_dataId_set
    __swig_getmethods__["dataId"] = _irods.rodsPath_t_dataId_get
    if _newclass:dataId = _swig_property(_irods.rodsPath_t_dataId_get, _irods.rodsPath_t_dataId_set)
    __swig_setmethods__["chksum"] = _irods.rodsPath_t_chksum_set
    __swig_getmethods__["chksum"] = _irods.rodsPath_t_chksum_get
    if _newclass:chksum = _swig_property(_irods.rodsPath_t_chksum_get, _irods.rodsPath_t_chksum_set)
    __swig_setmethods__["rodsObjStat"] = _irods.rodsPath_t_rodsObjStat_set
    __swig_getmethods__["rodsObjStat"] = _irods.rodsPath_t_rodsObjStat_get
    if _newclass:rodsObjStat = _swig_property(_irods.rodsPath_t_rodsObjStat_get, _irods.rodsPath_t_rodsObjStat_set)
    def __init__(self): 
        this = _irods.new_rodsPath_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rodsPath_t
    __del__ = lambda self : None;
rodsPath_t_swigregister = _irods.rodsPath_t_swigregister
rodsPath_t_swigregister(rodsPath_t)

class rodsPathInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rodsPathInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rodsPathInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numSrc"] = _irods.rodsPathInp_t_numSrc_set
    __swig_getmethods__["numSrc"] = _irods.rodsPathInp_t_numSrc_get
    if _newclass:numSrc = _swig_property(_irods.rodsPathInp_t_numSrc_get, _irods.rodsPathInp_t_numSrc_set)
    __swig_setmethods__["srcPath"] = _irods.rodsPathInp_t_srcPath_set
    __swig_getmethods__["srcPath"] = _irods.rodsPathInp_t_srcPath_get
    if _newclass:srcPath = _swig_property(_irods.rodsPathInp_t_srcPath_get, _irods.rodsPathInp_t_srcPath_set)
    __swig_setmethods__["destPath"] = _irods.rodsPathInp_t_destPath_set
    __swig_getmethods__["destPath"] = _irods.rodsPathInp_t_destPath_get
    if _newclass:destPath = _swig_property(_irods.rodsPathInp_t_destPath_get, _irods.rodsPathInp_t_destPath_set)
    __swig_setmethods__["targPath"] = _irods.rodsPathInp_t_targPath_set
    __swig_getmethods__["targPath"] = _irods.rodsPathInp_t_targPath_get
    if _newclass:targPath = _swig_property(_irods.rodsPathInp_t_targPath_get, _irods.rodsPathInp_t_targPath_set)
    __swig_setmethods__["resolved"] = _irods.rodsPathInp_t_resolved_set
    __swig_getmethods__["resolved"] = _irods.rodsPathInp_t_resolved_get
    if _newclass:resolved = _swig_property(_irods.rodsPathInp_t_resolved_get, _irods.rodsPathInp_t_resolved_set)
    def getSrcPath(self, *args): return _irods.rodsPathInp_t_getSrcPath(self, *args)
    def getDestPath(self, *args): return _irods.rodsPathInp_t_getDestPath(self, *args)
    def getTargPath(self, *args): return _irods.rodsPathInp_t_getTargPath(self, *args)
    def __init__(self): 
        this = _irods.new_rodsPathInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rodsPathInp_t
    __del__ = lambda self : None;
rodsPathInp_t_swigregister = _irods.rodsPathInp_t_swigregister
rodsPathInp_t_swigregister(rodsPathInp_t)


def addSrcInPath(*args):
  return _irods.addSrcInPath(*args)
addSrcInPath = _irods.addSrcInPath

def getLastPathElement(*args):
  return _irods.getLastPathElement(*args)
getLastPathElement = _irods.getLastPathElement
def getLastPathElement(inPath):
    """getLastPathElement - 
  Input -
    str inPath -
  OutPut - (str, int)
    str lastElement
    int status - status of the operation."""
    global lastStatus
    # TO IMPROVE: irods doesn't manage this out string well
    lastElement = "_" * MAX_NAME_LEN
    lastStatus = _irods.getLastPathElement(inPath, lastElement)
    lastElement = lastElement[:lastElement.find('\0')]
    return (lastStatus, lastElement)


def parseCmdLinePath(*args):
  return _irods.parseCmdLinePath(*args)
parseCmdLinePath = _irods.parseCmdLinePath

def parseRodsPath(*args):
  return _irods.parseRodsPath(*args)
parseRodsPath = _irods.parseRodsPath

def parseRodsPathStr(*args):
  return _irods.parseRodsPathStr(*args)
parseRodsPathStr = _irods.parseRodsPathStr

def resolveRodsTarget(*args):
  return _irods.resolveRodsTarget(*args)
resolveRodsTarget = _irods.resolveRodsTarget
class generalUpdateInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, generalUpdateInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, generalUpdateInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _irods.generalUpdateInp_t_type_set
    __swig_getmethods__["type"] = _irods.generalUpdateInp_t_type_get
    if _newclass:type = _swig_property(_irods.generalUpdateInp_t_type_get, _irods.generalUpdateInp_t_type_set)
    __swig_setmethods__["values"] = _irods.generalUpdateInp_t_values_set
    __swig_getmethods__["values"] = _irods.generalUpdateInp_t_values_get
    if _newclass:values = _swig_property(_irods.generalUpdateInp_t_values_get, _irods.generalUpdateInp_t_values_set)
    def __init__(self): 
        this = _irods.new_generalUpdateInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_generalUpdateInp_t
    __del__ = lambda self : None;
generalUpdateInp_t_swigregister = _irods.generalUpdateInp_t_swigregister
generalUpdateInp_t_swigregister(generalUpdateInp_t)

class genQueryInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, genQueryInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, genQueryInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxRows"] = _irods.genQueryInp_t_maxRows_set
    __swig_getmethods__["maxRows"] = _irods.genQueryInp_t_maxRows_get
    if _newclass:maxRows = _swig_property(_irods.genQueryInp_t_maxRows_get, _irods.genQueryInp_t_maxRows_set)
    __swig_setmethods__["continueInx"] = _irods.genQueryInp_t_continueInx_set
    __swig_getmethods__["continueInx"] = _irods.genQueryInp_t_continueInx_get
    if _newclass:continueInx = _swig_property(_irods.genQueryInp_t_continueInx_get, _irods.genQueryInp_t_continueInx_set)
    __swig_setmethods__["rowOffset"] = _irods.genQueryInp_t_rowOffset_set
    __swig_getmethods__["rowOffset"] = _irods.genQueryInp_t_rowOffset_get
    if _newclass:rowOffset = _swig_property(_irods.genQueryInp_t_rowOffset_get, _irods.genQueryInp_t_rowOffset_set)
    __swig_setmethods__["options"] = _irods.genQueryInp_t_options_set
    __swig_getmethods__["options"] = _irods.genQueryInp_t_options_get
    if _newclass:options = _swig_property(_irods.genQueryInp_t_options_get, _irods.genQueryInp_t_options_set)
    __swig_setmethods__["condInput"] = _irods.genQueryInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.genQueryInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.genQueryInp_t_condInput_get, _irods.genQueryInp_t_condInput_set)
    __swig_setmethods__["selectInp"] = _irods.genQueryInp_t_selectInp_set
    __swig_getmethods__["selectInp"] = _irods.genQueryInp_t_selectInp_get
    if _newclass:selectInp = _swig_property(_irods.genQueryInp_t_selectInp_get, _irods.genQueryInp_t_selectInp_set)
    __swig_setmethods__["sqlCondInp"] = _irods.genQueryInp_t_sqlCondInp_set
    __swig_getmethods__["sqlCondInp"] = _irods.genQueryInp_t_sqlCondInp_get
    if _newclass:sqlCondInp = _swig_property(_irods.genQueryInp_t_sqlCondInp_get, _irods.genQueryInp_t_sqlCondInp_set)
    def __init__(self): 
        this = _irods.new_genQueryInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_genQueryInp_t
    __del__ = lambda self : None;
genQueryInp_t_swigregister = _irods.genQueryInp_t_swigregister
genQueryInp_t_swigregister(genQueryInp_t)

class genQueryOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, genQueryOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, genQueryOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rowCnt"] = _irods.genQueryOut_t_rowCnt_set
    __swig_getmethods__["rowCnt"] = _irods.genQueryOut_t_rowCnt_get
    if _newclass:rowCnt = _swig_property(_irods.genQueryOut_t_rowCnt_get, _irods.genQueryOut_t_rowCnt_set)
    __swig_setmethods__["attriCnt"] = _irods.genQueryOut_t_attriCnt_set
    __swig_getmethods__["attriCnt"] = _irods.genQueryOut_t_attriCnt_get
    if _newclass:attriCnt = _swig_property(_irods.genQueryOut_t_attriCnt_get, _irods.genQueryOut_t_attriCnt_set)
    __swig_setmethods__["continueInx"] = _irods.genQueryOut_t_continueInx_set
    __swig_getmethods__["continueInx"] = _irods.genQueryOut_t_continueInx_get
    if _newclass:continueInx = _swig_property(_irods.genQueryOut_t_continueInx_get, _irods.genQueryOut_t_continueInx_set)
    __swig_setmethods__["totalRowCount"] = _irods.genQueryOut_t_totalRowCount_set
    __swig_getmethods__["totalRowCount"] = _irods.genQueryOut_t_totalRowCount_get
    if _newclass:totalRowCount = _swig_property(_irods.genQueryOut_t_totalRowCount_get, _irods.genQueryOut_t_totalRowCount_set)
    __swig_setmethods__["sqlResult"] = _irods.genQueryOut_t_sqlResult_set
    __swig_getmethods__["sqlResult"] = _irods.genQueryOut_t_sqlResult_get
    if _newclass:sqlResult = _swig_property(_irods.genQueryOut_t_sqlResult_get, _irods.genQueryOut_t_sqlResult_set)
    def release(self): return _irods.genQueryOut_t_release(self)
    def getSqlResult(self): return _irods.genQueryOut_t_getSqlResult(self)
    def getSqlResultIdx(self, *args): return _irods.genQueryOut_t_getSqlResultIdx(self, *args)
    def getSqlResultByInxIdx(self, *args): return _irods.genQueryOut_t_getSqlResultByInxIdx(self, *args)
    def __init__(self): 
        this = _irods.new_genQueryOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_genQueryOut_t
    __del__ = lambda self : None;
genQueryOut_t_swigregister = _irods.genQueryOut_t_swigregister
genQueryOut_t_swigregister(genQueryOut_t)

class simpleQueryInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simpleQueryInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simpleQueryInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sql"] = _irods.simpleQueryInp_t_sql_set
    __swig_getmethods__["sql"] = _irods.simpleQueryInp_t_sql_get
    if _newclass:sql = _swig_property(_irods.simpleQueryInp_t_sql_get, _irods.simpleQueryInp_t_sql_set)
    __swig_setmethods__["arg1"] = _irods.simpleQueryInp_t_arg1_set
    __swig_getmethods__["arg1"] = _irods.simpleQueryInp_t_arg1_get
    if _newclass:arg1 = _swig_property(_irods.simpleQueryInp_t_arg1_get, _irods.simpleQueryInp_t_arg1_set)
    __swig_setmethods__["arg2"] = _irods.simpleQueryInp_t_arg2_set
    __swig_getmethods__["arg2"] = _irods.simpleQueryInp_t_arg2_get
    if _newclass:arg2 = _swig_property(_irods.simpleQueryInp_t_arg2_get, _irods.simpleQueryInp_t_arg2_set)
    __swig_setmethods__["arg3"] = _irods.simpleQueryInp_t_arg3_set
    __swig_getmethods__["arg3"] = _irods.simpleQueryInp_t_arg3_get
    if _newclass:arg3 = _swig_property(_irods.simpleQueryInp_t_arg3_get, _irods.simpleQueryInp_t_arg3_set)
    __swig_setmethods__["arg4"] = _irods.simpleQueryInp_t_arg4_set
    __swig_getmethods__["arg4"] = _irods.simpleQueryInp_t_arg4_get
    if _newclass:arg4 = _swig_property(_irods.simpleQueryInp_t_arg4_get, _irods.simpleQueryInp_t_arg4_set)
    __swig_setmethods__["control"] = _irods.simpleQueryInp_t_control_set
    __swig_getmethods__["control"] = _irods.simpleQueryInp_t_control_get
    if _newclass:control = _swig_property(_irods.simpleQueryInp_t_control_get, _irods.simpleQueryInp_t_control_set)
    __swig_setmethods__["form"] = _irods.simpleQueryInp_t_form_set
    __swig_getmethods__["form"] = _irods.simpleQueryInp_t_form_get
    if _newclass:form = _swig_property(_irods.simpleQueryInp_t_form_get, _irods.simpleQueryInp_t_form_set)
    __swig_setmethods__["maxBufSize"] = _irods.simpleQueryInp_t_maxBufSize_set
    __swig_getmethods__["maxBufSize"] = _irods.simpleQueryInp_t_maxBufSize_get
    if _newclass:maxBufSize = _swig_property(_irods.simpleQueryInp_t_maxBufSize_get, _irods.simpleQueryInp_t_maxBufSize_set)
    def __init__(self): 
        this = _irods.new_simpleQueryInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_simpleQueryInp_t
    __del__ = lambda self : None;
simpleQueryInp_t_swigregister = _irods.simpleQueryInp_t_swigregister
simpleQueryInp_t_swigregister(simpleQueryInp_t)

class simpleQueryOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, simpleQueryOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, simpleQueryOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["control"] = _irods.simpleQueryOut_t_control_set
    __swig_getmethods__["control"] = _irods.simpleQueryOut_t_control_get
    if _newclass:control = _swig_property(_irods.simpleQueryOut_t_control_get, _irods.simpleQueryOut_t_control_set)
    __swig_setmethods__["outBuf"] = _irods.simpleQueryOut_t_outBuf_set
    __swig_getmethods__["outBuf"] = _irods.simpleQueryOut_t_outBuf_get
    if _newclass:outBuf = _swig_property(_irods.simpleQueryOut_t_outBuf_get, _irods.simpleQueryOut_t_outBuf_set)
    def __init__(self): 
        this = _irods.new_simpleQueryOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_simpleQueryOut_t
    __del__ = lambda self : None;
simpleQueryOut_t_swigregister = _irods.simpleQueryOut_t_swigregister
simpleQueryOut_t_swigregister(simpleQueryOut_t)

class sqlResult_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sqlResult_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sqlResult_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["attriInx"] = _irods.sqlResult_t_attriInx_set
    __swig_getmethods__["attriInx"] = _irods.sqlResult_t_attriInx_get
    if _newclass:attriInx = _swig_property(_irods.sqlResult_t_attriInx_get, _irods.sqlResult_t_attriInx_set)
    __swig_setmethods__["len"] = _irods.sqlResult_t_len_set
    __swig_getmethods__["len"] = _irods.sqlResult_t_len_get
    if _newclass:len = _swig_property(_irods.sqlResult_t_len_get, _irods.sqlResult_t_len_set)
    __swig_setmethods__["value"] = _irods.sqlResult_t_value_set
    __swig_getmethods__["value"] = _irods.sqlResult_t_value_get
    if _newclass:value = _swig_property(_irods.sqlResult_t_value_get, _irods.sqlResult_t_value_set)
    def __init__(self): 
        this = _irods.new_sqlResult_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_sqlResult_t
    __del__ = lambda self : None;
sqlResult_t_swigregister = _irods.sqlResult_t_swigregister
sqlResult_t_swigregister(sqlResult_t)


def rcGeneralUpdate(*args):
  return _irods.rcGeneralUpdate(*args)
rcGeneralUpdate = _irods.rcGeneralUpdate

def rcGenQuery(*args):
  return _irods.rcGenQuery(*args)
rcGenQuery = _irods.rcGenQuery

def rcQuerySpecColl(*args):
  return _irods.rcQuerySpecColl(*args)
rcQuerySpecColl = _irods.rcQuerySpecColl

def rcSimpleQuery(*args):
  return _irods.rcSimpleQuery(*args)
rcSimpleQuery = _irods.rcSimpleQuery
class structFileExtAndRegInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, structFileExtAndRegInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, structFileExtAndRegInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["objPath"] = _irods.structFileExtAndRegInp_t_objPath_set
    __swig_getmethods__["objPath"] = _irods.structFileExtAndRegInp_t_objPath_get
    if _newclass:objPath = _swig_property(_irods.structFileExtAndRegInp_t_objPath_get, _irods.structFileExtAndRegInp_t_objPath_set)
    __swig_setmethods__["collection"] = _irods.structFileExtAndRegInp_t_collection_set
    __swig_getmethods__["collection"] = _irods.structFileExtAndRegInp_t_collection_get
    if _newclass:collection = _swig_property(_irods.structFileExtAndRegInp_t_collection_get, _irods.structFileExtAndRegInp_t_collection_set)
    __swig_setmethods__["oprType"] = _irods.structFileExtAndRegInp_t_oprType_set
    __swig_getmethods__["oprType"] = _irods.structFileExtAndRegInp_t_oprType_get
    if _newclass:oprType = _swig_property(_irods.structFileExtAndRegInp_t_oprType_get, _irods.structFileExtAndRegInp_t_oprType_set)
    __swig_setmethods__["flags"] = _irods.structFileExtAndRegInp_t_flags_set
    __swig_getmethods__["flags"] = _irods.structFileExtAndRegInp_t_flags_get
    if _newclass:flags = _swig_property(_irods.structFileExtAndRegInp_t_flags_get, _irods.structFileExtAndRegInp_t_flags_set)
    __swig_setmethods__["condInput"] = _irods.structFileExtAndRegInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.structFileExtAndRegInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.structFileExtAndRegInp_t_condInput_get, _irods.structFileExtAndRegInp_t_condInput_set)
    def __init__(self): 
        this = _irods.new_structFileExtAndRegInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_structFileExtAndRegInp_t
    __del__ = lambda self : None;
structFileExtAndRegInp_t_swigregister = _irods.structFileExtAndRegInp_t_swigregister
structFileExtAndRegInp_t_swigregister(structFileExtAndRegInp_t)

class structFileOprInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, structFileOprInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, structFileOprInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _irods.structFileOprInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.structFileOprInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.structFileOprInp_t_addr_get, _irods.structFileOprInp_t_addr_set)
    __swig_setmethods__["oprType"] = _irods.structFileOprInp_t_oprType_set
    __swig_getmethods__["oprType"] = _irods.structFileOprInp_t_oprType_get
    if _newclass:oprType = _swig_property(_irods.structFileOprInp_t_oprType_get, _irods.structFileOprInp_t_oprType_set)
    __swig_setmethods__["flags"] = _irods.structFileOprInp_t_flags_set
    __swig_getmethods__["flags"] = _irods.structFileOprInp_t_flags_get
    if _newclass:flags = _swig_property(_irods.structFileOprInp_t_flags_get, _irods.structFileOprInp_t_flags_set)
    __swig_setmethods__["specColl"] = _irods.structFileOprInp_t_specColl_set
    __swig_getmethods__["specColl"] = _irods.structFileOprInp_t_specColl_get
    if _newclass:specColl = _swig_property(_irods.structFileOprInp_t_specColl_get, _irods.structFileOprInp_t_specColl_set)
    __swig_setmethods__["condInput"] = _irods.structFileOprInp_t_condInput_set
    __swig_getmethods__["condInput"] = _irods.structFileOprInp_t_condInput_get
    if _newclass:condInput = _swig_property(_irods.structFileOprInp_t_condInput_get, _irods.structFileOprInp_t_condInput_set)
    def __init__(self): 
        this = _irods.new_structFileOprInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_structFileOprInp_t
    __del__ = lambda self : None;
structFileOprInp_t_swigregister = _irods.structFileOprInp_t_swigregister
structFileOprInp_t_swigregister(structFileOprInp_t)

class subStructFileFdOprInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subStructFileFdOprInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subStructFileFdOprInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _irods.subStructFileFdOprInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.subStructFileFdOprInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.subStructFileFdOprInp_t_addr_get, _irods.subStructFileFdOprInp_t_addr_set)
    __swig_setmethods__["type"] = _irods.subStructFileFdOprInp_t_type_set
    __swig_getmethods__["type"] = _irods.subStructFileFdOprInp_t_type_get
    if _newclass:type = _swig_property(_irods.subStructFileFdOprInp_t_type_get, _irods.subStructFileFdOprInp_t_type_set)
    __swig_setmethods__["fd"] = _irods.subStructFileFdOprInp_t_fd_set
    __swig_getmethods__["fd"] = _irods.subStructFileFdOprInp_t_fd_get
    if _newclass:fd = _swig_property(_irods.subStructFileFdOprInp_t_fd_get, _irods.subStructFileFdOprInp_t_fd_set)
    __swig_setmethods__["len"] = _irods.subStructFileFdOprInp_t_len_set
    __swig_getmethods__["len"] = _irods.subStructFileFdOprInp_t_len_get
    if _newclass:len = _swig_property(_irods.subStructFileFdOprInp_t_len_get, _irods.subStructFileFdOprInp_t_len_set)
    def __init__(self): 
        this = _irods.new_subStructFileFdOprInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_subStructFileFdOprInp_t
    __del__ = lambda self : None;
subStructFileFdOprInp_t_swigregister = _irods.subStructFileFdOprInp_t_swigregister
subStructFileFdOprInp_t_swigregister(subStructFileFdOprInp_t)

class subStructFileLseekInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subStructFileLseekInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subStructFileLseekInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _irods.subStructFileLseekInp_t_addr_set
    __swig_getmethods__["addr"] = _irods.subStructFileLseekInp_t_addr_get
    if _newclass:addr = _swig_property(_irods.subStructFileLseekInp_t_addr_get, _irods.subStructFileLseekInp_t_addr_set)
    __swig_setmethods__["type"] = _irods.subStructFileLseekInp_t_type_set
    __swig_getmethods__["type"] = _irods.subStructFileLseekInp_t_type_get
    if _newclass:type = _swig_property(_irods.subStructFileLseekInp_t_type_get, _irods.subStructFileLseekInp_t_type_set)
    __swig_setmethods__["fd"] = _irods.subStructFileLseekInp_t_fd_set
    __swig_getmethods__["fd"] = _irods.subStructFileLseekInp_t_fd_get
    if _newclass:fd = _swig_property(_irods.subStructFileLseekInp_t_fd_get, _irods.subStructFileLseekInp_t_fd_set)
    __swig_setmethods__["offset"] = _irods.subStructFileLseekInp_t_offset_set
    __swig_getmethods__["offset"] = _irods.subStructFileLseekInp_t_offset_get
    if _newclass:offset = _swig_property(_irods.subStructFileLseekInp_t_offset_get, _irods.subStructFileLseekInp_t_offset_set)
    __swig_setmethods__["whence"] = _irods.subStructFileLseekInp_t_whence_set
    __swig_getmethods__["whence"] = _irods.subStructFileLseekInp_t_whence_get
    if _newclass:whence = _swig_property(_irods.subStructFileLseekInp_t_whence_get, _irods.subStructFileLseekInp_t_whence_set)
    def __init__(self): 
        this = _irods.new_subStructFileLseekInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_subStructFileLseekInp_t
    __del__ = lambda self : None;
subStructFileLseekInp_t_swigregister = _irods.subStructFileLseekInp_t_swigregister
subStructFileLseekInp_t_swigregister(subStructFileLseekInp_t)

class subStructFileRenameInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, subStructFileRenameInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, subStructFileRenameInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["subFile"] = _irods.subStructFileRenameInp_t_subFile_set
    __swig_getmethods__["subFile"] = _irods.subStructFileRenameInp_t_subFile_get
    if _newclass:subFile = _swig_property(_irods.subStructFileRenameInp_t_subFile_get, _irods.subStructFileRenameInp_t_subFile_set)
    __swig_setmethods__["newSubFilePath"] = _irods.subStructFileRenameInp_t_newSubFilePath_set
    __swig_getmethods__["newSubFilePath"] = _irods.subStructFileRenameInp_t_newSubFilePath_get
    if _newclass:newSubFilePath = _swig_property(_irods.subStructFileRenameInp_t_newSubFilePath_get, _irods.subStructFileRenameInp_t_newSubFilePath_set)
    def __init__(self): 
        this = _irods.new_subStructFileRenameInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_subStructFileRenameInp_t
    __del__ = lambda self : None;
subStructFileRenameInp_t_swigregister = _irods.subStructFileRenameInp_t_swigregister
subStructFileRenameInp_t_swigregister(subStructFileRenameInp_t)


def rcStructFileBundle(*args):
  return _irods.rcStructFileBundle(*args)
rcStructFileBundle = _irods.rcStructFileBundle

def rcStructFileExtAndReg(*args):
  return _irods.rcStructFileExtAndReg(*args)
rcStructFileExtAndReg = _irods.rcStructFileExtAndReg

def rcStructFileExtract(*args):
  return _irods.rcStructFileExtract(*args)
rcStructFileExtract = _irods.rcStructFileExtract

def rcStructFileSync(*args):
  return _irods.rcStructFileSync(*args)
rcStructFileSync = _irods.rcStructFileSync

def rcSubStructFileClose(*args):
  return _irods.rcSubStructFileClose(*args)
rcSubStructFileClose = _irods.rcSubStructFileClose

def rcSubStructFileClosedir(*args):
  return _irods.rcSubStructFileClosedir(*args)
rcSubStructFileClosedir = _irods.rcSubStructFileClosedir

def rcSubStructFileCreate(*args):
  return _irods.rcSubStructFileCreate(*args)
rcSubStructFileCreate = _irods.rcSubStructFileCreate

def rcSubStructFileFstat(*args):
  return _irods.rcSubStructFileFstat(*args)
rcSubStructFileFstat = _irods.rcSubStructFileFstat

def rcSubStructFileGet(*args):
  return _irods.rcSubStructFileGet(*args)
rcSubStructFileGet = _irods.rcSubStructFileGet

def rcSubStructFileLseek(*args):
  return _irods.rcSubStructFileLseek(*args)
rcSubStructFileLseek = _irods.rcSubStructFileLseek

def rcSubStructFileMkdir(*args):
  return _irods.rcSubStructFileMkdir(*args)
rcSubStructFileMkdir = _irods.rcSubStructFileMkdir

def rcSubStructFileOpen(*args):
  return _irods.rcSubStructFileOpen(*args)
rcSubStructFileOpen = _irods.rcSubStructFileOpen

def rcSubStructFileOpendir(*args):
  return _irods.rcSubStructFileOpendir(*args)
rcSubStructFileOpendir = _irods.rcSubStructFileOpendir

def rcSubStructFilePut(*args):
  return _irods.rcSubStructFilePut(*args)
rcSubStructFilePut = _irods.rcSubStructFilePut

def rcSubStructFileRead(*args):
  return _irods.rcSubStructFileRead(*args)
rcSubStructFileRead = _irods.rcSubStructFileRead

def rcSubStructFileReaddir(*args):
  return _irods.rcSubStructFileReaddir(*args)
rcSubStructFileReaddir = _irods.rcSubStructFileReaddir

def rcSubStructFileRename(*args):
  return _irods.rcSubStructFileRename(*args)
rcSubStructFileRename = _irods.rcSubStructFileRename

def rcSubStructFileRmdir(*args):
  return _irods.rcSubStructFileRmdir(*args)
rcSubStructFileRmdir = _irods.rcSubStructFileRmdir

def rcSubStructFileTruncate(*args):
  return _irods.rcSubStructFileTruncate(*args)
rcSubStructFileTruncate = _irods.rcSubStructFileTruncate

def rcSubStructFileUnlink(*args):
  return _irods.rcSubStructFileUnlink(*args)
rcSubStructFileUnlink = _irods.rcSubStructFileUnlink

def rcSubStructFileWrite(*args):
  return _irods.rcSubStructFileWrite(*args)
rcSubStructFileWrite = _irods.rcSubStructFileWrite
class irodsGroup:

    def __init__(self, conn, groupName):
        self._conn = conn
        self.groupName = groupName

    def addUser(self, name, zone=""):
        if zone:
            namezone = "%s#%s" % (name, zone)
        else:
            namezone = name
        return modifyObject(self._conn, "group", self.groupName,
                            "add", namezone)

    def addUserMetadata(self, name, value, units=""):
        return addUserMetadata(self._conn, "-u", self.groupName, name, value, units)

    def getComment(self):
        d = self.getInfos()
        return d.get("r_comment", "")

    def getCreateTs(self):
        d = self.getInfos()
        return d.get("create_ts", "")

    def getId(self):
        d = self.getInfos()
        return d.get("user_id", "")

    def getInfo(self):
        d = self.getInfos()
        return d.get("user_info", "")

    def getInfos(self):
        return getUserInfoToDict(self._conn, self.groupName)

    def getMembers(self):
        l = getGroupMembers(self._conn, self.groupName)
        return [ irodsUser(self._conn, name, zone) for (name, zone) in l ]

    def getModifyTs(self):
        d = self.getInfos()
        return d.get("modify_ts", "")

    def getName(self):
        return self.groupName

    def getTypeName(self):
        d = self.getInfos()
        return d.get("user_type_name", "")

    def getUserMetadata(self):
        sqlCondInp = inxValPair_t()
        selectInp = inxIvalPair_t()
        selectInp.init([COL_META_USER_ATTR_NAME, COL_META_USER_ATTR_VALUE,
                        COL_META_USER_ATTR_UNITS],
                       [0, 0, 0], 3)
        sqlCondInp.init([COL_USER_NAME], ["='%s'" % self.groupName], 1)
        return queryToTupleList(self._conn, selectInp, sqlCondInp)

    def getZone(self):
        d = self.getInfos()
        return d.get("zone_name", "")

    def rmUser(self, userName, userZone=""):
        if userZone:
            namezone = "%s#%s" % (name, userZone)
        else:
            namezone = userName
        return modifyObject(self._conn, "group", self.groupName,
                            "remove", namezone)

    def rmUserMetadata(self, name, value, units=""):
        return rmUserMetadata(self._conn, "-u", self.groupName,
                               name, value, units) 

    def setComment(self, value):
        return modifyObject(self._conn, "user", self.groupName, "comment", value)

    def setInfo(self, value):
        return modifyObject(self._conn, "user", self.groupName, "info", value)

class irodsResource:

    def __init__(self, conn, resc_name):
        self._conn = conn
        self.name = resc_name

    def addUserMetadata(self, name, value, units=""):
        return addUserMetadata(self._conn, "-r", self.name, name, value, units)

    def getClassName(self):
        d = self.getInfos()
        return d.get("resc_class_name", "")

    def getComment(self):
        d = self.getInfos()
        return d.get("r_comment", "")

    def getCreateTs(self):
        d = self.getInfos()
        return d.get("create_ts", "")

    def getFreeSpace(self):
        d = self.getInfos()
        return d.get("free_space", "")

    def getFreeSpaceTs(self):
        d = self.getInfos()
        return d.get("free_space_ts", "")

    def getHost(self):
        d = self.getInfos()
        return d.get("resc_net", "")

    def getId(self):
        d = self.getInfos()
        return d.get("resc_id", "")

    def getInfo(self):
        d = self.getInfos()
        return d.get("resc_info", "")

    def getInfos(self):
        return getRescInfoToDict(self._conn, self.name)

    def getModifyTs(self):
        d = self.getInfos()
        return d.get("modify_ts", "")

    def getName(self):
        return self.name

    def getPath(self):
        d = self.getInfos()
        return d.get("resc_def_path", "")
    
    def getTypeName(self):
        d = self.getInfos()
        return d.get("resc_type_name", "")

    def getUserMetadata(self):
        sqlCondInp = inxValPair_t()
        selectInp = inxIvalPair_t()
        selectInp.init([COL_META_RESC_ATTR_NAME, COL_META_RESC_ATTR_VALUE,
                        COL_META_RESC_ATTR_UNITS],
                       [0, 0, 0], 3)
        sqlCondInp.init([COL_R_RESC_NAME], ["='%s'" % self.name], 1)
        return queryToTupleList(self._conn, selectInp, sqlCondInp)

    def getZone(self):
        d = self.getInfos()
        return d.get("zone_name", "")

    def rmUserMetadata(self, name, value, units=""):
        return rmUserMetadata(self._conn, "-r", self.name,
                               name, value, units) 

    def setClassName(self, value):
        return modifyObject(self._conn, "resource", self.name, "class", value)

    def setComment(self, value):
        return modifyObject(self._conn, "resource", self.name, "comment", value)

    def setFreeSpace(self, value):
        return modifyObject(self._conn, "resource", self.name, "freespace", value)

    def setHost(self, value):
        return modifyObject(self._conn, "resource", self.name, "host", value)

    def setInfo(self, value):
        return modifyObject(self._conn, "resource", self.name, "info", value)

    def setPath(self, value):
        return modifyObject(self._conn, "resource", self.name, "path", value)

    def setTypeName(self, value):
        return modifyObject(self._conn, "resource", self.name, "type", value)

class irodsUser:

    def __init__(self, conn, userName, userZone):
        self._conn = conn
        self.userName = userName
        self.userZone = userZone

    def addUserMetadata(self, name, value, units=""):
        return addUserMetadata(self._conn, "-u", self.userName, name, value, units)

    def getComment(self):
        d = self.getInfos()
        return d.get("r_comment", "")

    def getCreateTs(self):
        d = self.getInfos()
        return d.get("create_ts", "")

    def getFullName(self):
        return "%s#%s" % (self.userName, self.userZone)

    def getGroups(self):
        sqlCondInp = inxValPair_t()
        selectInp = inxIvalPair_t()
        selectInp.init([COL_USER_GROUP_NAME],
                       [0], 1)
        sqlCondInp.init([COL_USER_NAME], 
                        ["='%s'" % self.userName], 1)
        l = queryToTupleList(self._conn, selectInp, sqlCondInp)
        return [ irodsGroup(self._conn, name) for name in l ]

    def getId(self):
        d = self.getInfos()
        return d.get("user_id", "")

    def getInfo(self):
        d = self.getInfos()
        return d.get("user_info", "")

    def getInfos(self):
        return getUserInfoToDict(self._conn, self.userName)

    def getModifyTs(self):
        d = self.getInfos()
        return d.get("modify_ts", "")

    def getName(self):
        return self.userName

    def getQuotaGlobal(self):
        return getQuota(self._conn, self.getFullName(), True, True)

    def getQuotaResources(self):
        return getQuota(self._conn, self.getFullName(), True, False)

    def getTypeName(self):
        d = self.getInfos()
        return d.get("user_type_name", "")

    def getUserMetadata(self):
        sqlCondInp = inxValPair_t()
        selectInp = inxIvalPair_t()
        selectInp.init([COL_META_USER_ATTR_NAME, COL_META_USER_ATTR_VALUE,
                        COL_META_USER_ATTR_UNITS],
                       [0, 0, 0], 3)
        sqlCondInp.init([COL_USER_NAME, COL_USER_ZONE], 
                        ["='%s'" % self.userName,
                         "='%s'" % self.userZone], 2)
        return queryToTupleList(self._conn, selectInp, sqlCondInp)

    def getZone(self):
        return self.userZone

    def rmUserMetadata(self, name, value, units=""):
        return rmUserMetadata(self._conn, "-u", self.userName,
                               name, value, units)

    def setComment(self, value):
        return modifyObject(self._conn, "user", self.userName, "comment", value)

    def setInfo(self, value):
        return modifyObject(self._conn, "user", self.userName, "info", value)

    def setPassword(self, new_pw):
        return setPassword(self._conn, self.userName, new_pw)

    def setTypeName(self, value):
        return modifyObject(self._conn, "user", self.userName, "type", value)

    def setZone(self, value):
        return modifyObject(self._conn, "user", self.userName, "zone", value)


class irodsZone:

    def __init__(self, conn, name):
        self._conn = conn
        self.name = name

    def __str__(self):
        return self.name

    def getComment(self):
        d = self.getInfos()
        return d.get("r_comment", "")

    def getConnString(self):
        d = self.getInfos()
        return d.get("zone_conn_string", "")

    def getCreateTs(self):
        d = self.getInfos()
        return d.get("create_ts", "")

    def getId(self):
        d = self.getInfos()
        return d.get("zone_id", "")

    def getInfos(self):
        return getZoneInfoToDict(self._conn, self.name)

    def getModifyTs(self):
        d = self.getInfos()
        return d.get("modify_ts", "")

    def getName(self):
        return self.name

    def getTypeName(self):
        d = self.getInfos()
        return d.get("zone_type_name", "")

    def setComment(self, value):
        return modifyObject(self._conn, "zone", self.name, "comment", value)

    def setConnString(self, value):
        return modifyObject(self._conn, "zone", self.name, "conn", value)



class authInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, authInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, authInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["authScheme"] = _irods.authInfo_t_authScheme_set
    __swig_getmethods__["authScheme"] = _irods.authInfo_t_authScheme_get
    if _newclass:authScheme = _swig_property(_irods.authInfo_t_authScheme_get, _irods.authInfo_t_authScheme_set)
    __swig_setmethods__["authFlag"] = _irods.authInfo_t_authFlag_set
    __swig_getmethods__["authFlag"] = _irods.authInfo_t_authFlag_get
    if _newclass:authFlag = _swig_property(_irods.authInfo_t_authFlag_get, _irods.authInfo_t_authFlag_set)
    __swig_setmethods__["flag"] = _irods.authInfo_t_flag_set
    __swig_getmethods__["flag"] = _irods.authInfo_t_flag_get
    if _newclass:flag = _swig_property(_irods.authInfo_t_flag_get, _irods.authInfo_t_flag_set)
    __swig_setmethods__["ppid"] = _irods.authInfo_t_ppid_set
    __swig_getmethods__["ppid"] = _irods.authInfo_t_ppid_get
    if _newclass:ppid = _swig_property(_irods.authInfo_t_ppid_get, _irods.authInfo_t_ppid_set)
    __swig_setmethods__["host"] = _irods.authInfo_t_host_set
    __swig_getmethods__["host"] = _irods.authInfo_t_host_get
    if _newclass:host = _swig_property(_irods.authInfo_t_host_get, _irods.authInfo_t_host_set)
    __swig_setmethods__["authStr"] = _irods.authInfo_t_authStr_set
    __swig_getmethods__["authStr"] = _irods.authInfo_t_authStr_get
    if _newclass:authStr = _swig_property(_irods.authInfo_t_authStr_get, _irods.authInfo_t_authStr_set)
    def __init__(self): 
        this = _irods.new_authInfo_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_authInfo_t
    __del__ = lambda self : None;
authInfo_t_swigregister = _irods.authInfo_t_swigregister
authInfo_t_swigregister(authInfo_t)

class userInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, userInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, userInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userName"] = _irods.userInfo_t_userName_set
    __swig_getmethods__["userName"] = _irods.userInfo_t_userName_get
    if _newclass:userName = _swig_property(_irods.userInfo_t_userName_get, _irods.userInfo_t_userName_set)
    __swig_setmethods__["rodsZone"] = _irods.userInfo_t_rodsZone_set
    __swig_getmethods__["rodsZone"] = _irods.userInfo_t_rodsZone_get
    if _newclass:rodsZone = _swig_property(_irods.userInfo_t_rodsZone_get, _irods.userInfo_t_rodsZone_set)
    __swig_setmethods__["userType"] = _irods.userInfo_t_userType_set
    __swig_getmethods__["userType"] = _irods.userInfo_t_userType_get
    if _newclass:userType = _swig_property(_irods.userInfo_t_userType_get, _irods.userInfo_t_userType_set)
    __swig_setmethods__["sysUid"] = _irods.userInfo_t_sysUid_set
    __swig_getmethods__["sysUid"] = _irods.userInfo_t_sysUid_get
    if _newclass:sysUid = _swig_property(_irods.userInfo_t_sysUid_get, _irods.userInfo_t_sysUid_set)
    __swig_setmethods__["authInfo"] = _irods.userInfo_t_authInfo_set
    __swig_getmethods__["authInfo"] = _irods.userInfo_t_authInfo_get
    if _newclass:authInfo = _swig_property(_irods.userInfo_t_authInfo_get, _irods.userInfo_t_authInfo_set)
    __swig_setmethods__["userOtherInfo"] = _irods.userInfo_t_userOtherInfo_set
    __swig_getmethods__["userOtherInfo"] = _irods.userInfo_t_userOtherInfo_get
    if _newclass:userOtherInfo = _swig_property(_irods.userInfo_t_userOtherInfo_get, _irods.userInfo_t_userOtherInfo_set)
    def __init__(self): 
        this = _irods.new_userInfo_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_userInfo_t
    __del__ = lambda self : None;
userInfo_t_swigregister = _irods.userInfo_t_swigregister
userInfo_t_swigregister(userInfo_t)

class userOtherInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, userOtherInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, userOtherInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userInfo"] = _irods.userOtherInfo_t_userInfo_set
    __swig_getmethods__["userInfo"] = _irods.userOtherInfo_t_userInfo_get
    if _newclass:userInfo = _swig_property(_irods.userOtherInfo_t_userInfo_get, _irods.userOtherInfo_t_userInfo_set)
    __swig_setmethods__["userComments"] = _irods.userOtherInfo_t_userComments_set
    __swig_getmethods__["userComments"] = _irods.userOtherInfo_t_userComments_get
    if _newclass:userComments = _swig_property(_irods.userOtherInfo_t_userComments_get, _irods.userOtherInfo_t_userComments_set)
    __swig_setmethods__["userCreate"] = _irods.userOtherInfo_t_userCreate_set
    __swig_getmethods__["userCreate"] = _irods.userOtherInfo_t_userCreate_get
    if _newclass:userCreate = _swig_property(_irods.userOtherInfo_t_userCreate_get, _irods.userOtherInfo_t_userCreate_set)
    __swig_setmethods__["userModify"] = _irods.userOtherInfo_t_userModify_set
    __swig_getmethods__["userModify"] = _irods.userOtherInfo_t_userModify_get
    if _newclass:userModify = _swig_property(_irods.userOtherInfo_t_userModify_get, _irods.userOtherInfo_t_userModify_set)
    def __init__(self): 
        this = _irods.new_userOtherInfo_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_userOtherInfo_t
    __del__ = lambda self : None;
userOtherInfo_t_swigregister = _irods.userOtherInfo_t_swigregister
userOtherInfo_t_swigregister(userOtherInfo_t)

class getXmsgTicketInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, getXmsgTicketInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, getXmsgTicketInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["expireTime"] = _irods.getXmsgTicketInp_t_expireTime_set
    __swig_getmethods__["expireTime"] = _irods.getXmsgTicketInp_t_expireTime_get
    if _newclass:expireTime = _swig_property(_irods.getXmsgTicketInp_t_expireTime_get, _irods.getXmsgTicketInp_t_expireTime_set)
    __swig_setmethods__["flag"] = _irods.getXmsgTicketInp_t_flag_set
    __swig_getmethods__["flag"] = _irods.getXmsgTicketInp_t_flag_get
    if _newclass:flag = _swig_property(_irods.getXmsgTicketInp_t_flag_get, _irods.getXmsgTicketInp_t_flag_set)
    def __init__(self): 
        this = _irods.new_getXmsgTicketInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_getXmsgTicketInp_t
    __del__ = lambda self : None;
getXmsgTicketInp_t_swigregister = _irods.getXmsgTicketInp_t_swigregister
getXmsgTicketInp_t_swigregister(getXmsgTicketInp_t)

class rcvXmsgInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rcvXmsgInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rcvXmsgInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rcvTicket"] = _irods.rcvXmsgInp_t_rcvTicket_set
    __swig_getmethods__["rcvTicket"] = _irods.rcvXmsgInp_t_rcvTicket_get
    if _newclass:rcvTicket = _swig_property(_irods.rcvXmsgInp_t_rcvTicket_get, _irods.rcvXmsgInp_t_rcvTicket_set)
    __swig_setmethods__["msgNumber"] = _irods.rcvXmsgInp_t_msgNumber_set
    __swig_getmethods__["msgNumber"] = _irods.rcvXmsgInp_t_msgNumber_get
    if _newclass:msgNumber = _swig_property(_irods.rcvXmsgInp_t_msgNumber_get, _irods.rcvXmsgInp_t_msgNumber_set)
    __swig_setmethods__["seqNumber"] = _irods.rcvXmsgInp_t_seqNumber_set
    __swig_getmethods__["seqNumber"] = _irods.rcvXmsgInp_t_seqNumber_get
    if _newclass:seqNumber = _swig_property(_irods.rcvXmsgInp_t_seqNumber_get, _irods.rcvXmsgInp_t_seqNumber_set)
    __swig_setmethods__["msgCondition"] = _irods.rcvXmsgInp_t_msgCondition_set
    __swig_getmethods__["msgCondition"] = _irods.rcvXmsgInp_t_msgCondition_get
    if _newclass:msgCondition = _swig_property(_irods.rcvXmsgInp_t_msgCondition_get, _irods.rcvXmsgInp_t_msgCondition_set)
    def __init__(self): 
        this = _irods.new_rcvXmsgInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rcvXmsgInp_t
    __del__ = lambda self : None;
rcvXmsgInp_t_swigregister = _irods.rcvXmsgInp_t_swigregister
rcvXmsgInp_t_swigregister(rcvXmsgInp_t)

class rcvXmsgOut_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rcvXmsgOut_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rcvXmsgOut_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgType"] = _irods.rcvXmsgOut_t_msgType_set
    __swig_getmethods__["msgType"] = _irods.rcvXmsgOut_t_msgType_get
    if _newclass:msgType = _swig_property(_irods.rcvXmsgOut_t_msgType_get, _irods.rcvXmsgOut_t_msgType_set)
    __swig_setmethods__["sendUserName"] = _irods.rcvXmsgOut_t_sendUserName_set
    __swig_getmethods__["sendUserName"] = _irods.rcvXmsgOut_t_sendUserName_get
    if _newclass:sendUserName = _swig_property(_irods.rcvXmsgOut_t_sendUserName_get, _irods.rcvXmsgOut_t_sendUserName_set)
    __swig_setmethods__["sendAddr"] = _irods.rcvXmsgOut_t_sendAddr_set
    __swig_getmethods__["sendAddr"] = _irods.rcvXmsgOut_t_sendAddr_get
    if _newclass:sendAddr = _swig_property(_irods.rcvXmsgOut_t_sendAddr_get, _irods.rcvXmsgOut_t_sendAddr_set)
    __swig_setmethods__["msgNumber"] = _irods.rcvXmsgOut_t_msgNumber_set
    __swig_getmethods__["msgNumber"] = _irods.rcvXmsgOut_t_msgNumber_get
    if _newclass:msgNumber = _swig_property(_irods.rcvXmsgOut_t_msgNumber_get, _irods.rcvXmsgOut_t_msgNumber_set)
    __swig_setmethods__["seqNumber"] = _irods.rcvXmsgOut_t_seqNumber_set
    __swig_getmethods__["seqNumber"] = _irods.rcvXmsgOut_t_seqNumber_get
    if _newclass:seqNumber = _swig_property(_irods.rcvXmsgOut_t_seqNumber_get, _irods.rcvXmsgOut_t_seqNumber_set)
    __swig_setmethods__["msg"] = _irods.rcvXmsgOut_t_msg_set
    __swig_getmethods__["msg"] = _irods.rcvXmsgOut_t_msg_get
    if _newclass:msg = _swig_property(_irods.rcvXmsgOut_t_msg_get, _irods.rcvXmsgOut_t_msg_set)
    def __init__(self): 
        this = _irods.new_rcvXmsgOut_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_rcvXmsgOut_t
    __del__ = lambda self : None;
rcvXmsgOut_t_swigregister = _irods.rcvXmsgOut_t_swigregister
rcvXmsgOut_t_swigregister(rcvXmsgOut_t)

class xmsgTicketInfo_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xmsgTicketInfo_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xmsgTicketInfo_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sendTicket"] = _irods.xmsgTicketInfo_t_sendTicket_set
    __swig_getmethods__["sendTicket"] = _irods.xmsgTicketInfo_t_sendTicket_get
    if _newclass:sendTicket = _swig_property(_irods.xmsgTicketInfo_t_sendTicket_get, _irods.xmsgTicketInfo_t_sendTicket_set)
    __swig_setmethods__["rcvTicket"] = _irods.xmsgTicketInfo_t_rcvTicket_set
    __swig_getmethods__["rcvTicket"] = _irods.xmsgTicketInfo_t_rcvTicket_get
    if _newclass:rcvTicket = _swig_property(_irods.xmsgTicketInfo_t_rcvTicket_get, _irods.xmsgTicketInfo_t_rcvTicket_set)
    __swig_setmethods__["expireTime"] = _irods.xmsgTicketInfo_t_expireTime_set
    __swig_getmethods__["expireTime"] = _irods.xmsgTicketInfo_t_expireTime_get
    if _newclass:expireTime = _swig_property(_irods.xmsgTicketInfo_t_expireTime_get, _irods.xmsgTicketInfo_t_expireTime_set)
    __swig_setmethods__["flag"] = _irods.xmsgTicketInfo_t_flag_set
    __swig_getmethods__["flag"] = _irods.xmsgTicketInfo_t_flag_get
    if _newclass:flag = _swig_property(_irods.xmsgTicketInfo_t_flag_get, _irods.xmsgTicketInfo_t_flag_set)
    def __init__(self): 
        this = _irods.new_xmsgTicketInfo_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_xmsgTicketInfo_t
    __del__ = lambda self : None;
xmsgTicketInfo_t_swigregister = _irods.xmsgTicketInfo_t_swigregister
xmsgTicketInfo_t_swigregister(xmsgTicketInfo_t)

class sendXmsgInp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sendXmsgInp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sendXmsgInp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ticket"] = _irods.sendXmsgInp_t_ticket_set
    __swig_getmethods__["ticket"] = _irods.sendXmsgInp_t_ticket_get
    if _newclass:ticket = _swig_property(_irods.sendXmsgInp_t_ticket_get, _irods.sendXmsgInp_t_ticket_set)
    __swig_setmethods__["sendAddr"] = _irods.sendXmsgInp_t_sendAddr_set
    __swig_getmethods__["sendAddr"] = _irods.sendXmsgInp_t_sendAddr_get
    if _newclass:sendAddr = _swig_property(_irods.sendXmsgInp_t_sendAddr_get, _irods.sendXmsgInp_t_sendAddr_set)
    __swig_setmethods__["sendXmsgInfo"] = _irods.sendXmsgInp_t_sendXmsgInfo_set
    __swig_getmethods__["sendXmsgInfo"] = _irods.sendXmsgInp_t_sendXmsgInfo_get
    if _newclass:sendXmsgInfo = _swig_property(_irods.sendXmsgInp_t_sendXmsgInfo_get, _irods.sendXmsgInp_t_sendXmsgInfo_set)
    def __init__(self): 
        this = _irods.new_sendXmsgInp_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _irods.delete_sendXmsgInp_t
    __del__ = lambda self : None;
sendXmsgInp_t_swigregister = _irods.sendXmsgInp_t_swigregister
sendXmsgInp_t_swigregister(sendXmsgInp_t)


def rcGetXmsgTicket(*args):
  return _irods.rcGetXmsgTicket(*args)
rcGetXmsgTicket = _irods.rcGetXmsgTicket

def rcRcvXmsg(*args):
  return _irods.rcRcvXmsg(*args)
rcRcvXmsg = _irods.rcRcvXmsg

def rcSendXmsg(*args):
  return _irods.rcSendXmsg(*args)
rcSendXmsg = _irods.rcSendXmsg

def splitPathByKey(*args):
  return _irods.splitPathByKey(*args)
splitPathByKey = _irods.splitPathByKey
def splitPathByKey(srcPath, key):
    """splitPathByKey - 
  Input -
    str srcPath -
    char key -
  OutPut - (str, str, int)
    str coll - directory
    str data - file
    int status - status of the operation."""
    global lastStatus
    # TO IMPROVE: irods doesn't manage this out string well
    coll = "_" * MAX_NAME_LEN
    data = "_" * MAX_NAME_LEN
    lastStatus = _irods.splitPathByKey(srcPath, coll, data, key)
    coll = coll[:coll.find('\0')]
    data = data[:data.find('\0')]
    return (lastStatus, coll, data)

# This file is compatible with both classic and new-style classes.


